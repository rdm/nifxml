{
  "niftoolsxml": {
    "$": {
      "version": "0.9.0.0"
    },
    "version": [
      {
        "_": "Dark Age of Camelot",
        "$": {
          "num": "2.3"
        }
      },
      {
        "_": "Star Trek: Bridge Commander",
        "$": {
          "num": "3.0"
        }
      },
      {
        "_": "Dark Age of Camelot",
        "$": {
          "num": "3.03"
        }
      },
      {
        "_": "Dark Age of Camelot, Star Trek: Bridge Commander",
        "$": {
          "num": "3.1"
        }
      },
      {
        "_": "Oblivion",
        "$": {
          "num": "3.3.0.13"
        }
      },
      {
        "_": "Freedom Force",
        "$": {
          "num": "4.0.0.0"
        }
      },
      {
        "_": "Morrowind, Freedom Force",
        "$": {
          "num": "4.0.0.2"
        }
      },
      {
        "_": "Dark Age of Camelot",
        "$": {
          "num": "4.1.0.12"
        }
      },
      {
        "_": "Civilization IV",
        "$": {
          "num": "4.2.0.2"
        }
      },
      {
        "_": "Dark Age of Camelot, Civilization IV",
        "$": {
          "num": "4.2.1.0"
        }
      },
      {
        "_": "Dark Age of Camelot, Civilization IV, Empire Earth II, Culpa Innata",
        "$": {
          "num": "4.2.2.0"
        }
      },
      {
        "_": "Zoo Tycoon 2, Civilization IV, Oblivion",
        "$": {
          "num": "10.0.1.0"
        }
      },
      {
        "_": "Oblivion",
        "$": {
          "num": "10.0.1.2"
        }
      },
      {
        "_": "?",
        "$": {
          "num": "10.0.1.3"
        }
      },
      {
        "_": "Dark Age of Camelot, Civilization IV, Freedom Force vs. the 3rd Reich, Axis and Allies, Kohan 2, Entropia Universe, Wildlife Park 2, The Guild 2, NeoSteam, Empire Earth II",
        "$": {
          "num": "10.1.0.0"
        }
      },
      {
        "_": "Oblivion",
        "$": {
          "num": "10.1.0.101"
        }
      },
      {
        "_": "Oblivion",
        "$": {
          "num": "10.1.0.106"
        }
      },
      {
        "_": "Civilization IV, Oblivion, Loki, Pro Cycling Manager, Prison Tycoon, Red Ocean, Wildlife Park 2",
        "$": {
          "num": "10.2.0.0"
        }
      },
      {
        "_": "Worldshift",
        "$": {
          "num": "10.2.0.1"
        }
      },
      {
        "_": "Worldshift",
        "$": {
          "num": "10.4.0.1"
        }
      },
      {
        "_": "Civilization IV, Oblivion, Sid Meier's Railroads",
        "$": {
          "num": "20.0.0.4"
        }
      },
      {
        "_": "Oblivion",
        "$": {
          "num": "20.0.0.5"
        }
      },
      {
        "_": "Megami Tensei: Imagine",
        "$": {
          "num": "20.1.0.3"
        }
      },
      {
        "_": "Emerge, Empire Earth III, Fallout 3, Skyrim, Fallout 4",
        "$": {
          "num": "20.2.0.7"
        }
      },
      {
        "_": "Emerge, Empire Earth III, Atlantica",
        "$": {
          "num": "20.2.0.8"
        }
      },
      {
        "_": "Emerge",
        "$": {
          "num": "20.3.0.1"
        }
      },
      {
        "_": "Emerge",
        "$": {
          "num": "20.3.0.2"
        }
      },
      {
        "_": "Emerge",
        "$": {
          "num": "20.3.0.3"
        }
      },
      {
        "_": "Emerge",
        "$": {
          "num": "20.3.0.6"
        }
      },
      {
        "_": "Warhammer, Lazeska, Divinity 2, Howling Sword, Bully SE",
        "$": {
          "num": "20.3.0.9"
        }
      },
      {
        "_": "KrazyRain",
        "$": {
          "num": "20.5.0.0"
        }
      },
      {
        "_": "KrazyRain",
        "$": {
          "num": "20.6.0.0"
        }
      },
      {
        "_": "Epic Mickey",
        "$": {
          "num": "20.6.5.0"
        }
      },
      {
        "_": "Emerge",
        "$": {
          "num": "30.0.0.2"
        }
      },
      {
        "_": "Rocksmith, Rocksmith 2014",
        "$": {
          "num": "30.1.0.3"
        }
      },
      {
        "_": "Ghost In The Shell: First Assault, MapleStory 2",
        "$": {
          "num": "30.2.0.3"
        }
      }
    ],
    "basic": [
      {
        "_": "\n        A boolean; 32-bit from 4.0.0.2, and 8-bit from 4.1.0.1 on.\n    ",
        "$": {
          "name": "bool",
          "count": "1"
        }
      },
      {
        "_": "\n        An unsigned 8-bit integer.\n    ",
        "$": {
          "name": "byte",
          "count": "1"
        }
      },
      {
        "_": "\n        An unsigned 32-bit integer.\n    ",
        "$": {
          "name": "uint",
          "count": "1"
        }
      },
      {
        "_": "\n        A litte-endian unsigned 32-bit integer.\n    ",
        "$": {
          "name": "ulittle32",
          "count": "1"
        }
      },
      {
        "_": "\n        An unsigned 16-bit integer.\n    ",
        "$": {
          "name": "ushort",
          "count": "1"
        }
      },
      {
        "_": "\n        A signed 32-bit integer.\n    ",
        "$": {
          "name": "int",
          "count": "1"
        }
      },
      {
        "_": "\n        A signed 16-bit integer.\n    ",
        "$": {
          "name": "short",
          "count": "1"
        }
      },
      {
        "_": "\n        A 16-bit (signed?) integer, which is used in the header to refer to a particular object type in a object type string array.\n        The upper bit appears to be a flag used for PhysX block types.\n    ",
        "$": {
          "name": "BlockTypeIndex",
          "count": "0"
        }
      },
      {
        "_": "\n        An 8-bit character.\n    ",
        "$": {
          "name": "char",
          "count": "0"
        }
      },
      {
        "_": "\n        A 32-bit integer that stores the version in hexadecimal format with each byte representing a number in the version string.\n\n        Some widely-used versions and their hex representation:\n        4.0.0.2:    0x04000002\n        4.1.0.12:   0x0401000C\n        4.2.0.2:    0x04020002\n        4.2.1.0:    0x04020100\n        4.2.2.0:    0x04020200\n        10.0.1.0:   0x0A000100\n        10.1.0.0:   0x0A010000\n        10.2.0.0:   0x0A020000\n        20.0.0.4:   0x14000004\n        20.0.0.5:   0x14000005\n    ",
        "$": {
          "name": "FileVersion",
          "count": "0"
        }
      },
      {
        "_": "\n        A 16-bit integer, used for bit flags.  Function varies by object type.\n    ",
        "$": {
          "name": "Flags",
          "count": "0"
        }
      },
      {
        "_": "\n        A standard 32-bit floating point number.\n    ",
        "$": {
          "name": "float",
          "count": "0"
        }
      },
      {
        "_": "\n        A 16-bit floating point number.\n    ",
        "$": {
          "name": "hfloat",
          "count": "0"
        }
      },
      {
        "_": "\n        A variable length string that ends with a newline character (0x0A).  The string starts as follows depending on the version:\n\n        Version <= 10.0.1.0:  'NetImmerse File Format'\n        Version >= 10.1.0.0:  'Gamebryo File Format'\n    ",
        "$": {
          "name": "HeaderString",
          "count": "0"
        }
      },
      {
        "_": "\n        A variable length string that ends with a newline character (0x0A).\n    ",
        "$": {
          "name": "LineString",
          "count": "0"
        }
      },
      {
        "_": "\n        A signed 32-bit integer, referring to a object before this one in the hierarchy.  Examples:  Bones, gravity objects.\n    ",
        "$": {
          "name": "Ptr",
          "count": "0",
          "istemplate": "1"
        }
      },
      {
        "_": "\n        A signed 32-bit integer, used to refer to another object; -1 means no reference. These should always point down the hierarchy. Other types are used for indexes that point to objects higher up.\n    ",
        "$": {
          "name": "Ref",
          "count": "0",
          "istemplate": "1"
        }
      },
      {
        "_": "\n        A 32-bit unsigned integer, used to refer to strings in a NiStringPalette.\n    ",
        "$": {
          "name": "StringOffset",
          "count": "0"
        }
      },
      {
        "_": "\n        A 32-bit unsigned integer, used to refer to strings in the header.\n    ",
        "$": {
          "name": "StringIndex",
          "count": "0"
        }
      }
    ],
    "bitflags": [
      {
        "_": "\n        Describes the options for the accum root on NiControllerSequence.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "AccumFlags",
          "storage": "uint"
        },
        "option": [
          {
            "_": "X Translation will be accumulated.",
            "$": {
              "value": "0",
              "name": "ACCUM_X_TRANS"
            }
          },
          {
            "_": "Y Translation will be accumulated.",
            "$": {
              "value": "1",
              "name": "ACCUM_Y_TRANS"
            }
          },
          {
            "_": "Z Translation will be accumulated.",
            "$": {
              "value": "2",
              "name": "ACCUM_Z_TRANS"
            }
          },
          {
            "_": "X Rotation will be accumulated.",
            "$": {
              "value": "3",
              "name": "ACCUM_X_ROT"
            }
          },
          {
            "_": "Y Rotation will be accumulated.",
            "$": {
              "value": "4",
              "name": "ACCUM_Y_ROT"
            }
          },
          {
            "_": "Z Rotation will be accumulated.",
            "$": {
              "value": "5",
              "name": "ACCUM_Z_ROT"
            }
          },
          {
            "_": "+X is front facing. (Default)",
            "$": {
              "value": "6",
              "name": "ACCUM_X_FRONT"
            }
          },
          {
            "_": "+Y is front facing.",
            "$": {
              "value": "7",
              "name": "ACCUM_Y_FRONT"
            }
          },
          {
            "_": "+Z is front facing.",
            "$": {
              "value": "8",
              "name": "ACCUM_Z_FRONT"
            }
          },
          {
            "_": "-X is front facing.",
            "$": {
              "value": "9",
              "name": "ACCUM_NEG_FRONT"
            }
          }
        ]
      },
      {
        "$": {
          "name": "VertexFlags",
          "storage": "ushort",
          "prefix": "VF"
        },
        "option": [
          {
            "$": {
              "value": "4",
              "name": "Vertex"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "UVs"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "UVs_2"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Normals"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Tangents"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Vertex_Colors"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Skinned"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "Land_Data"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Eye_Data"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Instance"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "Full_Precision"
            }
          }
        ]
      },
      {
        "_": "\n\t\tBethesda Animation. Furniture entry points. It specifies the direction(s) from where the actor is able to enter (and leave) the position.\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t",
        "$": {
          "name": "FurnitureEntryPoints",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "front entry point",
            "$": {
              "value": "0",
              "name": "Front"
            }
          },
          {
            "_": "behind entry point",
            "$": {
              "value": "1",
              "name": "Behind"
            }
          },
          {
            "_": "right entry point",
            "$": {
              "value": "2",
              "name": "Right"
            }
          },
          {
            "_": "left entry point",
            "$": {
              "value": "3",
              "name": "Left"
            }
          },
          {
            "_": "up entry point - unknown function. Used on some beds in Skyrim, probably for blocking of sleeping position.",
            "$": {
              "value": "4",
              "name": "Up"
            }
          }
        ]
      },
      {
        "_": "\n        Editor flags for the Body Partitions. \n        \n        \n    ",
        "$": {
          "name": "BSPartFlag",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Visible in Editor",
            "$": {
              "value": "0",
              "name": "PF_EDITOR_VISIBLE"
            }
          },
          {
            "_": "Start a new shared boneset.  It is expected this BoneSet and the following sets in the Skin Partition will have the same bones.",
            "$": {
              "value": "8",
              "name": "PF_START_NET_BONESET"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PathFlags",
          "storage": "ushort",
          "prefix": "NIPI"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "CVDataNeedsUpdate"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "CurveTypeOpen"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "AllowFlip"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "Bank"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "ConstantVelocity"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "Follow"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "Flip"
            }
          }
        ]
      },
      {
        "_": "\n        bhkNiCollisionObject flags. The flags 0x2, 0x100, and 0x200 are not seen in any NIF nor get/set by the engine.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkCOFlags",
          "storage": "ushort",
          "prefix": "BHKCO"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "ACTIVE"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "NOTIFY"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "SET_LOCAL"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "DBG_DISPLAY"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "USE_VEL"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "RESET"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "SYNC_ON_UPDATE"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "ANIM_TARGETED"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "DISMEMBERED_LIMB"
            }
          }
        ]
      },
      {
        "$": {
          "name": "VectorFlags",
          "storage": "ushort",
          "prefix": "VF"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "UV_1"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "UV_2"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "UV_4"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "UV_8"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "UV_16"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "UV_32"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "Unk64"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Unk128"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Unk256"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Unk512"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Unk1024"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "Unk2048"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Has_Tangents"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Unk8192"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "Unk16384"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "Unk32768"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSVectorFlags",
          "storage": "ushort",
          "prefix": "BSVF"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "Has_UV"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "Unk2"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "Unk4"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "Unk8"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "Unk16"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "Unk32"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "Unk64"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Unk128"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Unk256"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Unk512"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Unk1024"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "Unk2048"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Has_Tangents"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Unk8192"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "Unk16384"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "Unk32768"
            }
          }
        ]
      },
      {
        "$": {
          "name": "LookAtFlags",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Flip",
            "$": {
              "value": "0",
              "name": "LOOK_FLIP"
            }
          },
          {
            "_": "Y-Axis",
            "$": {
              "value": "1",
              "name": "LOOK_Y_AXIS"
            }
          },
          {
            "_": "Z-Axis",
            "$": {
              "value": "2",
              "name": "LOOK_Z_AXIS"
            }
          }
        ]
      },
      {
        "_": "\n        Flags for NiSwitchNode.\n        \n        \n    ",
        "$": {
          "name": "NiSwitchFlags",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Update Only Active Child",
            "$": {
              "value": "0",
              "name": "UpdateOnlyActiveChild"
            }
          },
          {
            "_": "Update Controllers",
            "$": {
              "value": "1",
              "name": "UpdateControllers"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxMaterialFlag",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_MF_ANISOTROPIC",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_MF_DUMMY1",
              "value": "2"
            }
          },
          {
            "$": {
              "name": "NX_MF_DUMMY2",
              "value": "3"
            }
          },
          {
            "$": {
              "name": "NX_MF_DUMMY3",
              "value": "4"
            }
          },
          {
            "$": {
              "name": "NX_MF_DISABLE_FRICTION",
              "value": "5"
            }
          },
          {
            "$": {
              "name": "NX_MF_DISABLE_STRONG_FRICTION",
              "value": "6"
            }
          }
        ]
      },
      {
        "_": "\n        Shader Property Flags\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderFlags",
          "storage": "uint",
          "prefix": "F3SF1"
        },
        "option": [
          {
            "_": "Enables Specularity",
            "$": {
              "value": "0",
              "name": "Specular"
            }
          },
          {
            "_": "Required For Skinned Meshes",
            "$": {
              "value": "1",
              "name": "Skinned"
            }
          },
          {
            "_": "Lowddetail (seems to use standard diff/norm/spec shader)",
            "$": {
              "value": "2",
              "name": "LowDetail"
            }
          },
          {
            "_": "Vertex Alpha",
            "$": {
              "value": "3",
              "name": "Vertex_Alpha"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "4",
              "name": "Unknown_1"
            }
          },
          {
            "_": "Single Pass",
            "$": {
              "value": "5",
              "name": "Single_Pass"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "6",
              "name": "Empty"
            }
          },
          {
            "_": "Environment mapping (uses Envmap Scale)",
            "$": {
              "value": "7",
              "name": "Environment_Mapping"
            }
          },
          {
            "_": "Alpha Texture Requires NiAlphaProperty to Enable",
            "$": {
              "value": "8",
              "name": "Alpha_Texture"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "9",
              "name": "Unknown_2"
            }
          },
          {
            "_": "FaceGen",
            "$": {
              "value": "10",
              "name": "FaceGen"
            }
          },
          {
            "_": "Parallax",
            "$": {
              "value": "11",
              "name": "Parallax_Shader_Index_15"
            }
          },
          {
            "_": "Unknown/Crash",
            "$": {
              "value": "12",
              "name": "Unknown_3"
            }
          },
          {
            "_": "Non-Projective Shadows",
            "$": {
              "value": "13",
              "name": "Non_Projective_Shadows"
            }
          },
          {
            "_": "Unknown/Crash",
            "$": {
              "value": "14",
              "name": "Unknown_4"
            }
          },
          {
            "_": "Refraction (switches on refraction power)",
            "$": {
              "value": "15",
              "name": "Refraction"
            }
          },
          {
            "_": "Fire Refraction (switches on refraction power/period)",
            "$": {
              "value": "16",
              "name": "Fire_Refraction"
            }
          },
          {
            "_": "Eye Environment Mapping (does not use envmap light fade or envmap scale)",
            "$": {
              "value": "17",
              "name": "Eye_Environment_Mapping"
            }
          },
          {
            "_": "Hair",
            "$": {
              "value": "18",
              "name": "Hair"
            }
          },
          {
            "_": "Dynamic Alpha",
            "$": {
              "value": "19",
              "name": "Dynamic_Alpha"
            }
          },
          {
            "_": "Localmap Hide Secret",
            "$": {
              "value": "20",
              "name": "Localmap_Hide_Secret"
            }
          },
          {
            "_": "Window Environment Mapping",
            "$": {
              "value": "21",
              "name": "Window_Environment_Mapping"
            }
          },
          {
            "_": "Tree Billboard",
            "$": {
              "value": "22",
              "name": "Tree_Billboard"
            }
          },
          {
            "_": "Shadow Frustum",
            "$": {
              "value": "23",
              "name": "Shadow_Frustum"
            }
          },
          {
            "_": "Multiple Textures (base diff/norm become null)",
            "$": {
              "value": "24",
              "name": "Multiple_Textures"
            }
          },
          {
            "_": "usually seen w/texture animation",
            "$": {
              "value": "25",
              "name": "Remappable_Textures"
            }
          },
          {
            "_": "Decal",
            "$": {
              "value": "26",
              "name": "Decal_Single_Pass"
            }
          },
          {
            "_": "Dynamic Decal",
            "$": {
              "value": "27",
              "name": "Dynamic_Decal_Single_Pass"
            }
          },
          {
            "_": "Parallax Occlusion",
            "$": {
              "value": "28",
              "name": "Parallax_Occulsion"
            }
          },
          {
            "_": "External Emittance",
            "$": {
              "value": "29",
              "name": "External_Emittance"
            }
          },
          {
            "_": "Shadow Map",
            "$": {
              "value": "30",
              "name": "Shadow_Map"
            }
          },
          {
            "_": "ZBuffer Test (1=on)",
            "$": {
              "value": "31",
              "name": "ZBuffer_Test"
            }
          }
        ]
      },
      {
        "_": "\n        Shader Property Flags 2\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderFlags2",
          "storage": "uint",
          "prefix": "F3SF2"
        },
        "option": [
          {
            "_": "ZBuffer Write",
            "$": {
              "value": "0",
              "name": "ZBuffer_Write"
            }
          },
          {
            "_": "LOD Landscape",
            "$": {
              "value": "1",
              "name": "LOD_Landscape"
            }
          },
          {
            "_": "LOD Building",
            "$": {
              "value": "2",
              "name": "LOD_Building"
            }
          },
          {
            "_": "No Fade",
            "$": {
              "value": "3",
              "name": "No_Fade"
            }
          },
          {
            "_": "Refraction Tint",
            "$": {
              "value": "4",
              "name": "Refraction_Tint"
            }
          },
          {
            "_": "Has Vertex Colors",
            "$": {
              "value": "5",
              "name": "Vertex_Colors"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "6",
              "name": "Unknown1"
            }
          },
          {
            "_": "1st Light is Point Light",
            "$": {
              "value": "7",
              "name": "1st_Light_is_Point_Light"
            }
          },
          {
            "_": "2nd Light",
            "$": {
              "value": "8",
              "name": "2nd_Light"
            }
          },
          {
            "_": "3rd Light",
            "$": {
              "value": "9",
              "name": "3rd_Light"
            }
          },
          {
            "_": "Vertex Lighting",
            "$": {
              "value": "10",
              "name": "Vertex_Lighting"
            }
          },
          {
            "_": "Uniform Scale",
            "$": {
              "value": "11",
              "name": "Uniform_Scale"
            }
          },
          {
            "_": "Fit Slope",
            "$": {
              "value": "12",
              "name": "Fit_Slope"
            }
          },
          {
            "_": "Billboard and Envmap Light Fade",
            "$": {
              "value": "13",
              "name": "Billboard_and_Envmap_Light_Fade"
            }
          },
          {
            "_": "No LOD Land Blend",
            "$": {
              "value": "14",
              "name": "No_LOD_Land_Blend"
            }
          },
          {
            "_": "Envmap Light Fade",
            "$": {
              "value": "15",
              "name": "Envmap_Light_Fade"
            }
          },
          {
            "_": "Wireframe",
            "$": {
              "value": "16",
              "name": "Wireframe"
            }
          },
          {
            "_": "VATS Selection",
            "$": {
              "value": "17",
              "name": "VATS_Selection"
            }
          },
          {
            "_": "Show in Local Map",
            "$": {
              "value": "18",
              "name": "Show_in_Local_Map"
            }
          },
          {
            "_": "Premult Alpha",
            "$": {
              "value": "19",
              "name": "Premult_Alpha"
            }
          },
          {
            "_": "Skip Normal Maps",
            "$": {
              "value": "20",
              "name": "Skip_Normal_Maps"
            }
          },
          {
            "_": "Alpha Decal",
            "$": {
              "value": "21",
              "name": "Alpha_Decal"
            }
          },
          {
            "_": "No Transparency MultiSampling",
            "$": {
              "value": "22",
              "name": "No_Transparecny_Multisampling"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "23",
              "name": "Unknown2"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "24",
              "name": "Unknown3"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "25",
              "name": "Unknown4"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "26",
              "name": "Unknown5"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "27",
              "name": "Unknown6"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "28",
              "name": "Unknown7"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "29",
              "name": "Unknown8"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "30",
              "name": "Unknown9"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "31",
              "name": "Unknown10"
            }
          }
        ]
      },
      {
        "_": "\n        Skyrim Shader Property Flags 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyrimShaderPropertyFlags1",
          "storage": "uint",
          "prefix": "SLSF1"
        },
        "option": [
          {
            "_": "Enables Specularity",
            "$": {
              "value": "0",
              "name": "Specular"
            }
          },
          {
            "_": "Required For Skinned Meshes.",
            "$": {
              "value": "1",
              "name": "Skinned"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "Temp_Refraction"
            }
          },
          {
            "_": "Enables using alpha component of vertex colors.",
            "$": {
              "value": "3",
              "name": "Vertex_Alpha"
            }
          },
          {
            "_": "in EffectShaderProperty",
            "$": {
              "value": "4",
              "name": "Greyscale_To_PaletteColor"
            }
          },
          {
            "_": "in EffectShaderProperty",
            "$": {
              "value": "5",
              "name": "Greyscale_To_PaletteAlpha"
            }
          },
          {
            "_": "Use Falloff value in EffectShaderProperty",
            "$": {
              "value": "6",
              "name": "Use_Falloff"
            }
          },
          {
            "_": "Environment mapping (uses Envmap Scale).",
            "$": {
              "value": "7",
              "name": "Environment_Mapping"
            }
          },
          {
            "_": "Object can recieve shadows.",
            "$": {
              "value": "8",
              "name": "Recieve_Shadows"
            }
          },
          {
            "_": "Can cast shadows",
            "$": {
              "value": "9",
              "name": "Cast_Shadows"
            }
          },
          {
            "_": "Use a face detail map in the 4th texture slot.",
            "$": {
              "value": "10",
              "name": "Facegen_Detail_Map"
            }
          },
          {
            "_": "Unused?",
            "$": {
              "value": "11",
              "name": "Parallax"
            }
          },
          {
            "_": "Use Model space normals and an external Specular Map.",
            "$": {
              "value": "12",
              "name": "Model_Space_Normals"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Non_Projective_Shadows"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "Landscape"
            }
          },
          {
            "_": "Use normal map for refraction effect.",
            "$": {
              "value": "15",
              "name": "Refraction"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "Fire_Refraction"
            }
          },
          {
            "_": "Eye Environment Mapping (Must use the Eye shader and the model must be skinned)",
            "$": {
              "value": "17",
              "name": "Eye_Environment_Mapping"
            }
          },
          {
            "_": "Keeps from going too bright under lights (hair shader only)",
            "$": {
              "value": "18",
              "name": "Hair_Soft_Lighting"
            }
          },
          {
            "$": {
              "value": "19",
              "name": "Screendoor_Alpha_Fade"
            }
          },
          {
            "_": "Object and anything it is positioned above will not render on local map view.",
            "$": {
              "value": "20",
              "name": "Localmap_Hide_Secret"
            }
          },
          {
            "_": "Use tintmask for Face.",
            "$": {
              "value": "21",
              "name": "FaceGen_RGB_Tint"
            }
          },
          {
            "_": "Provides its own emittance color. (will not absorb light/ambient color?)",
            "$": {
              "value": "22",
              "name": "Own_Emit"
            }
          },
          {
            "_": "Used for decalling?",
            "$": {
              "value": "23",
              "name": "Projected_UV"
            }
          },
          {
            "$": {
              "value": "24",
              "name": "Multiple_Textures"
            }
          },
          {
            "$": {
              "value": "25",
              "name": "Remappable_Textures"
            }
          },
          {
            "$": {
              "value": "26",
              "name": "Decal"
            }
          },
          {
            "$": {
              "value": "27",
              "name": "Dynamic_Decal"
            }
          },
          {
            "$": {
              "value": "28",
              "name": "Parallax_Occlusion"
            }
          },
          {
            "$": {
              "value": "29",
              "name": "External_Emittance"
            }
          },
          {
            "$": {
              "value": "30",
              "name": "Soft_Effect"
            }
          },
          {
            "_": "ZBuffer Test (1=on)",
            "$": {
              "value": "31",
              "name": "ZBuffer_Test"
            }
          }
        ]
      },
      {
        "_": "\n        Skyrim Shader Property Flags 2\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyrimShaderPropertyFlags2",
          "storage": "uint",
          "prefix": "SLSF2"
        },
        "option": [
          {
            "_": "Enables writing to the Z-Buffer",
            "$": {
              "value": "0",
              "name": "ZBuffer_Write"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "LOD_Landscape"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "LOD_Objects"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "No_Fade"
            }
          },
          {
            "_": "Double-sided rendering.",
            "$": {
              "value": "4",
              "name": "Double_Sided"
            }
          },
          {
            "_": "Has Vertex Colors.",
            "$": {
              "value": "5",
              "name": "Vertex_Colors"
            }
          },
          {
            "_": "Use Glow Map in the third texture slot.",
            "$": {
              "value": "6",
              "name": "Glow_Map"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Assume_Shadowmask"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Packed_Tangent"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Multi_Index_Snow"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Vertex_Lighting"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "Uniform_Scale"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Fit_Slope"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Billboard"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "No_LOD_Land_Blend"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "EnvMap_Light_Fade"
            }
          },
          {
            "_": "Wireframe (Seems to only work on particles)",
            "$": {
              "value": "16",
              "name": "Wireframe"
            }
          },
          {
            "_": "Used for blood decals on weapons.",
            "$": {
              "value": "17",
              "name": "Weapon_Blood"
            }
          },
          {
            "_": "Similar to hide secret, but only for self?",
            "$": {
              "value": "18",
              "name": "Hide_On_Local_Map"
            }
          },
          {
            "_": "Has Premultiplied Alpha",
            "$": {
              "value": "19",
              "name": "Premult_Alpha"
            }
          },
          {
            "$": {
              "value": "20",
              "name": "Cloud_LOD"
            }
          },
          {
            "_": "Hair only?",
            "$": {
              "value": "21",
              "name": "Anisotropic_Lighting"
            }
          },
          {
            "$": {
              "value": "22",
              "name": "No_Transparency_Multisampling"
            }
          },
          {
            "_": "Unused?",
            "$": {
              "value": "23",
              "name": "Unused01"
            }
          },
          {
            "_": "Use Multilayer (inner-layer) Map",
            "$": {
              "value": "24",
              "name": "Multi_Layer_Parallax"
            }
          },
          {
            "_": "Use Soft Lighting Map",
            "$": {
              "value": "25",
              "name": "Soft_Lighting"
            }
          },
          {
            "_": "Use Rim Lighting Map",
            "$": {
              "value": "26",
              "name": "Rim_Lighting"
            }
          },
          {
            "_": "Use Back Lighting Map",
            "$": {
              "value": "27",
              "name": "Back_Lighting"
            }
          },
          {
            "_": "Unused?",
            "$": {
              "value": "28",
              "name": "Unused02"
            }
          },
          {
            "_": "Enables Vertex Animation, Flutter Animation",
            "$": {
              "value": "29",
              "name": "Tree_Anim"
            }
          },
          {
            "$": {
              "value": "30",
              "name": "Effect_Lighting"
            }
          },
          {
            "$": {
              "value": "31",
              "name": "HD_LOD_Objects"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Shader Property Flags 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Fallout4ShaderPropertyFlags1",
          "storage": "uint",
          "prefix": "F4SF1"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "Specular"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "Skinned"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "Temp_Refraction"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "Vertex_Alpha"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "GreyscaleToPalette_Color"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "GreyscaleToPalette_Alpha"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "Use_Falloff"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Environment_Mapping"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "RGB_Falloff"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Cast_Shadows"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Face"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "UI_Mask_Rects"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Model_Space_Normals"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Non_Projective_Shadows"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "Landscape"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "Refraction"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "Fire_Refraction"
            }
          },
          {
            "$": {
              "value": "17",
              "name": "Eye_Environment_Mapping"
            }
          },
          {
            "$": {
              "value": "18",
              "name": "Hair"
            }
          },
          {
            "$": {
              "value": "19",
              "name": "Screendoor_Alpha_Fade"
            }
          },
          {
            "$": {
              "value": "20",
              "name": "Localmap_Hide_Secret"
            }
          },
          {
            "$": {
              "value": "21",
              "name": "Skin_Tint"
            }
          },
          {
            "$": {
              "value": "22",
              "name": "Own_Emit"
            }
          },
          {
            "$": {
              "value": "23",
              "name": "Projected_UV"
            }
          },
          {
            "$": {
              "value": "24",
              "name": "Multiple_Textures"
            }
          },
          {
            "$": {
              "value": "25",
              "name": "Tessellate"
            }
          },
          {
            "$": {
              "value": "26",
              "name": "Decal"
            }
          },
          {
            "$": {
              "value": "27",
              "name": "Dynamic_Decal"
            }
          },
          {
            "$": {
              "value": "28",
              "name": "Character_Lighting"
            }
          },
          {
            "$": {
              "value": "29",
              "name": "External_Emittance"
            }
          },
          {
            "$": {
              "value": "30",
              "name": "Soft_Effect"
            }
          },
          {
            "$": {
              "value": "31",
              "name": "ZBuffer_Test"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Shader Property Flags 2\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Fallout4ShaderPropertyFlags2",
          "storage": "uint",
          "prefix": "F4SF2"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "ZBuffer_Write"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "LOD_Landscape"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "LOD_Objects"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "No_Fade"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "Double_Sided"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "Vertex_Colors"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "Glow_Map"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "Transform_Changed"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Dismemberment_Meatcuff"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "Tint"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Grass_Vertex_Lighting"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "Grass_Uniform_Scale"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Grass_Fit_Slope"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "Grass_Billboard"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "No_LOD_Land_Blend"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "Dismemberment"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "Wireframe"
            }
          },
          {
            "$": {
              "value": "17",
              "name": "Weapon_Blood"
            }
          },
          {
            "$": {
              "value": "18",
              "name": "Hide_On_Local_Map"
            }
          },
          {
            "$": {
              "value": "19",
              "name": "Premult_Alpha"
            }
          },
          {
            "$": {
              "value": "20",
              "name": "VATS_Target"
            }
          },
          {
            "$": {
              "value": "21",
              "name": "Anisotropic_Lighting"
            }
          },
          {
            "$": {
              "value": "22",
              "name": "Skew_Specular_Alpha"
            }
          },
          {
            "$": {
              "value": "23",
              "name": "Menu_Screen"
            }
          },
          {
            "$": {
              "value": "24",
              "name": "Multi_Layer_Parallax"
            }
          },
          {
            "$": {
              "value": "25",
              "name": "Alpha_Test"
            }
          },
          {
            "$": {
              "value": "26",
              "name": "Gradient_Remap"
            }
          },
          {
            "$": {
              "value": "27",
              "name": "VATS_Target_Draw_All"
            }
          },
          {
            "$": {
              "value": "28",
              "name": "Pipboy_Screen"
            }
          },
          {
            "$": {
              "value": "29",
              "name": "Tree_Anim"
            }
          },
          {
            "$": {
              "value": "30",
              "name": "Effect_Lighting"
            }
          },
          {
            "$": {
              "value": "31",
              "name": "Refraction_Writes_Depth"
            }
          }
        ]
      },
      {
        "_": "\n        Skyrim water shader property flags\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyrimWaterShaderFlags",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Unknown",
            "$": {
              "value": "0",
              "name": "SWSF1_UNKNOWN0"
            }
          },
          {
            "_": "Bypasses refraction map when set to 1",
            "$": {
              "value": "1",
              "name": "SWSF1_Bypass_Refraction_Map"
            }
          },
          {
            "_": "Main water Layer on/off",
            "$": {
              "value": "2",
              "name": "SWSF1_Water_Toggle"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "3",
              "name": "SWSF1_UNKNOWN3"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "4",
              "name": "SWSF1_UNKNOWN4"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "value": "5",
              "name": "SWSF1_UNKNOWN5"
            }
          },
          {
            "_": "Reflection layer 2 on/off. (is this scene reflection?)",
            "$": {
              "value": "6",
              "name": "SWSF1_Highlight_Layer_Toggle"
            }
          },
          {
            "_": "Water layer on/off",
            "$": {
              "value": "7",
              "name": "SWSF1_Enabled"
            }
          }
        ]
      },
      {
        "_": "\n        Flags for BSValueNode.\n        \n        \n    ",
        "$": {
          "name": "BSValueNodeFlags",
          "storage": "byte"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "BillboardWorldZ"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "UsePlayerAdjust"
            }
          }
        ]
      },
      {
        "_": "\n        Determines how the data stream is accessed?\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "DataStreamAccess",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "CPU Read"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "CPU Write Static"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "CPU Write Mutable"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "CPU Write Volatile"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "GPU Read"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "GPU Write"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "CPU Write Static Inititialized"
            }
          }
        ]
      }
    ],
    "enum": [
      {
        "_": "\n        Describes how the vertex colors are blended with the filtered texture color.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "ApplyMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Replaces existing color",
            "$": {
              "value": "0",
              "name": "APPLY_REPLACE"
            }
          },
          {
            "_": "For placing images on the object like stickers.",
            "$": {
              "value": "1",
              "name": "APPLY_DECAL"
            }
          },
          {
            "_": "Modulates existing color. (Default)",
            "$": {
              "value": "2",
              "name": "APPLY_MODULATE"
            }
          },
          {
            "_": "PS2 Only.  Function Unknown.",
            "$": {
              "value": "3",
              "name": "APPLY_HILIGHT"
            }
          },
          {
            "_": "Parallax Flag in some Oblivion meshes.",
            "$": {
              "value": "4",
              "name": "APPLY_HILIGHT2"
            }
          }
        ]
      },
      {
        "_": "\n        The type of texture.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "TexType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "The basic texture used by most meshes.",
            "$": {
              "value": "0",
              "name": "BASE_MAP"
            }
          },
          {
            "_": "Used to darken the model with false lighting.",
            "$": {
              "value": "1",
              "name": "DARK_MAP"
            }
          },
          {
            "_": "Combined with base map for added detail.  Usually tiled over the mesh many times for close-up view.",
            "$": {
              "value": "2",
              "name": "DETAIL_MAP"
            }
          },
          {
            "_": "Allows the specularity (glossyness) of an object to differ across its surface.",
            "$": {
              "value": "3",
              "name": "GLOSS_MAP"
            }
          },
          {
            "_": "Creates a glowing effect.  Basically an incandescence map.",
            "$": {
              "value": "4",
              "name": "GLOW_MAP"
            }
          },
          {
            "_": "Used to make the object appear to have more detail than it really does.",
            "$": {
              "value": "5",
              "name": "BUMP_MAP"
            }
          },
          {
            "_": "Used to make the object appear to have more detail than it really does.",
            "$": {
              "value": "6",
              "name": "NORMAL_MAP"
            }
          },
          {
            "_": "Parallax map.",
            "$": {
              "value": "7",
              "name": "PARALLAX_MAP"
            }
          },
          {
            "_": "For placing images on the object like stickers.",
            "$": {
              "value": "8",
              "name": "DECAL_0_MAP"
            }
          },
          {
            "_": "For placing images on the object like stickers.",
            "$": {
              "value": "9",
              "name": "DECAL_1_MAP"
            }
          },
          {
            "_": "For placing images on the object like stickers.",
            "$": {
              "value": "10",
              "name": "DECAL_2_MAP"
            }
          },
          {
            "_": "For placing images on the object like stickers.",
            "$": {
              "value": "11",
              "name": "DECAL_3_MAP"
            }
          }
        ]
      },
      {
        "_": "\n        The type of animation interpolation (blending) that will be used on the associated key frames.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "KeyType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Use linear interpolation.",
            "$": {
              "value": "1",
              "name": "LINEAR_KEY"
            }
          },
          {
            "_": "Use quadratic interpolation.  Forward and back tangents will be stored.",
            "$": {
              "value": "2",
              "name": "QUADRATIC_KEY"
            }
          },
          {
            "_": "Use Tension Bias Continuity interpolation.  Tension, bias, and continuity will be stored.",
            "$": {
              "value": "3",
              "name": "TBC_KEY"
            }
          },
          {
            "_": "For use only with rotation data.  Separate X, Y, and Z keys will be stored instead of using quaternions.",
            "$": {
              "value": "4",
              "name": "XYZ_ROTATION_KEY"
            }
          },
          {
            "_": "Step function. Used for visibility keys in NiBoolData.",
            "$": {
              "value": "5",
              "name": "CONST_KEY"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Material descriptor for a Havok shape in Oblivion.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "OblivionHavokMaterial",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Stone",
            "$": {
              "value": "0",
              "name": "OB_HAV_MAT_STONE"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "1",
              "name": "OB_HAV_MAT_CLOTH"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "2",
              "name": "OB_HAV_MAT_DIRT"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "3",
              "name": "OB_HAV_MAT_GLASS"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "4",
              "name": "OB_HAV_MAT_GRASS"
            }
          },
          {
            "_": "Metal",
            "$": {
              "value": "5",
              "name": "OB_HAV_MAT_METAL"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "6",
              "name": "OB_HAV_MAT_ORGANIC"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "7",
              "name": "OB_HAV_MAT_SKIN"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "8",
              "name": "OB_HAV_MAT_WATER"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "9",
              "name": "OB_HAV_MAT_WOOD"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "10",
              "name": "OB_HAV_MAT_HEAVY_STONE"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "11",
              "name": "OB_HAV_MAT_HEAVY_METAL"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "12",
              "name": "OB_HAV_MAT_HEAVY_WOOD"
            }
          },
          {
            "_": "Chain",
            "$": {
              "value": "13",
              "name": "OB_HAV_MAT_CHAIN"
            }
          },
          {
            "_": "Snow",
            "$": {
              "value": "14",
              "name": "OB_HAV_MAT_SNOW"
            }
          },
          {
            "_": "Stone Stairs",
            "$": {
              "value": "15",
              "name": "OB_HAV_MAT_STONE_STAIRS"
            }
          },
          {
            "_": "Cloth Stairs",
            "$": {
              "value": "16",
              "name": "OB_HAV_MAT_CLOTH_STAIRS"
            }
          },
          {
            "_": "Dirt Stairs",
            "$": {
              "value": "17",
              "name": "OB_HAV_MAT_DIRT_STAIRS"
            }
          },
          {
            "_": "Glass Stairs",
            "$": {
              "value": "18",
              "name": "OB_HAV_MAT_GLASS_STAIRS"
            }
          },
          {
            "_": "Grass Stairs",
            "$": {
              "value": "19",
              "name": "OB_HAV_MAT_GRASS_STAIRS"
            }
          },
          {
            "_": "Metal Stairs",
            "$": {
              "value": "20",
              "name": "OB_HAV_MAT_METAL_STAIRS"
            }
          },
          {
            "_": "Organic Stairs",
            "$": {
              "value": "21",
              "name": "OB_HAV_MAT_ORGANIC_STAIRS"
            }
          },
          {
            "_": "Skin Stairs",
            "$": {
              "value": "22",
              "name": "OB_HAV_MAT_SKIN_STAIRS"
            }
          },
          {
            "_": "Water Stairs",
            "$": {
              "value": "23",
              "name": "OB_HAV_MAT_WATER_STAIRS"
            }
          },
          {
            "_": "Wood Stairs",
            "$": {
              "value": "24",
              "name": "OB_HAV_MAT_WOOD_STAIRS"
            }
          },
          {
            "_": "Heavy Stone Stairs",
            "$": {
              "value": "25",
              "name": "OB_HAV_MAT_HEAVY_STONE_STAIRS"
            }
          },
          {
            "_": "Heavy Metal Stairs",
            "$": {
              "value": "26",
              "name": "OB_HAV_MAT_HEAVY_METAL_STAIRS"
            }
          },
          {
            "_": "Heavy Wood Stairs",
            "$": {
              "value": "27",
              "name": "OB_HAV_MAT_HEAVY_WOOD_STAIRS"
            }
          },
          {
            "_": "Chain Stairs",
            "$": {
              "value": "28",
              "name": "OB_HAV_MAT_CHAIN_STAIRS"
            }
          },
          {
            "_": "Snow Stairs",
            "$": {
              "value": "29",
              "name": "OB_HAV_MAT_SNOW_STAIRS"
            }
          },
          {
            "_": "Elevator",
            "$": {
              "value": "30",
              "name": "OB_HAV_MAT_ELEVATOR"
            }
          },
          {
            "_": "Rubber",
            "$": {
              "value": "31",
              "name": "OB_HAV_MAT_RUBBER"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Material descriptor for a Havok shape in Fallout 3 and Fallout NV.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Fallout3HavokMaterial",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Stone",
            "$": {
              "value": "0",
              "name": "FO_HAV_MAT_STONE"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "1",
              "name": "FO_HAV_MAT_CLOTH"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "2",
              "name": "FO_HAV_MAT_DIRT"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "3",
              "name": "FO_HAV_MAT_GLASS"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "4",
              "name": "FO_HAV_MAT_GRASS"
            }
          },
          {
            "_": "Metal",
            "$": {
              "value": "5",
              "name": "FO_HAV_MAT_METAL"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "6",
              "name": "FO_HAV_MAT_ORGANIC"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "7",
              "name": "FO_HAV_MAT_SKIN"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "8",
              "name": "FO_HAV_MAT_WATER"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "9",
              "name": "FO_HAV_MAT_WOOD"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "10",
              "name": "FO_HAV_MAT_HEAVY_STONE"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "11",
              "name": "FO_HAV_MAT_HEAVY_METAL"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "12",
              "name": "FO_HAV_MAT_HEAVY_WOOD"
            }
          },
          {
            "_": "Chain",
            "$": {
              "value": "13",
              "name": "FO_HAV_MAT_CHAIN"
            }
          },
          {
            "_": "Bottlecap",
            "$": {
              "value": "14",
              "name": "FO_HAV_MAT_BOTTLECAP"
            }
          },
          {
            "_": "Elevator",
            "$": {
              "value": "15",
              "name": "FO_HAV_MAT_ELEVATOR"
            }
          },
          {
            "_": "Hollow Metal",
            "$": {
              "value": "16",
              "name": "FO_HAV_MAT_HOLLOW_METAL"
            }
          },
          {
            "_": "Sheet Metal",
            "$": {
              "value": "17",
              "name": "FO_HAV_MAT_SHEET_METAL"
            }
          },
          {
            "_": "Sand",
            "$": {
              "value": "18",
              "name": "FO_HAV_MAT_SAND"
            }
          },
          {
            "_": "Broken Concrete",
            "$": {
              "value": "19",
              "name": "FO_HAV_MAT_BROKEN_CONCRETE"
            }
          },
          {
            "_": "Vehicle Body",
            "$": {
              "value": "20",
              "name": "FO_HAV_MAT_VEHICLE_BODY"
            }
          },
          {
            "_": "Vehicle Part Solid",
            "$": {
              "value": "21",
              "name": "FO_HAV_MAT_VEHICLE_PART_SOLID"
            }
          },
          {
            "_": "Vehicle Part Hollow",
            "$": {
              "value": "22",
              "name": "FO_HAV_MAT_VEHICLE_PART_HOLLOW"
            }
          },
          {
            "_": "Barrel",
            "$": {
              "value": "23",
              "name": "FO_HAV_MAT_BARREL"
            }
          },
          {
            "_": "Bottle",
            "$": {
              "value": "24",
              "name": "FO_HAV_MAT_BOTTLE"
            }
          },
          {
            "_": "Soda Can",
            "$": {
              "value": "25",
              "name": "FO_HAV_MAT_SODA_CAN"
            }
          },
          {
            "_": "Pistol",
            "$": {
              "value": "26",
              "name": "FO_HAV_MAT_PISTOL"
            }
          },
          {
            "_": "Rifle",
            "$": {
              "value": "27",
              "name": "FO_HAV_MAT_RIFLE"
            }
          },
          {
            "_": "Shopping Cart",
            "$": {
              "value": "28",
              "name": "FO_HAV_MAT_SHOPPING_CART"
            }
          },
          {
            "_": "Lunchbox",
            "$": {
              "value": "29",
              "name": "FO_HAV_MAT_LUNCHBOX"
            }
          },
          {
            "_": "Baby Rattle",
            "$": {
              "value": "30",
              "name": "FO_HAV_MAT_BABY_RATTLE"
            }
          },
          {
            "_": "Rubber Ball",
            "$": {
              "value": "31",
              "name": "FO_HAV_MAT_RUBBER_BALL"
            }
          },
          {
            "_": "Stone",
            "$": {
              "value": "32",
              "name": "FO_HAV_MAT_STONE_PLATFORM"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "33",
              "name": "FO_HAV_MAT_CLOTH_PLATFORM"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "34",
              "name": "FO_HAV_MAT_DIRT_PLATFORM"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "35",
              "name": "FO_HAV_MAT_GLASS_PLATFORM"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "36",
              "name": "FO_HAV_MAT_GRASS_PLATFORM"
            }
          },
          {
            "_": "Metal",
            "$": {
              "value": "37",
              "name": "FO_HAV_MAT_METAL_PLATFORM"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "38",
              "name": "FO_HAV_MAT_ORGANIC_PLATFORM"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "39",
              "name": "FO_HAV_MAT_SKIN_PLATFORM"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "40",
              "name": "FO_HAV_MAT_WATER_PLATFORM"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "41",
              "name": "FO_HAV_MAT_WOOD_PLATFORM"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "42",
              "name": "FO_HAV_MAT_HEAVY_STONE_PLATFORM"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "43",
              "name": "FO_HAV_MAT_HEAVY_METAL_PLATFORM"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "44",
              "name": "FO_HAV_MAT_HEAVY_WOOD_PLATFORM"
            }
          },
          {
            "_": "Chain",
            "$": {
              "value": "45",
              "name": "FO_HAV_MAT_CHAIN_PLATFORM"
            }
          },
          {
            "_": "Bottlecap",
            "$": {
              "value": "46",
              "name": "FO_HAV_MAT_BOTTLECAP_PLATFORM"
            }
          },
          {
            "_": "Elevator",
            "$": {
              "value": "47",
              "name": "FO_HAV_MAT_ELEVATOR_PLATFORM"
            }
          },
          {
            "_": "Hollow Metal",
            "$": {
              "value": "48",
              "name": "FO_HAV_MAT_HOLLOW_METAL_PLATFORM"
            }
          },
          {
            "_": "Sheet Metal",
            "$": {
              "value": "49",
              "name": "FO_HAV_MAT_SHEET_METAL_PLATFORM"
            }
          },
          {
            "_": "Sand",
            "$": {
              "value": "50",
              "name": "FO_HAV_MAT_SAND_PLATFORM"
            }
          },
          {
            "_": "Broken Concrete",
            "$": {
              "value": "51",
              "name": "FO_HAV_MAT_BROKEN_CONCRETE_PLATFORM"
            }
          },
          {
            "_": "Vehicle Body",
            "$": {
              "value": "52",
              "name": "FO_HAV_MAT_VEHICLE_BODY_PLATFORM"
            }
          },
          {
            "_": "Vehicle Part Solid",
            "$": {
              "value": "53",
              "name": "FO_HAV_MAT_VEHICLE_PART_SOLID_PLATFORM"
            }
          },
          {
            "_": "Vehicle Part Hollow",
            "$": {
              "value": "54",
              "name": "FO_HAV_MAT_VEHICLE_PART_HOLLOW_PLATFORM"
            }
          },
          {
            "_": "Barrel",
            "$": {
              "value": "55",
              "name": "FO_HAV_MAT_BARREL_PLATFORM"
            }
          },
          {
            "_": "Bottle",
            "$": {
              "value": "56",
              "name": "FO_HAV_MAT_BOTTLE_PLATFORM"
            }
          },
          {
            "_": "Soda Can",
            "$": {
              "value": "57",
              "name": "FO_HAV_MAT_SODA_CAN_PLATFORM"
            }
          },
          {
            "_": "Pistol",
            "$": {
              "value": "58",
              "name": "FO_HAV_MAT_PISTOL_PLATFORM"
            }
          },
          {
            "_": "Rifle",
            "$": {
              "value": "59",
              "name": "FO_HAV_MAT_RIFLE_PLATFORM"
            }
          },
          {
            "_": "Shopping Cart",
            "$": {
              "value": "60",
              "name": "FO_HAV_MAT_SHOPPING_CART_PLATFORM"
            }
          },
          {
            "_": "Lunchbox",
            "$": {
              "value": "61",
              "name": "FO_HAV_MAT_LUNCHBOX_PLATFORM"
            }
          },
          {
            "_": "Baby Rattle",
            "$": {
              "value": "62",
              "name": "FO_HAV_MAT_BABY_RATTLE_PLATFORM"
            }
          },
          {
            "_": "Rubber Ball",
            "$": {
              "value": "63",
              "name": "FO_HAV_MAT_RUBBER_BALL_PLATFORM"
            }
          },
          {
            "_": "Stone",
            "$": {
              "value": "64",
              "name": "FO_HAV_MAT_STONE_STAIRS"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "65",
              "name": "FO_HAV_MAT_CLOTH_STAIRS"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "66",
              "name": "FO_HAV_MAT_DIRT_STAIRS"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "67",
              "name": "FO_HAV_MAT_GLASS_STAIRS"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "68",
              "name": "FO_HAV_MAT_GRASS_STAIRS"
            }
          },
          {
            "_": "Metal",
            "$": {
              "value": "69",
              "name": "FO_HAV_MAT_METAL_STAIRS"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "70",
              "name": "FO_HAV_MAT_ORGANIC_STAIRS"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "71",
              "name": "FO_HAV_MAT_SKIN_STAIRS"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "72",
              "name": "FO_HAV_MAT_WATER_STAIRS"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "73",
              "name": "FO_HAV_MAT_WOOD_STAIRS"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "74",
              "name": "FO_HAV_MAT_HEAVY_STONE_STAIRS"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "75",
              "name": "FO_HAV_MAT_HEAVY_METAL_STAIRS"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "76",
              "name": "FO_HAV_MAT_HEAVY_WOOD_STAIRS"
            }
          },
          {
            "_": "Chain",
            "$": {
              "value": "77",
              "name": "FO_HAV_MAT_CHAIN_STAIRS"
            }
          },
          {
            "_": "Bottlecap",
            "$": {
              "value": "78",
              "name": "FO_HAV_MAT_BOTTLECAP_STAIRS"
            }
          },
          {
            "_": "Elevator",
            "$": {
              "value": "79",
              "name": "FO_HAV_MAT_ELEVATOR_STAIRS"
            }
          },
          {
            "_": "Hollow Metal",
            "$": {
              "value": "80",
              "name": "FO_HAV_MAT_HOLLOW_METAL_STAIRS"
            }
          },
          {
            "_": "Sheet Metal",
            "$": {
              "value": "81",
              "name": "FO_HAV_MAT_SHEET_METAL_STAIRS"
            }
          },
          {
            "_": "Sand",
            "$": {
              "value": "82",
              "name": "FO_HAV_MAT_SAND_STAIRS"
            }
          },
          {
            "_": "Broken Concrete",
            "$": {
              "value": "83",
              "name": "FO_HAV_MAT_BROKEN_CONCRETE_STAIRS"
            }
          },
          {
            "_": "Vehicle Body",
            "$": {
              "value": "84",
              "name": "FO_HAV_MAT_VEHICLE_BODY_STAIRS"
            }
          },
          {
            "_": "Vehicle Part Solid",
            "$": {
              "value": "85",
              "name": "FO_HAV_MAT_VEHICLE_PART_SOLID_STAIRS"
            }
          },
          {
            "_": "Vehicle Part Hollow",
            "$": {
              "value": "86",
              "name": "FO_HAV_MAT_VEHICLE_PART_HOLLOW_STAIRS"
            }
          },
          {
            "_": "Barrel",
            "$": {
              "value": "87",
              "name": "FO_HAV_MAT_BARREL_STAIRS"
            }
          },
          {
            "_": "Bottle",
            "$": {
              "value": "88",
              "name": "FO_HAV_MAT_BOTTLE_STAIRS"
            }
          },
          {
            "_": "Soda Can",
            "$": {
              "value": "89",
              "name": "FO_HAV_MAT_SODA_CAN_STAIRS"
            }
          },
          {
            "_": "Pistol",
            "$": {
              "value": "90",
              "name": "FO_HAV_MAT_PISTOL_STAIRS"
            }
          },
          {
            "_": "Rifle",
            "$": {
              "value": "91",
              "name": "FO_HAV_MAT_RIFLE_STAIRS"
            }
          },
          {
            "_": "Shopping Cart",
            "$": {
              "value": "92",
              "name": "FO_HAV_MAT_SHOPPING_CART_STAIRS"
            }
          },
          {
            "_": "Lunchbox",
            "$": {
              "value": "93",
              "name": "FO_HAV_MAT_LUNCHBOX_STAIRS"
            }
          },
          {
            "_": "Baby Rattle",
            "$": {
              "value": "94",
              "name": "FO_HAV_MAT_BABY_RATTLE_STAIRS"
            }
          },
          {
            "_": "Rubber Ball",
            "$": {
              "value": "95",
              "name": "FO_HAV_MAT_RUBBER_BALL_STAIRS"
            }
          },
          {
            "_": "Stone",
            "$": {
              "value": "96",
              "name": "FO_HAV_MAT_STONE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "97",
              "name": "FO_HAV_MAT_CLOTH_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "98",
              "name": "FO_HAV_MAT_DIRT_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "99",
              "name": "FO_HAV_MAT_GLASS_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "100",
              "name": "FO_HAV_MAT_GRASS_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Metal",
            "$": {
              "value": "101",
              "name": "FO_HAV_MAT_METAL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "102",
              "name": "FO_HAV_MAT_ORGANIC_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "103",
              "name": "FO_HAV_MAT_SKIN_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "104",
              "name": "FO_HAV_MAT_WATER_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "105",
              "name": "FO_HAV_MAT_WOOD_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "106",
              "name": "FO_HAV_MAT_HEAVY_STONE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "107",
              "name": "FO_HAV_MAT_HEAVY_METAL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "108",
              "name": "FO_HAV_MAT_HEAVY_WOOD_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Chain",
            "$": {
              "value": "109",
              "name": "FO_HAV_MAT_CHAIN_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Bottlecap",
            "$": {
              "value": "110",
              "name": "FO_HAV_MAT_BOTTLECAP_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Elevator",
            "$": {
              "value": "111",
              "name": "FO_HAV_MAT_ELEVATOR_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Hollow Metal",
            "$": {
              "value": "112",
              "name": "FO_HAV_MAT_HOLLOW_METAL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Sheet Metal",
            "$": {
              "value": "113",
              "name": "FO_HAV_MAT_SHEET_METAL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Sand",
            "$": {
              "value": "114",
              "name": "FO_HAV_MAT_SAND_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Broken Concrete",
            "$": {
              "value": "115",
              "name": "FO_HAV_MAT_BROKEN_CONCRETE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Vehicle Body",
            "$": {
              "value": "116",
              "name": "FO_HAV_MAT_VEHICLE_BODY_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Vehicle Part Solid",
            "$": {
              "value": "117",
              "name": "FO_HAV_MAT_VEHICLE_PART_SOLID_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Vehicle Part Hollow",
            "$": {
              "value": "118",
              "name": "FO_HAV_MAT_VEHICLE_PART_HOLLOW_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Barrel",
            "$": {
              "value": "119",
              "name": "FO_HAV_MAT_BARREL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Bottle",
            "$": {
              "value": "120",
              "name": "FO_HAV_MAT_BOTTLE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Soda Can",
            "$": {
              "value": "121",
              "name": "FO_HAV_MAT_SODA_CAN_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Pistol",
            "$": {
              "value": "122",
              "name": "FO_HAV_MAT_PISTOL_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Rifle",
            "$": {
              "value": "123",
              "name": "FO_HAV_MAT_RIFLE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Shopping Cart",
            "$": {
              "value": "124",
              "name": "FO_HAV_MAT_SHOPPING_CART_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Lunchbox",
            "$": {
              "value": "125",
              "name": "FO_HAV_MAT_LUNCHBOX_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Baby Rattle",
            "$": {
              "value": "126",
              "name": "FO_HAV_MAT_BABY_RATTLE_STAIRS_PLATFORM"
            }
          },
          {
            "_": "Rubber Ball",
            "$": {
              "value": "127",
              "name": "FO_HAV_MAT_RUBBER_BALL_STAIRS_PLATFORM"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Material descriptor for a Havok shape in Skyrim.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyrimHavokMaterial",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Broken Stone",
            "$": {
              "value": "131151687",
              "name": "SKY_HAV_MAT_BROKEN_STONE"
            }
          },
          {
            "_": "Light Wood",
            "$": {
              "value": "365420259",
              "name": "SKY_HAV_MAT_LIGHT_WOOD"
            }
          },
          {
            "_": "Snow",
            "$": {
              "value": "398949039",
              "name": "SKY_HAV_MAT_SNOW"
            }
          },
          {
            "_": "Gravel",
            "$": {
              "value": "428587608",
              "name": "SKY_HAV_MAT_GRAVEL"
            }
          },
          {
            "_": "Material Chain Metal",
            "$": {
              "value": "438912228",
              "name": "SKY_HAV_MAT_MATERIAL_CHAIN_METAL"
            }
          },
          {
            "_": "Bottle",
            "$": {
              "value": "493553910",
              "name": "SKY_HAV_MAT_BOTTLE"
            }
          },
          {
            "_": "Wood",
            "$": {
              "value": "500811281",
              "name": "SKY_HAV_MAT_WOOD"
            }
          },
          {
            "_": "Skin",
            "$": {
              "value": "591247106",
              "name": "SKY_HAV_MAT_SKIN"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.9.32.0. Found in Dawnguard DLC in meshes\\dlc01\\clutter\\dlc01deerskin.nif.",
            "$": {
              "value": "617099282",
              "name": "SKY_HAV_MAT_UNKNOWN_617099282"
            }
          },
          {
            "_": "Barrel",
            "$": {
              "value": "732141076",
              "name": "SKY_HAV_MAT_BARREL"
            }
          },
          {
            "_": "Material Ceramic Medium",
            "$": {
              "value": "781661019",
              "name": "SKY_HAV_MAT_MATERIAL_CERAMIC_MEDIUM"
            }
          },
          {
            "_": "Material Basket",
            "$": {
              "value": "790784366",
              "name": "SKY_HAV_MAT_MATERIAL_BASKET"
            }
          },
          {
            "_": "Ice",
            "$": {
              "value": "873356572",
              "name": "SKY_HAV_MAT_ICE"
            }
          },
          {
            "_": "Stairs Stone",
            "$": {
              "value": "899511101",
              "name": "SKY_HAV_MAT_STAIRS_STONE"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "1024582599",
              "name": "SKY_HAV_MAT_WATER"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.6.89.0. Found in actors\\draugr\\character assets\\skeletons.nif.",
            "$": {
              "value": "1028101969",
              "name": "SKY_HAV_MAT_UNKNOWN_1028101969"
            }
          },
          {
            "_": "Material Blade 1 Hand",
            "$": {
              "value": "1060167844",
              "name": "SKY_HAV_MAT_MATERIAL_BLADE_1HAND"
            }
          },
          {
            "_": "Material Book",
            "$": {
              "value": "1264672850",
              "name": "SKY_HAV_MAT_MATERIAL_BOOK"
            }
          },
          {
            "_": "Material Carpet",
            "$": {
              "value": "1286705471",
              "name": "SKY_HAV_MAT_MATERIAL_CARPET"
            }
          },
          {
            "_": "Solid Metal",
            "$": {
              "value": "1288358971",
              "name": "SKY_HAV_MAT_SOLID_METAL"
            }
          },
          {
            "_": "Material Axe 1Hand",
            "$": {
              "value": "1305674443",
              "name": "SKY_HAV_MAT_MATERIAL_AXE_1HAND"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.6.89.0. Found in armor\\draugr\\draugrbootsfemale_go.nif or armor\\amuletsandrings\\amuletgnd.nif.",
            "$": {
              "value": "1440721808",
              "name": "SKY_HAV_MAT_UNKNOWN_1440721808"
            }
          },
          {
            "_": "Stairs Wood",
            "$": {
              "value": "1461712277",
              "name": "SKY_HAV_MAT_STAIRS_WOOD"
            }
          },
          {
            "_": "Mud",
            "$": {
              "value": "1486385281",
              "name": "SKY_HAV_MAT_MUD"
            }
          },
          {
            "_": "Material Boulder Small",
            "$": {
              "value": "1550912982",
              "name": "SKY_HAV_MAT_MATERIAL_BOULDER_SMALL"
            }
          },
          {
            "_": "Stairs Snow",
            "$": {
              "value": "1560365355",
              "name": "SKY_HAV_MAT_STAIRS_SNOW"
            }
          },
          {
            "_": "Heavy Stone",
            "$": {
              "value": "1570821952",
              "name": "SKY_HAV_MAT_HEAVY_STONE"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.6.89.0. Found in actors\\dragon\\character assets\\skeleton.nif.",
            "$": {
              "value": "1574477864",
              "name": "SKY_HAV_MAT_UNKNOWN_1574477864"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.6.89.0. Found in trap objects or clutter\\displaycases\\displaycaselgangled01.nif or actors\\deer\\character assets\\skeleton.nif.",
            "$": {
              "value": "1591009235",
              "name": "SKY_HAV_MAT_UNKNOWN_1591009235"
            }
          },
          {
            "_": "Material Bows Staves",
            "$": {
              "value": "1607128641",
              "name": "SKY_HAV_MAT_MATERIAL_BOWS_STAVES"
            }
          },
          {
            "_": "Material Wood As Stairs",
            "$": {
              "value": "1803571212",
              "name": "SKY_HAV_MAT_MATERIAL_WOOD_AS_STAIRS"
            }
          },
          {
            "_": "Grass",
            "$": {
              "value": "1848600814",
              "name": "SKY_HAV_MAT_GRASS"
            }
          },
          {
            "_": "Material Boulder Large",
            "$": {
              "value": "1885326971",
              "name": "SKY_HAV_MAT_MATERIAL_BOULDER_LARGE"
            }
          },
          {
            "_": "Material Stone As Stairs",
            "$": {
              "value": "1886078335",
              "name": "SKY_HAV_MAT_MATERIAL_STONE_AS_STAIRS"
            }
          },
          {
            "_": "Material Blade 2Hand",
            "$": {
              "value": "2022742644",
              "name": "SKY_HAV_MAT_MATERIAL_BLADE_2HAND"
            }
          },
          {
            "_": "Material Bottle Small",
            "$": {
              "value": "2025794648",
              "name": "SKY_HAV_MAT_MATERIAL_BOTTLE_SMALL"
            }
          },
          {
            "_": "Sand",
            "$": {
              "value": "2168343821",
              "name": "SKY_HAV_MAT_SAND"
            }
          },
          {
            "_": "Heavy Metal",
            "$": {
              "value": "2229413539",
              "name": "SKY_HAV_MAT_HEAVY_METAL"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.9.32.0. Found in Dawnguard DLC in meshes\\dlc01\\clutter\\dlc01sabrecatpelt.nif.",
            "$": {
              "value": "2290050264",
              "name": "SKY_HAV_MAT_UNKNOWN_2290050264"
            }
          },
          {
            "_": "Dragon",
            "$": {
              "value": "2518321175",
              "name": "SKY_HAV_MAT_DRAGON"
            }
          },
          {
            "_": "Material Blade 1Hand Small",
            "$": {
              "value": "2617944780",
              "name": "SKY_HAV_MAT_MATERIAL_BLADE_1HAND_SMALL"
            }
          },
          {
            "_": "Material Skin Small",
            "$": {
              "value": "2632367422",
              "name": "SKY_HAV_MAT_MATERIAL_SKIN_SMALL"
            }
          },
          {
            "_": "Stairs Broken Stone",
            "$": {
              "value": "2892392795",
              "name": "SKY_HAV_MAT_STAIRS_BROKEN_STONE"
            }
          },
          {
            "_": "Material Skin Large",
            "$": {
              "value": "2965929619",
              "name": "SKY_HAV_MAT_MATERIAL_SKIN_LARGE"
            }
          },
          {
            "_": "Organic",
            "$": {
              "value": "2974920155",
              "name": "SKY_HAV_MAT_ORGANIC"
            }
          },
          {
            "_": "Material Bone",
            "$": {
              "value": "3049421844",
              "name": "SKY_HAV_MAT_MATERIAL_BONE"
            }
          },
          {
            "_": "Heavy Wood",
            "$": {
              "value": "3070783559",
              "name": "SKY_HAV_MAT_HEAVY_WOOD"
            }
          },
          {
            "_": "Material Chain",
            "$": {
              "value": "3074114406",
              "name": "SKY_HAV_MAT_MATERIAL_CHAIN"
            }
          },
          {
            "_": "Dirt",
            "$": {
              "value": "3106094762",
              "name": "SKY_HAV_MAT_DIRT"
            }
          },
          {
            "_": "Material Armor Light",
            "$": {
              "value": "3424720541",
              "name": "SKY_HAV_MAT_MATERIAL_ARMOR_LIGHT"
            }
          },
          {
            "_": "Material Shield Light",
            "$": {
              "value": "3448167928",
              "name": "SKY_HAV_MAT_MATERIAL_SHIELD_LIGHT"
            }
          },
          {
            "_": "Material Coin",
            "$": {
              "value": "3589100606",
              "name": "SKY_HAV_MAT_MATERIAL_COIN"
            }
          },
          {
            "_": "Material Shield Heavy",
            "$": {
              "value": "3702389584",
              "name": "SKY_HAV_MAT_MATERIAL_SHIELD_HEAVY"
            }
          },
          {
            "_": "Material Armor Heavy",
            "$": {
              "value": "3708432437",
              "name": "SKY_HAV_MAT_MATERIAL_ARMOR_HEAVY"
            }
          },
          {
            "_": "Material Arrow",
            "$": {
              "value": "3725505938",
              "name": "SKY_HAV_MAT_MATERIAL_ARROW"
            }
          },
          {
            "_": "Glass",
            "$": {
              "value": "3739830338",
              "name": "SKY_HAV_MAT_GLASS"
            }
          },
          {
            "_": "Stone",
            "$": {
              "value": "3741512247",
              "name": "SKY_HAV_MAT_STONE"
            }
          },
          {
            "_": "Cloth",
            "$": {
              "value": "3839073443",
              "name": "SKY_HAV_MAT_CLOTH"
            }
          },
          {
            "_": "Material Blunt 2Hand",
            "$": {
              "value": "3969592277",
              "name": "SKY_HAV_MAT_MATERIAL_BLUNT_2HAND"
            }
          },
          {
            "_": "Unknown in Creation Kit v1.9.32.0. Found in Dawnguard DLC in meshes\\dlc01\\prototype\\dlc1protoswingingbridge.nif.",
            "$": {
              "value": "4239621792",
              "name": "SKY_HAV_MAT_UNKNOWN_4239621792"
            }
          },
          {
            "_": "Material Boulder Medium",
            "$": {
              "value": "4283869410",
              "name": "SKY_HAV_MAT_MATERIAL_BOULDER_MEDIUM"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Describes the collision layer a body belongs to in Oblivion.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "OblivionLayer",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Unidentified (white)",
            "$": {
              "value": "0",
              "name": "OL_UNIDENTIFIED"
            }
          },
          {
            "_": "Static (red)",
            "$": {
              "value": "1",
              "name": "OL_STATIC"
            }
          },
          {
            "_": "AnimStatic (magenta)",
            "$": {
              "value": "2",
              "name": "OL_ANIM_STATIC"
            }
          },
          {
            "_": "Transparent (light pink)",
            "$": {
              "value": "3",
              "name": "OL_TRANSPARENT"
            }
          },
          {
            "_": "Clutter (light blue)",
            "$": {
              "value": "4",
              "name": "OL_CLUTTER"
            }
          },
          {
            "_": "Weapon (orange)",
            "$": {
              "value": "5",
              "name": "OL_WEAPON"
            }
          },
          {
            "_": "Projectile (light orange)",
            "$": {
              "value": "6",
              "name": "OL_PROJECTILE"
            }
          },
          {
            "_": "Spell (cyan)",
            "$": {
              "value": "7",
              "name": "OL_SPELL"
            }
          },
          {
            "_": "Biped (green) Seems to apply to all creatures/NPCs",
            "$": {
              "value": "8",
              "name": "OL_BIPED"
            }
          },
          {
            "_": "Trees (light brown)",
            "$": {
              "value": "9",
              "name": "OL_TREES"
            }
          },
          {
            "_": "Props (magenta)",
            "$": {
              "value": "10",
              "name": "OL_PROPS"
            }
          },
          {
            "_": "Water (cyan)",
            "$": {
              "value": "11",
              "name": "OL_WATER"
            }
          },
          {
            "_": "Trigger (light grey)",
            "$": {
              "value": "12",
              "name": "OL_TRIGGER"
            }
          },
          {
            "_": "Terrain (light yellow)",
            "$": {
              "value": "13",
              "name": "OL_TERRAIN"
            }
          },
          {
            "_": "Trap (light grey)",
            "$": {
              "value": "14",
              "name": "OL_TRAP"
            }
          },
          {
            "_": "NonCollidable (white)",
            "$": {
              "value": "15",
              "name": "OL_NONCOLLIDABLE"
            }
          },
          {
            "_": "CloudTrap (greenish grey)",
            "$": {
              "value": "16",
              "name": "OL_CLOUD_TRAP"
            }
          },
          {
            "_": "Ground (none)",
            "$": {
              "value": "17",
              "name": "OL_GROUND"
            }
          },
          {
            "_": "Portal (green)",
            "$": {
              "value": "18",
              "name": "OL_PORTAL"
            }
          },
          {
            "_": "Stairs (white)",
            "$": {
              "value": "19",
              "name": "OL_STAIRS"
            }
          },
          {
            "_": "CharController (yellow)",
            "$": {
              "value": "20",
              "name": "OL_CHAR_CONTROLLER"
            }
          },
          {
            "_": "AvoidBox (dark yellow)",
            "$": {
              "value": "21",
              "name": "OL_AVOID_BOX"
            }
          },
          {
            "_": "? (white)",
            "$": {
              "value": "22",
              "name": "OL_UNKNOWN1"
            }
          },
          {
            "_": "? (white)",
            "$": {
              "value": "23",
              "name": "OL_UNKNOWN2"
            }
          },
          {
            "_": "CameraPick (white)",
            "$": {
              "value": "24",
              "name": "OL_CAMERA_PICK"
            }
          },
          {
            "_": "ItemPick (white)",
            "$": {
              "value": "25",
              "name": "OL_ITEM_PICK"
            }
          },
          {
            "_": "LineOfSight (white)",
            "$": {
              "value": "26",
              "name": "OL_LINE_OF_SIGHT"
            }
          },
          {
            "_": "PathPick (white)",
            "$": {
              "value": "27",
              "name": "OL_PATH_PICK"
            }
          },
          {
            "_": "CustomPick1 (white)",
            "$": {
              "value": "28",
              "name": "OL_CUSTOM_PICK_1"
            }
          },
          {
            "_": "CustomPick2 (white)",
            "$": {
              "value": "29",
              "name": "OL_CUSTOM_PICK_2"
            }
          },
          {
            "_": "SpellExplosion (white)",
            "$": {
              "value": "30",
              "name": "OL_SPELL_EXPLOSION"
            }
          },
          {
            "_": "DroppingPick (white)",
            "$": {
              "value": "31",
              "name": "OL_DROPPING_PICK"
            }
          },
          {
            "_": "Other (white)",
            "$": {
              "value": "32",
              "name": "OL_OTHER"
            }
          },
          {
            "_": "Head",
            "$": {
              "value": "33",
              "name": "OL_HEAD"
            }
          },
          {
            "_": "Body",
            "$": {
              "value": "34",
              "name": "OL_BODY"
            }
          },
          {
            "_": "Spine1",
            "$": {
              "value": "35",
              "name": "OL_SPINE1"
            }
          },
          {
            "_": "Spine2",
            "$": {
              "value": "36",
              "name": "OL_SPINE2"
            }
          },
          {
            "_": "LUpperArm",
            "$": {
              "value": "37",
              "name": "OL_L_UPPER_ARM"
            }
          },
          {
            "_": "LForeArm",
            "$": {
              "value": "38",
              "name": "OL_L_FOREARM"
            }
          },
          {
            "_": "LHand",
            "$": {
              "value": "39",
              "name": "OL_L_HAND"
            }
          },
          {
            "_": "LThigh",
            "$": {
              "value": "40",
              "name": "OL_L_THIGH"
            }
          },
          {
            "_": "LCalf",
            "$": {
              "value": "41",
              "name": "OL_L_CALF"
            }
          },
          {
            "_": "LFoot",
            "$": {
              "value": "42",
              "name": "OL_L_FOOT"
            }
          },
          {
            "_": "RUpperArm",
            "$": {
              "value": "43",
              "name": "OL_R_UPPER_ARM"
            }
          },
          {
            "_": "RForeArm",
            "$": {
              "value": "44",
              "name": "OL_R_FOREARM"
            }
          },
          {
            "_": "RHand",
            "$": {
              "value": "45",
              "name": "OL_R_HAND"
            }
          },
          {
            "_": "RThigh",
            "$": {
              "value": "46",
              "name": "OL_R_THIGH"
            }
          },
          {
            "_": "RCalf",
            "$": {
              "value": "47",
              "name": "OL_R_CALF"
            }
          },
          {
            "_": "RFoot",
            "$": {
              "value": "48",
              "name": "OL_R_FOOT"
            }
          },
          {
            "_": "Tail",
            "$": {
              "value": "49",
              "name": "OL_TAIL"
            }
          },
          {
            "_": "SideWeapon",
            "$": {
              "value": "50",
              "name": "OL_SIDE_WEAPON"
            }
          },
          {
            "_": "Shield",
            "$": {
              "value": "51",
              "name": "OL_SHIELD"
            }
          },
          {
            "_": "Quiver",
            "$": {
              "value": "52",
              "name": "OL_QUIVER"
            }
          },
          {
            "_": "BackWeapon",
            "$": {
              "value": "53",
              "name": "OL_BACK_WEAPON"
            }
          },
          {
            "_": "BackWeapon (?)",
            "$": {
              "value": "54",
              "name": "OL_BACK_WEAPON2"
            }
          },
          {
            "_": "PonyTail",
            "$": {
              "value": "55",
              "name": "OL_PONYTAIL"
            }
          },
          {
            "_": "Wing",
            "$": {
              "value": "56",
              "name": "OL_WING"
            }
          },
          {
            "_": "Null",
            "$": {
              "value": "57",
              "name": "OL_NULL"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Describes the collision layer a body belongs to in Fallout 3 and Fallout NV.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Fallout3Layer",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Unidentified (white)",
            "$": {
              "value": "0",
              "name": "FOL_UNIDENTIFIED"
            }
          },
          {
            "_": "Static (red)",
            "$": {
              "value": "1",
              "name": "FOL_STATIC"
            }
          },
          {
            "_": "AnimStatic (magenta)",
            "$": {
              "value": "2",
              "name": "FOL_ANIM_STATIC"
            }
          },
          {
            "_": "Transparent (light pink)",
            "$": {
              "value": "3",
              "name": "FOL_TRANSPARENT"
            }
          },
          {
            "_": "Clutter (light blue)",
            "$": {
              "value": "4",
              "name": "FOL_CLUTTER"
            }
          },
          {
            "_": "Weapon (orange)",
            "$": {
              "value": "5",
              "name": "FOL_WEAPON"
            }
          },
          {
            "_": "Projectile (light orange)",
            "$": {
              "value": "6",
              "name": "FOL_PROJECTILE"
            }
          },
          {
            "_": "Spell (cyan)",
            "$": {
              "value": "7",
              "name": "FOL_SPELL"
            }
          },
          {
            "_": "Biped (green) Seems to apply to all creatures/NPCs",
            "$": {
              "value": "8",
              "name": "FOL_BIPED"
            }
          },
          {
            "_": "Trees (light brown)",
            "$": {
              "value": "9",
              "name": "FOL_TREES"
            }
          },
          {
            "_": "Props (magenta)",
            "$": {
              "value": "10",
              "name": "FOL_PROPS"
            }
          },
          {
            "_": "Water (cyan)",
            "$": {
              "value": "11",
              "name": "FOL_WATER"
            }
          },
          {
            "_": "Trigger (light grey)",
            "$": {
              "value": "12",
              "name": "FOL_TRIGGER"
            }
          },
          {
            "_": "Terrain (light yellow)",
            "$": {
              "value": "13",
              "name": "FOL_TERRAIN"
            }
          },
          {
            "_": "Trap (light grey)",
            "$": {
              "value": "14",
              "name": "FOL_TRAP"
            }
          },
          {
            "_": "NonCollidable (white)",
            "$": {
              "value": "15",
              "name": "FOL_NONCOLLIDABLE"
            }
          },
          {
            "_": "CloudTrap (greenish grey)",
            "$": {
              "value": "16",
              "name": "FOL_CLOUD_TRAP"
            }
          },
          {
            "_": "Ground (none)",
            "$": {
              "value": "17",
              "name": "FOL_GROUND"
            }
          },
          {
            "_": "Portal (green)",
            "$": {
              "value": "18",
              "name": "FOL_PORTAL"
            }
          },
          {
            "_": "DebrisSmall (white)",
            "$": {
              "value": "19",
              "name": "FOL_DEBRIS_SMALL"
            }
          },
          {
            "_": "DebrisLarge (white)",
            "$": {
              "value": "20",
              "name": "FOL_DEBRIS_LARGE"
            }
          },
          {
            "_": "AcousticSpace (white)",
            "$": {
              "value": "21",
              "name": "FOL_ACOUSTIC_SPACE"
            }
          },
          {
            "_": "Actorzone (white)",
            "$": {
              "value": "22",
              "name": "FOL_ACTORZONE"
            }
          },
          {
            "_": "Projectilezone (white)",
            "$": {
              "value": "23",
              "name": "FOL_PROJECTILEZONE"
            }
          },
          {
            "_": "GasTrap (yellowish green)",
            "$": {
              "value": "24",
              "name": "FOL_GASTRAP"
            }
          },
          {
            "_": "ShellCasing (white)",
            "$": {
              "value": "25",
              "name": "FOL_SHELLCASING"
            }
          },
          {
            "_": "TransparentSmall (white)",
            "$": {
              "value": "26",
              "name": "FOL_TRANSPARENT_SMALL"
            }
          },
          {
            "_": "InvisibleWall (white)",
            "$": {
              "value": "27",
              "name": "FOL_INVISIBLE_WALL"
            }
          },
          {
            "_": "TransparentSmallAnim (white)",
            "$": {
              "value": "28",
              "name": "FOL_TRANSPARENT_SMALL_ANIM"
            }
          },
          {
            "_": "Dead Biped (green)",
            "$": {
              "value": "29",
              "name": "FOL_DEADBIP"
            }
          },
          {
            "_": "CharController (yellow)",
            "$": {
              "value": "30",
              "name": "FOL_CHARCONTROLLER"
            }
          },
          {
            "_": "Avoidbox (orange)",
            "$": {
              "value": "31",
              "name": "FOL_AVOIDBOX"
            }
          },
          {
            "_": "Collisionbox (white)",
            "$": {
              "value": "32",
              "name": "FOL_COLLISIONBOX"
            }
          },
          {
            "_": "Camerasphere (white)",
            "$": {
              "value": "33",
              "name": "FOL_CAMERASPHERE"
            }
          },
          {
            "_": "Doordetection (white)",
            "$": {
              "value": "34",
              "name": "FOL_DOORDETECTION"
            }
          },
          {
            "_": "Camerapick (white)",
            "$": {
              "value": "35",
              "name": "FOL_CAMERAPICK"
            }
          },
          {
            "_": "Itempick (white)",
            "$": {
              "value": "36",
              "name": "FOL_ITEMPICK"
            }
          },
          {
            "_": "LineOfSight (white)",
            "$": {
              "value": "37",
              "name": "FOL_LINEOFSIGHT"
            }
          },
          {
            "_": "Pathpick (white)",
            "$": {
              "value": "38",
              "name": "FOL_PATHPICK"
            }
          },
          {
            "_": "Custompick1 (white)",
            "$": {
              "value": "39",
              "name": "FOL_CUSTOMPICK1"
            }
          },
          {
            "_": "Custompick2 (white)",
            "$": {
              "value": "40",
              "name": "FOL_CUSTOMPICK2"
            }
          },
          {
            "_": "SpellExplosion (white)",
            "$": {
              "value": "41",
              "name": "FOL_SPELLEXPLOSION"
            }
          },
          {
            "_": "Droppingpick (white)",
            "$": {
              "value": "42",
              "name": "FOL_DROPPINGPICK"
            }
          },
          {
            "_": "Null (white)",
            "$": {
              "value": "43",
              "name": "FOL_NULL"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Describes the collision layer a body belongs to in Skyrim.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyrimLayer",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Unidentified",
            "$": {
              "value": "0",
              "name": "SKYL_UNIDENTIFIED"
            }
          },
          {
            "_": "Static",
            "$": {
              "value": "1",
              "name": "SKYL_STATIC"
            }
          },
          {
            "_": "Anim Static",
            "$": {
              "value": "2",
              "name": "SKYL_ANIMSTATIC"
            }
          },
          {
            "_": "Transparent",
            "$": {
              "value": "3",
              "name": "SKYL_TRANSPARENT"
            }
          },
          {
            "_": "Clutter. Object with this layer will float on water surface.",
            "$": {
              "value": "4",
              "name": "SKYL_CLUTTER"
            }
          },
          {
            "_": "Weapon",
            "$": {
              "value": "5",
              "name": "SKYL_WEAPON"
            }
          },
          {
            "_": "Projectile",
            "$": {
              "value": "6",
              "name": "SKYL_PROJECTILE"
            }
          },
          {
            "_": "Spell",
            "$": {
              "value": "7",
              "name": "SKYL_SPELL"
            }
          },
          {
            "_": "Biped. Seems to apply to all creatures/NPCs",
            "$": {
              "value": "8",
              "name": "SKYL_BIPED"
            }
          },
          {
            "_": "Trees",
            "$": {
              "value": "9",
              "name": "SKYL_TREES"
            }
          },
          {
            "_": "Props",
            "$": {
              "value": "10",
              "name": "SKYL_PROPS"
            }
          },
          {
            "_": "Water",
            "$": {
              "value": "11",
              "name": "SKYL_WATER"
            }
          },
          {
            "_": "Trigger",
            "$": {
              "value": "12",
              "name": "SKYL_TRIGGER"
            }
          },
          {
            "_": "Terrain",
            "$": {
              "value": "13",
              "name": "SKYL_TERRAIN"
            }
          },
          {
            "_": "Trap",
            "$": {
              "value": "14",
              "name": "SKYL_TRAP"
            }
          },
          {
            "_": "NonCollidable",
            "$": {
              "value": "15",
              "name": "SKYL_NONCOLLIDABLE"
            }
          },
          {
            "_": "CloudTrap",
            "$": {
              "value": "16",
              "name": "SKYL_CLOUD_TRAP"
            }
          },
          {
            "_": "Ground. It seems that produces no sound when collide.",
            "$": {
              "value": "17",
              "name": "SKYL_GROUND"
            }
          },
          {
            "_": "Portal",
            "$": {
              "value": "18",
              "name": "SKYL_PORTAL"
            }
          },
          {
            "_": "Debris Small",
            "$": {
              "value": "19",
              "name": "SKYL_DEBRIS_SMALL"
            }
          },
          {
            "_": "Debris Large",
            "$": {
              "value": "20",
              "name": "SKYL_DEBRIS_LARGE"
            }
          },
          {
            "_": "Acoustic Space",
            "$": {
              "value": "21",
              "name": "SKYL_ACOUSTIC_SPACE"
            }
          },
          {
            "_": "Actor Zone",
            "$": {
              "value": "22",
              "name": "SKYL_ACTORZONE"
            }
          },
          {
            "_": "Projectile Zone",
            "$": {
              "value": "23",
              "name": "SKYL_PROJECTILEZONE"
            }
          },
          {
            "_": "Gas Trap",
            "$": {
              "value": "24",
              "name": "SKYL_GASTRAP"
            }
          },
          {
            "_": "Shell Casing",
            "$": {
              "value": "25",
              "name": "SKYL_SHELLCASING"
            }
          },
          {
            "_": "Transparent Small",
            "$": {
              "value": "26",
              "name": "SKYL_TRANSPARENT_SMALL"
            }
          },
          {
            "_": "Invisible Wall",
            "$": {
              "value": "27",
              "name": "SKYL_INVISIBLE_WALL"
            }
          },
          {
            "_": "Transparent Small Anim",
            "$": {
              "value": "28",
              "name": "SKYL_TRANSPARENT_SMALL_ANIM"
            }
          },
          {
            "_": "Ward",
            "$": {
              "value": "29",
              "name": "SKYL_WARD"
            }
          },
          {
            "_": "Char Controller",
            "$": {
              "value": "30",
              "name": "SKYL_CHARCONTROLLER"
            }
          },
          {
            "_": "Stair Helper",
            "$": {
              "value": "31",
              "name": "SKYL_STAIRHELPER"
            }
          },
          {
            "_": "Dead Bip",
            "$": {
              "value": "32",
              "name": "SKYL_DEADBIP"
            }
          },
          {
            "_": "Biped No CC",
            "$": {
              "value": "33",
              "name": "SKYL_BIPED_NO_CC"
            }
          },
          {
            "_": "Avoid Box",
            "$": {
              "value": "34",
              "name": "SKYL_AVOIDBOX"
            }
          },
          {
            "_": "Collision Box",
            "$": {
              "value": "35",
              "name": "SKYL_COLLISIONBOX"
            }
          },
          {
            "_": "Camera Sphere",
            "$": {
              "value": "36",
              "name": "SKYL_CAMERASHPERE"
            }
          },
          {
            "_": "Door Detection",
            "$": {
              "value": "37",
              "name": "SKYL_DOORDETECTION"
            }
          },
          {
            "_": "Cone Projectile",
            "$": {
              "value": "38",
              "name": "SKYL_CONEPROJECTILE"
            }
          },
          {
            "_": "Camera Pick",
            "$": {
              "value": "39",
              "name": "SKYL_CAMERAPICK"
            }
          },
          {
            "_": "Item Pick",
            "$": {
              "value": "40",
              "name": "SKYL_ITEMPICK"
            }
          },
          {
            "_": "Line of Sight",
            "$": {
              "value": "41",
              "name": "SKYL_LINEOFSIGHT"
            }
          },
          {
            "_": "Path Pick",
            "$": {
              "value": "42",
              "name": "SKYL_PATHPICK"
            }
          },
          {
            "_": "Custom Pick 1",
            "$": {
              "value": "43",
              "name": "SKYL_CUSTOMPICK1"
            }
          },
          {
            "_": "Custom Pick 2",
            "$": {
              "value": "44",
              "name": "SKYL_CUSTOMPICK2"
            }
          },
          {
            "_": "Spell Explosion",
            "$": {
              "value": "45",
              "name": "SKYL_SPELLEXPLOSION"
            }
          },
          {
            "_": "Dropping Pick",
            "$": {
              "value": "46",
              "name": "SKYL_DROPPINGPICK"
            }
          },
          {
            "_": "Null",
            "$": {
              "value": "47",
              "name": "SKYL_NULL"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok.\n        A byte describing if MOPP Data is organized into chunks (PS3) or not (PC)\n        \n        \n        \n    ",
        "$": {
          "name": "MoppDataBuildType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Organized in chunks for PS3.",
            "$": {
              "value": "0",
              "name": "BUILT_WITH_CHUNK_SUBDIVISION"
            }
          },
          {
            "_": "Not organized in chunks for PC. (Default)",
            "$": {
              "value": "1",
              "name": "BUILT_WITHOUT_CHUNK_SUBDIVISION"
            }
          },
          {
            "_": "Build type not set yet.",
            "$": {
              "value": "2",
              "name": "BUILD_NOT_SET"
            }
          }
        ]
      },
      {
        "_": "\n        Target platform for NiPersistentSrcTextureRendererData (later than 30.1).\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PlatformID",
          "storage": "uint",
          "prefix": "PLATFORM"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "ANY"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "XENON"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "PS3"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "DX9"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "WII"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "D3D10"
            }
          }
        ]
      },
      {
        "_": "\n        Target renderer for NiPersistentSrcTextureRendererData (until 30.1).\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "RendererID",
          "storage": "uint",
          "prefix": "RENDERER"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "XBOX360"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "PS3"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "DX9"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "D3D10"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "WII"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "GENERIC"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "D3D11"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the pixel format used by the NiPixelData object to store a texture.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PixelFormat",
          "storage": "uint",
          "prefix": "PX"
        },
        "option": [
          {
            "_": "24-bit RGB. 8 bits per red, blue, and green component.",
            "$": {
              "value": "0",
              "name": "FMT_RGB"
            }
          },
          {
            "_": "32-bit RGB with alpha. 8 bits per red, blue, green, and alpha component.",
            "$": {
              "value": "1",
              "name": "FMT_RGBA"
            }
          },
          {
            "_": "8-bit palette index.",
            "$": {
              "value": "2",
              "name": "FMT_PAL"
            }
          },
          {
            "_": "8-bit palette index with alpha.",
            "$": {
              "value": "3",
              "name": "FMT_PALA"
            }
          },
          {
            "_": "DXT1 compressed texture.",
            "$": {
              "value": "4",
              "name": "FMT_DXT1"
            }
          },
          {
            "_": "DXT3 compressed texture.",
            "$": {
              "value": "5",
              "name": "FMT_DXT3"
            }
          },
          {
            "_": "DXT5 compressed texture.",
            "$": {
              "value": "6",
              "name": "FMT_DXT5"
            }
          },
          {
            "_": "(Deprecated) 24-bit noninterleaved texture, an old PS2 format.",
            "$": {
              "value": "7",
              "name": "FMT_RGB24NONINT"
            }
          },
          {
            "_": "Uncompressed dU/dV gradient bump map.",
            "$": {
              "value": "8",
              "name": "FMT_BUMP"
            }
          },
          {
            "_": "Uncompressed dU/dV gradient bump map with luma channel representing shininess.",
            "$": {
              "value": "9",
              "name": "FMT_BUMPLUMA"
            }
          },
          {
            "_": "Generic descriptor for any renderer-specific format not described by other formats.",
            "$": {
              "value": "10",
              "name": "FMT_RENDERSPEC"
            }
          },
          {
            "_": "Generic descriptor for formats with 1 component.",
            "$": {
              "value": "11",
              "name": "FMT_1CH"
            }
          },
          {
            "_": "Generic descriptor for formats with 2 components.",
            "$": {
              "value": "12",
              "name": "FMT_2CH"
            }
          },
          {
            "_": "Generic descriptor for formats with 3 components.",
            "$": {
              "value": "13",
              "name": "FMT_3CH"
            }
          },
          {
            "_": "Generic descriptor for formats with 4 components.",
            "$": {
              "value": "14",
              "name": "FMT_4CH"
            }
          },
          {
            "_": "Indicates the NiPixelFormat is meant to be used on a depth/stencil surface.",
            "$": {
              "value": "15",
              "name": "FMT_DEPTH_STENCIL"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "FMT_UNKNOWN"
            }
          }
        ]
      },
      {
        "_": "\n        Describes whether pixels have been tiled from their standard row-major format to a format optimized for a particular platform.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "PixelTiling",
          "storage": "uint",
          "prefix": "PX"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "TILE_NONE"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "TILE_XENON"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "TILE_WII"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "TILE_NV_SWIZZLED"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the pixel format used by the NiPixelData object to store a texture.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PixelComponent",
          "storage": "uint",
          "prefix": "PX"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "COMP_RED"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "COMP_GREEN"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "COMP_BLUE"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "COMP_ALPHA"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "COMP_COMPRESSED"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "COMP_OFFSET_U"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "COMP_OFFSET_V"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "COMP_OFFSET_W"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "COMP_OFFSET_Q"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "COMP_LUMA"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "COMP_HEIGHT"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "COMP_VECTOR_X"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "COMP_VECTOR_Y"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "COMP_VECTOR_Z"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "COMP_PADDING"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "COMP_INTENSITY"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "COMP_INDEX"
            }
          },
          {
            "$": {
              "value": "17",
              "name": "COMP_DEPTH"
            }
          },
          {
            "$": {
              "value": "18",
              "name": "COMP_STENCIL"
            }
          },
          {
            "$": {
              "value": "19",
              "name": "COMP_EMPTY"
            }
          }
        ]
      },
      {
        "_": "\n        Describes how each pixel should be accessed on NiPixelFormat.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PixelRepresentation",
          "storage": "uint",
          "prefix": "PX"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "REP_NORM_INT"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "REP_HALF"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "REP_FLOAT"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "REP_INDEX"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "REP_COMPRESSED"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "REP_UNKNOWN"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "REP_INT"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the color depth in an NiTexture.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PixelLayout",
          "storage": "uint",
          "prefix": "PX"
        },
        "option": [
          {
            "_": "Texture is in 8-bit palettized format.",
            "$": {
              "value": "0",
              "name": "LAY_PALETTIZED_8"
            }
          },
          {
            "_": "Texture is in 16-bit high color format.",
            "$": {
              "value": "1",
              "name": "LAY_HIGH_COLOR_16"
            }
          },
          {
            "_": "Texture is in 32-bit true color format.",
            "$": {
              "value": "2",
              "name": "LAY_TRUE_COLOR_32"
            }
          },
          {
            "_": "Texture is compressed.",
            "$": {
              "value": "3",
              "name": "LAY_COMPRESSED"
            }
          },
          {
            "_": "Texture is a grayscale bump map.",
            "$": {
              "value": "4",
              "name": "LAY_BUMPMAP"
            }
          },
          {
            "_": "Texture is in 4-bit palettized format.",
            "$": {
              "value": "5",
              "name": "LAY_PALETTIZED_4"
            }
          },
          {
            "_": "Use default setting.",
            "$": {
              "value": "6",
              "name": "LAY_DEFAULT"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "LAY_SINGLE_COLOR_8"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "LAY_SINGLE_COLOR_16"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "LAY_SINGLE_COLOR_32"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "LAY_DOUBLE_COLOR_32"
            }
          },
          {
            "$": {
              "value": "11",
              "name": "LAY_DOUBLE_COLOR_64"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "LAY_FLOAT_COLOR_32"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "LAY_FLOAT_COLOR_64"
            }
          },
          {
            "$": {
              "value": "14",
              "name": "LAY_FLOAT_COLOR_128"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "LAY_SINGLE_COLOR_4"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "LAY_DEPTH_24_X8"
            }
          }
        ]
      },
      {
        "_": "\n        Describes how mipmaps are handled in an NiTexture.\n        \n        \n        \n    ",
        "$": {
          "name": "MipMapFormat",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Texture does not use mip maps.",
            "$": {
              "value": "0",
              "name": "MIP_FMT_NO"
            }
          },
          {
            "_": "Texture uses mip maps.",
            "$": {
              "value": "1",
              "name": "MIP_FMT_YES"
            }
          },
          {
            "_": "Use default setting.",
            "$": {
              "value": "2",
              "name": "MIP_FMT_DEFAULT"
            }
          }
        ]
      },
      {
        "_": "\n        Describes how transparency is handled in an NiTexture.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "AlphaFormat",
          "storage": "uint"
        },
        "option": [
          {
            "_": "No alpha.",
            "$": {
              "value": "0",
              "name": "ALPHA_NONE"
            }
          },
          {
            "_": "1-bit alpha.",
            "$": {
              "value": "1",
              "name": "ALPHA_BINARY"
            }
          },
          {
            "_": "Interpolated 4- or 8-bit alpha.",
            "$": {
              "value": "2",
              "name": "ALPHA_SMOOTH"
            }
          },
          {
            "_": "Use default setting.",
            "$": {
              "value": "3",
              "name": "ALPHA_DEFAULT"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the availiable texture clamp modes, i.e. the behavior of UV mapping outside the [0,1] range.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "TexClampMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Clamp in both directions.",
            "$": {
              "value": "0",
              "name": "CLAMP_S_CLAMP_T"
            }
          },
          {
            "_": "Clamp in the S(U) direction but wrap in the T(V) direction.",
            "$": {
              "value": "1",
              "name": "CLAMP_S_WRAP_T"
            }
          },
          {
            "_": "Wrap in the S(U) direction but clamp in the T(V) direction.",
            "$": {
              "value": "2",
              "name": "WRAP_S_CLAMP_T"
            }
          },
          {
            "_": "Wrap in both directions.",
            "$": {
              "value": "3",
              "name": "WRAP_S_WRAP_T"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the availiable texture filter modes, i.e. the way the pixels in a texture are displayed on screen.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "TexFilterMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Nearest neighbor. Uses nearest texel with no mipmapping.",
            "$": {
              "value": "0",
              "name": "FILTER_NEAREST"
            }
          },
          {
            "_": "Bilinear. Linear interpolation with no mipmapping.",
            "$": {
              "value": "1",
              "name": "FILTER_BILERP"
            }
          },
          {
            "_": "Trilinear. Linear intepolation between 8 texels (4 nearest texels between 2 nearest mip levels).",
            "$": {
              "value": "2",
              "name": "FILTER_TRILERP"
            }
          },
          {
            "_": "Nearest texel on nearest mip level.",
            "$": {
              "value": "3",
              "name": "FILTER_NEAREST_MIPNEAREST"
            }
          },
          {
            "_": "Linear interpolates nearest texel between two nearest mip levels.",
            "$": {
              "value": "4",
              "name": "FILTER_NEAREST_MIPLERP"
            }
          },
          {
            "_": "Linear interpolates on nearest mip level.",
            "$": {
              "value": "5",
              "name": "FILTER_BILERP_MIPNEAREST"
            }
          },
          {
            "_": "Anisotropic filtering. One or many trilinear samples depending on anisotropy.",
            "$": {
              "value": "6",
              "name": "FILTER_ANISOTROPIC"
            }
          }
        ]
      },
      {
        "_": "\n        Describes how to apply vertex colors for NiVertexColorProperty.\n        \n        \n        \n    ",
        "$": {
          "name": "VertMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Emissive, ambient, and diffuse colors are all specified by the NiMaterialProperty.",
            "$": {
              "value": "0",
              "name": "VERT_MODE_SRC_IGNORE"
            }
          },
          {
            "_": "Emissive colors are specified by the source vertex colors. Ambient+Diffuse are specified by the NiMaterialProperty.",
            "$": {
              "value": "1",
              "name": "VERT_MODE_SRC_EMISSIVE"
            }
          },
          {
            "_": "Ambient+Diffuse colors are specified by the source vertex colors. Emissive is specified by the NiMaterialProperty. (Default)",
            "$": {
              "value": "2",
              "name": "VERT_MODE_SRC_AMB_DIF"
            }
          }
        ]
      },
      {
        "_": "\n        Describes which lighting equation components influence the final vertex color for NiVertexColorProperty.\n        \n        \n    ",
        "$": {
          "name": "LightMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Emissive.",
            "$": {
              "value": "0",
              "name": "LIGHT_MODE_EMISSIVE"
            }
          },
          {
            "_": "Emissive + Ambient + Diffuse. (Default)",
            "$": {
              "value": "1",
              "name": "LIGHT_MODE_EMI_AMB_DIF"
            }
          }
        ]
      },
      {
        "_": "\n        The animation cyle behavior.\n        \n        \n        \n    ",
        "$": {
          "name": "CycleType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Loop",
            "$": {
              "value": "0",
              "name": "CYCLE_LOOP"
            }
          },
          {
            "_": "Reverse",
            "$": {
              "value": "1",
              "name": "CYCLE_REVERSE"
            }
          },
          {
            "_": "Clamp",
            "$": {
              "value": "2",
              "name": "CYCLE_CLAMP"
            }
          }
        ]
      },
      {
        "_": "\n        The force field type.\n        \n        \n    ",
        "$": {
          "name": "FieldType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Wind (fixed direction)",
            "$": {
              "value": "0",
              "name": "FIELD_WIND"
            }
          },
          {
            "_": "Point (fixed origin)",
            "$": {
              "value": "1",
              "name": "FIELD_POINT"
            }
          }
        ]
      },
      {
        "_": "\n        Determines the way the billboard will react to the camera.\n        Billboard mode is stored in lowest 3 bits although Oblivion vanilla nifs uses values higher than 7.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BillboardMode",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Align billboard and camera forward vector. Minimized rotation.",
            "$": {
              "value": "0",
              "name": "ALWAYS_FACE_CAMERA"
            }
          },
          {
            "_": "Align billboard and camera forward vector while allowing rotation around the up axis.",
            "$": {
              "value": "1",
              "name": "ROTATE_ABOUT_UP"
            }
          },
          {
            "_": "Align billboard and camera forward vector. Non-minimized rotation.",
            "$": {
              "value": "2",
              "name": "RIGID_FACE_CAMERA"
            }
          },
          {
            "_": "Billboard forward vector always faces camera ceneter. Minimized rotation.",
            "$": {
              "value": "3",
              "name": "ALWAYS_FACE_CENTER"
            }
          },
          {
            "_": "Billboard forward vector always faces camera ceneter. Non-minimized rotation.",
            "$": {
              "value": "4",
              "name": "RIGID_FACE_CENTER"
            }
          },
          {
            "_": "The billboard will only rotate around its local Z axis (it always stays in its local X-Y plane).",
            "$": {
              "value": "5",
              "name": "BSROTATE_ABOUT_UP"
            }
          },
          {
            "_": "The billboard will only rotate around the up axis (same as ROTATE_ABOUT_UP?).",
            "$": {
              "value": "9",
              "name": "ROTATE_ABOUT_UP2"
            }
          }
        ]
      },
      {
        "_": "\n        Describes stencil buffer test modes for NiStencilProperty.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "StencilCompareMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Always false. Ref value is ignored.",
            "$": {
              "value": "0",
              "name": "TEST_NEVER"
            }
          },
          {
            "_": "VRef ‹ VBuf",
            "$": {
              "value": "1",
              "name": "TEST_LESS"
            }
          },
          {
            "_": "VRef = VBuf",
            "$": {
              "value": "2",
              "name": "TEST_EQUAL"
            }
          },
          {
            "_": "VRef ≤ VBuf",
            "$": {
              "value": "3",
              "name": "TEST_LESS_EQUAL"
            }
          },
          {
            "_": "VRef › VBuf",
            "$": {
              "value": "4",
              "name": "TEST_GREATER"
            }
          },
          {
            "_": "VRef ≠ VBuf",
            "$": {
              "value": "5",
              "name": "TEST_NOT_EQUAL"
            }
          },
          {
            "_": "VRef ≥ VBuf",
            "$": {
              "value": "6",
              "name": "TEST_GREATER_EQUAL"
            }
          },
          {
            "_": "Always true. Buffer is ignored.",
            "$": {
              "value": "7",
              "name": "TEST_ALWAYS"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the actions which can occur as a result of tests for NiStencilProperty.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "StencilAction",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Keep the current value in the stencil buffer.",
            "$": {
              "value": "0",
              "name": "ACTION_KEEP"
            }
          },
          {
            "_": "Write zero to the stencil buffer.",
            "$": {
              "value": "1",
              "name": "ACTION_ZERO"
            }
          },
          {
            "_": "Write the reference value to the stencil buffer.",
            "$": {
              "value": "2",
              "name": "ACTION_REPLACE"
            }
          },
          {
            "_": "Increment the value in the stencil buffer.",
            "$": {
              "value": "3",
              "name": "ACTION_INCREMENT"
            }
          },
          {
            "_": "Decrement the value in the stencil buffer.",
            "$": {
              "value": "4",
              "name": "ACTION_DECREMENT"
            }
          },
          {
            "_": "Bitwise invert the value in the stencil buffer.",
            "$": {
              "value": "5",
              "name": "ACTION_INVERT"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the face culling options for NiStencilProperty.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "StencilDrawMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Application default, chooses between DRAW_CCW or DRAW_BOTH.",
            "$": {
              "value": "0",
              "name": "DRAW_CCW_OR_BOTH"
            }
          },
          {
            "_": "Draw only the triangles whose vertices are ordered CCW with respect to the viewer. (Standard behavior)",
            "$": {
              "value": "1",
              "name": "DRAW_CCW"
            }
          },
          {
            "_": "Draw only the triangles whose vertices are ordered CW with respect to the viewer. (Effectively flips faces)",
            "$": {
              "value": "2",
              "name": "DRAW_CW"
            }
          },
          {
            "_": "Draw all triangles, regardless of orientation. (Effectively force double-sided)",
            "$": {
              "value": "3",
              "name": "DRAW_BOTH"
            }
          }
        ]
      },
      {
        "_": "\n        Describes Z-buffer test modes for NiZBufferProperty.\n        \"Less than\" = closer to camera, \"Greater than\" = further from camera.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "ZCompareMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Always true. Buffer is ignored.",
            "$": {
              "value": "0",
              "name": "ZCOMP_ALWAYS"
            }
          },
          {
            "_": "VRef ‹ VBuf",
            "$": {
              "value": "1",
              "name": "ZCOMP_LESS"
            }
          },
          {
            "_": "VRef = VBuf",
            "$": {
              "value": "2",
              "name": "ZCOMP_EQUAL"
            }
          },
          {
            "_": "VRef ≤ VBuf",
            "$": {
              "value": "3",
              "name": "ZCOMP_LESS_EQUAL"
            }
          },
          {
            "_": "VRef › VBuf",
            "$": {
              "value": "4",
              "name": "ZCOMP_GREATER"
            }
          },
          {
            "_": "VRef ≠ VBuf",
            "$": {
              "value": "5",
              "name": "ZCOMP_NOT_EQUAL"
            }
          },
          {
            "_": "VRef ≥ VBuf",
            "$": {
              "value": "6",
              "name": "ZCOMP_GREATER_EQUAL"
            }
          },
          {
            "_": "Always false. Ref value is ignored.",
            "$": {
              "value": "7",
              "name": "ZCOMP_NEVER"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok, based on hkpMotion::MotionType. Motion type of a rigid body determines what happens when it is simulated.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkMotionType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Invalid",
            "$": {
              "value": "0",
              "name": "MO_SYS_INVALID"
            }
          },
          {
            "_": "A fully-simulated, movable rigid body. At construction time the engine checks the input inertia and selects MO_SYS_SPHERE_INERTIA or MO_SYS_BOX_INERTIA as appropriate.",
            "$": {
              "value": "1",
              "name": "MO_SYS_DYNAMIC"
            }
          },
          {
            "_": "Simulation is performed using a sphere inertia tensor.",
            "$": {
              "value": "2",
              "name": "MO_SYS_SPHERE_INERTIA"
            }
          },
          {
            "_": "This is the same as MO_SYS_SPHERE_INERTIA, except that simulation of the rigid body is \"softened\".",
            "$": {
              "value": "3",
              "name": "MO_SYS_SPHERE_STABILIZED"
            }
          },
          {
            "_": "Simulation is performed using a box inertia tensor.",
            "$": {
              "value": "4",
              "name": "MO_SYS_BOX_INERTIA"
            }
          },
          {
            "_": "This is the same as MO_SYS_BOX_INERTIA, except that simulation of the rigid body is \"softened\".",
            "$": {
              "value": "5",
              "name": "MO_SYS_BOX_STABILIZED"
            }
          },
          {
            "_": "Simulation is not performed as a normal rigid body. The keyframed rigid body has an infinite mass when viewed by the rest of the system. (used for creatures)",
            "$": {
              "value": "6",
              "name": "MO_SYS_KEYFRAMED"
            }
          },
          {
            "_": "This motion type is used for the static elements of a game scene, e.g. the landscape. Faster than MO_SYS_KEYFRAMED at velocity 0. (used for weapons)",
            "$": {
              "value": "7",
              "name": "MO_SYS_FIXED"
            }
          },
          {
            "_": "A box inertia motion which is optimized for thin boxes and has less stability problems",
            "$": {
              "value": "8",
              "name": "MO_SYS_THIN_BOX"
            }
          },
          {
            "_": "A specialized motion used for character controllers",
            "$": {
              "value": "9",
              "name": "MO_SYS_CHARACTER"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok, based on hkpRigidBodyDeactivator::DeactivatorType.\n        Deactivator Type determines which mechanism Havok will use to classify the body as deactivated.\n        \n        \n        \n    ",
        "$": {
          "name": "hkDeactivatorType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Invalid",
            "$": {
              "value": "0",
              "name": "DEACTIVATOR_INVALID"
            }
          },
          {
            "_": "This will force the rigid body to never deactivate.",
            "$": {
              "value": "1",
              "name": "DEACTIVATOR_NEVER"
            }
          },
          {
            "_": "Tells Havok to use a spatial deactivation scheme. This makes use of high and low frequencies of positional motion to determine when deactivation should occur.",
            "$": {
              "value": "2",
              "name": "DEACTIVATOR_SPATIAL"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok, based on hkpRigidBodyCinfo::SolverDeactivation.\n        A list of possible solver deactivation settings. This value defines how aggressively the solver deactivates objects.\n        Note: Solver deactivation does not save CPU, but reduces creeping of movable objects in a pile quite dramatically.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkSolverDeactivation",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Invalid",
            "$": {
              "value": "0",
              "name": "SOLVER_DEACTIVATION_INVALID"
            }
          },
          {
            "_": "No solver deactivation.",
            "$": {
              "value": "1",
              "name": "SOLVER_DEACTIVATION_OFF"
            }
          },
          {
            "_": "Very conservative deactivation, typically no visible artifacts.",
            "$": {
              "value": "2",
              "name": "SOLVER_DEACTIVATION_LOW"
            }
          },
          {
            "_": "Normal deactivation, no serious visible artifacts in most cases.",
            "$": {
              "value": "3",
              "name": "SOLVER_DEACTIVATION_MEDIUM"
            }
          },
          {
            "_": "Fast deactivation, visible artifacts.",
            "$": {
              "value": "4",
              "name": "SOLVER_DEACTIVATION_HIGH"
            }
          },
          {
            "_": "Very fast deactivation, visible artifacts.",
            "$": {
              "value": "5",
              "name": "SOLVER_DEACTIVATION_MAX"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok, based on hkpCollidableQualityType. Describes the priority and quality of collisions for a body,\n            e.g. you may expect critical game play objects to have solid high-priority collisions so that they never sink into ground,\n            or may allow penetrations for visual debris objects.\n        Notes:\n            - Fixed and keyframed objects cannot interact with each other.\n            - Debris can interpenetrate but still responds to Bullet hits.\n            - Critical objects are forced to not interpenetrate.\n            - Moving objects can interpenetrate slightly with other Moving or Debris objects but nothing else.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkQualityType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Automatically assigned to MO_QUAL_FIXED, MO_QUAL_KEYFRAMED or MO_QUAL_DEBRIS",
            "$": {
              "value": "0",
              "name": "MO_QUAL_INVALID"
            }
          },
          {
            "_": "Static body.",
            "$": {
              "value": "1",
              "name": "MO_QUAL_FIXED"
            }
          },
          {
            "_": "Animated body with infinite mass.",
            "$": {
              "value": "2",
              "name": "MO_QUAL_KEYFRAMED"
            }
          },
          {
            "_": "Low importance bodies adding visual detail.",
            "$": {
              "value": "3",
              "name": "MO_QUAL_DEBRIS"
            }
          },
          {
            "_": "Moving bodies which should not penetrate or leave the world, but can.",
            "$": {
              "value": "4",
              "name": "MO_QUAL_MOVING"
            }
          },
          {
            "_": "Gameplay critical bodies which cannot penetrate or leave the world under any circumstance.",
            "$": {
              "value": "5",
              "name": "MO_QUAL_CRITICAL"
            }
          },
          {
            "_": "Fast-moving bodies, such as projectiles.",
            "$": {
              "value": "6",
              "name": "MO_QUAL_BULLET"
            }
          },
          {
            "_": "For user.",
            "$": {
              "value": "7",
              "name": "MO_QUAL_USER"
            }
          },
          {
            "_": "For use with rigid body character controllers.",
            "$": {
              "value": "8",
              "name": "MO_QUAL_CHARACTER"
            }
          },
          {
            "_": "\n            Moving bodies with infinite mass which should report contact points and TOI collisions against all other bodies.\n        ",
            "$": {
              "value": "9",
              "name": "MO_QUAL_KEYFRAMED_REPORT"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the type of gravitational force.\n        \n        \n        \n    ",
        "$": {
          "name": "ForceType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "FORCE_PLANAR"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "FORCE_SPHERICAL"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "FORCE_UNKNOWN"
            }
          }
        ]
      },
      {
        "_": "\n        Describes which aspect of the NiTextureTransform the NiTextureTransformController will modify.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "TransformMember",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Control the translation of the U coordinates.",
            "$": {
              "value": "0",
              "name": "TT_TRANSLATE_U"
            }
          },
          {
            "_": "Control the translation of the V coordinates.",
            "$": {
              "value": "1",
              "name": "TT_TRANSLATE_V"
            }
          },
          {
            "_": "Control the rotation of the coordinates.",
            "$": {
              "value": "2",
              "name": "TT_ROTATE"
            }
          },
          {
            "_": "Control the scale of the U coordinates.",
            "$": {
              "value": "3",
              "name": "TT_SCALE_U"
            }
          },
          {
            "_": "Control the scale of the V coordinates.",
            "$": {
              "value": "4",
              "name": "TT_SCALE_V"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the decay function of bomb forces.\n        \n        \n        \n    ",
        "$": {
          "name": "DecayType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "No decay.",
            "$": {
              "value": "0",
              "name": "DECAY_NONE"
            }
          },
          {
            "_": "Linear decay.",
            "$": {
              "value": "1",
              "name": "DECAY_LINEAR"
            }
          },
          {
            "_": "Exponential decay.",
            "$": {
              "value": "2",
              "name": "DECAY_EXPONENTIAL"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the symmetry type of bomb forces.\n        \n        \n        \n    ",
        "$": {
          "name": "SymmetryType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Spherical Symmetry.",
            "$": {
              "value": "0",
              "name": "SPHERICAL_SYMMETRY"
            }
          },
          {
            "_": "Cylindrical Symmetry.",
            "$": {
              "value": "1",
              "name": "CYLINDRICAL_SYMMETRY"
            }
          },
          {
            "_": "Planar Symmetry.",
            "$": {
              "value": "2",
              "name": "PLANAR_SYMMETRY"
            }
          }
        ]
      },
      {
        "_": "\n        Controls the way the a particle mesh emitter determines the starting speed and direction of the particles that are emitted.\n        \n        \n        \n    ",
        "$": {
          "name": "VelocityType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Uses the normals of the meshes to determine staring velocity.",
            "$": {
              "value": "0",
              "name": "VELOCITY_USE_NORMALS"
            }
          },
          {
            "_": "Starts particles with a random velocity.",
            "$": {
              "value": "1",
              "name": "VELOCITY_USE_RANDOM"
            }
          },
          {
            "_": "Uses the emission axis to determine initial particle direction?",
            "$": {
              "value": "2",
              "name": "VELOCITY_USE_DIRECTION"
            }
          }
        ]
      },
      {
        "_": "\n        Controls which parts of the mesh that the particles are emitted from.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "EmitFrom",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Emit particles from the vertices of the mesh.",
            "$": {
              "value": "0",
              "name": "EMIT_FROM_VERTICES"
            }
          },
          {
            "_": "Emit particles from the center of the faces of the mesh.",
            "$": {
              "value": "1",
              "name": "EMIT_FROM_FACE_CENTER"
            }
          },
          {
            "_": "Emit particles from the center of the edges of the mesh.",
            "$": {
              "value": "2",
              "name": "EMIT_FROM_EDGE_CENTER"
            }
          },
          {
            "_": "Perhaps randomly emit particles from anywhere on the faces of the mesh?",
            "$": {
              "value": "3",
              "name": "EMIT_FROM_FACE_SURFACE"
            }
          },
          {
            "_": "Perhaps randomly emit particles from anywhere on the edges of the mesh?",
            "$": {
              "value": "4",
              "name": "EMIT_FROM_EDGE_SURFACE"
            }
          }
        ]
      },
      {
        "_": "\n        The type of information that is stored in a texture used by an NiTextureEffect.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "TextureType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Apply a projected light texture. Each light effect is summed before multiplying by the base texture.",
            "$": {
              "value": "0",
              "name": "TEX_PROJECTED_LIGHT"
            }
          },
          {
            "_": "Apply a projected shadow texture. Each shadow effect is multiplied by the base texture.",
            "$": {
              "value": "1",
              "name": "TEX_PROJECTED_SHADOW"
            }
          },
          {
            "_": "Apply an environment map texture. Added to the base texture and light/shadow/decal maps.",
            "$": {
              "value": "2",
              "name": "TEX_ENVIRONMENT_MAP"
            }
          },
          {
            "_": "Apply a fog map texture. Alpha channel is used to blend the color channel with the base texture.",
            "$": {
              "value": "3",
              "name": "TEX_FOG_MAP"
            }
          }
        ]
      },
      {
        "_": "\n        Determines the way that UV texture coordinates are generated.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "CoordGenType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Use planar mapping.",
            "$": {
              "value": "0",
              "name": "CG_WORLD_PARALLEL"
            }
          },
          {
            "_": "Use perspective mapping.",
            "$": {
              "value": "1",
              "name": "CG_WORLD_PERSPECTIVE"
            }
          },
          {
            "_": "Use spherical mapping.",
            "$": {
              "value": "2",
              "name": "CG_SPHERE_MAP"
            }
          },
          {
            "_": "Use specular cube mapping. For NiSourceCubeMap only.",
            "$": {
              "value": "3",
              "name": "CG_SPECULAR_CUBE_MAP"
            }
          },
          {
            "_": "Use diffuse cube mapping. For NiSourceCubeMap only.",
            "$": {
              "value": "4",
              "name": "CG_DIFFUSE_CUBE_MAP"
            }
          }
        ]
      },
      {
        "$": {
          "name": "EndianType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "The numbers are stored in big endian format, such as those used by PowerPC Mac processors.",
            "$": {
              "value": "0",
              "name": "ENDIAN_BIG"
            }
          },
          {
            "_": "The numbers are stored in little endian format, such as those used by Intel and AMD x86 processors.",
            "$": {
              "value": "1",
              "name": "ENDIAN_LITTLE"
            }
          }
        ]
      },
      {
        "_": "\n        Used by NiMaterialColorControllers to select which type of color in the controlled object that will be animated.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "MaterialColor",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Control the ambient color.",
            "$": {
              "value": "0",
              "name": "TC_AMBIENT"
            }
          },
          {
            "_": "Control the diffuse color.",
            "$": {
              "value": "1",
              "name": "TC_DIFFUSE"
            }
          },
          {
            "_": "Control the specular color.",
            "$": {
              "value": "2",
              "name": "TC_SPECULAR"
            }
          },
          {
            "_": "Control the self illumination color.",
            "$": {
              "value": "3",
              "name": "TC_SELF_ILLUM"
            }
          }
        ]
      },
      {
        "_": "\n        Used by NiLightColorControllers to select which type of color in the controlled object that will be animated.\n        \n        \n    ",
        "$": {
          "name": "LightColor",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Control the diffuse color.",
            "$": {
              "value": "0",
              "name": "LC_DIFFUSE"
            }
          },
          {
            "_": "Control the ambient color.",
            "$": {
              "value": "1",
              "name": "LC_AMBIENT"
            }
          }
        ]
      },
      {
        "_": "\n        Used by NiGeometryData to control the volatility of the mesh.\n        Consistency Type is masked to only the upper 4 bits (0xF000). Dirty mask is the lower 12 (0x0FFF) but only used at runtime.\n        \n        \n        \n    ",
        "$": {
          "name": "ConsistencyType",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Mutable Mesh",
            "$": {
              "value": "0x0000",
              "name": "CT_MUTABLE"
            }
          },
          {
            "_": "Static Mesh",
            "$": {
              "value": "0x4000",
              "name": "CT_STATIC"
            }
          },
          {
            "_": "Volatile Mesh",
            "$": {
              "value": "0x8000",
              "name": "CT_VOLATILE"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the way that NiSortAdjustNode modifies the sorting behavior for the subtree below it.\n        \n        \n    ",
        "$": {
          "name": "SortingMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Inherit. Acts identical to NiNode.",
            "$": {
              "value": "0",
              "name": "SORTING_INHERIT"
            }
          },
          {
            "_": "Disables sort on all geometry under this node.",
            "$": {
              "value": "1",
              "name": "SORTING_OFF"
            }
          }
        ]
      },
      {
        "_": "\n        The propagation mode controls scene graph traversal during collision detection operations for NiCollisionData.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "PropagationMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Propagation only occurs as a result of a successful collision.",
            "$": {
              "value": "0",
              "name": "PROPAGATE_ON_SUCCESS"
            }
          },
          {
            "_": "(Deprecated) Propagation only occurs as a result of a failed collision.",
            "$": {
              "value": "1",
              "name": "PROPAGATE_ON_FAILURE"
            }
          },
          {
            "_": "Propagation always occurs regardless of collision result.",
            "$": {
              "value": "2",
              "name": "PROPAGATE_ALWAYS"
            }
          },
          {
            "_": "Propagation never occurs regardless of collision result.",
            "$": {
              "value": "3",
              "name": "PROPAGATE_NEVER"
            }
          }
        ]
      },
      {
        "_": "\n        The collision mode controls the type of collision operation that is to take place for NiCollisionData.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "CollisionMode",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Use Bounding Box",
            "$": {
              "value": "0",
              "name": "CM_USE_OBB"
            }
          },
          {
            "_": "Use Triangles",
            "$": {
              "value": "1",
              "name": "CM_USE_TRI"
            }
          },
          {
            "_": "Use Alternate Bounding Volumes",
            "$": {
              "value": "2",
              "name": "CM_USE_ABV"
            }
          },
          {
            "_": "Indicates that no collision test should be made.",
            "$": {
              "value": "3",
              "name": "CM_NOTEST"
            }
          },
          {
            "_": "Use NiBound",
            "$": {
              "value": "4",
              "name": "CM_USE_NIBOUND"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BoundVolumeType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Default",
            "$": {
              "value": "0xffffffff",
              "name": "BASE_BV"
            }
          },
          {
            "_": "Sphere",
            "$": {
              "value": "0",
              "name": "SPHERE_BV"
            }
          },
          {
            "_": "Box",
            "$": {
              "value": "1",
              "name": "BOX_BV"
            }
          },
          {
            "_": "Capsule",
            "$": {
              "value": "2",
              "name": "CAPSULE_BV"
            }
          },
          {
            "_": "Union",
            "$": {
              "value": "4",
              "name": "UNION_BV"
            }
          },
          {
            "_": "Half Space",
            "$": {
              "value": "5",
              "name": "HALFSPACE_BV"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkResponseType",
          "storage": "byte"
        },
        "option": [
          {
            "_": "Invalid Response",
            "$": {
              "value": "0",
              "name": "RESPONSE_INVALID"
            }
          },
          {
            "_": "Do normal collision resolution",
            "$": {
              "value": "1",
              "name": "RESPONSE_SIMPLE_CONTACT"
            }
          },
          {
            "_": "No collision resolution is performed but listeners are called",
            "$": {
              "value": "2",
              "name": "RESPONSE_REPORTING"
            }
          },
          {
            "_": "Do nothing, ignore all the results.",
            "$": {
              "value": "3",
              "name": "RESPONSE_NONE"
            }
          }
        ]
      },
      {
        "_": "\n        Biped bodypart data used for visibility control of triangles.  Options are Fallout 3, except where marked for Skyrim (uses SBP prefix)\n        Skyrim BP names are listed only for vanilla names, different creatures have different defnitions for naming.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n               \n    ",
        "$": {
          "name": "BSDismemberBodyPartType",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Torso",
            "$": {
              "value": "0",
              "name": "BP_TORSO"
            }
          },
          {
            "_": "Head",
            "$": {
              "value": "1",
              "name": "BP_HEAD"
            }
          },
          {
            "_": "Head 2",
            "$": {
              "value": "2",
              "name": "BP_HEAD2"
            }
          },
          {
            "_": "Left Arm",
            "$": {
              "value": "3",
              "name": "BP_LEFTARM"
            }
          },
          {
            "_": "Left Arm 2",
            "$": {
              "value": "4",
              "name": "BP_LEFTARM2"
            }
          },
          {
            "_": "Right Arm",
            "$": {
              "value": "5",
              "name": "BP_RIGHTARM"
            }
          },
          {
            "_": "Right Arm 2",
            "$": {
              "value": "6",
              "name": "BP_RIGHTARM2"
            }
          },
          {
            "_": "Left Leg",
            "$": {
              "value": "7",
              "name": "BP_LEFTLEG"
            }
          },
          {
            "_": "Left Leg 2",
            "$": {
              "value": "8",
              "name": "BP_LEFTLEG2"
            }
          },
          {
            "_": "Left Leg 3",
            "$": {
              "value": "9",
              "name": "BP_LEFTLEG3"
            }
          },
          {
            "_": "Right Leg",
            "$": {
              "value": "10",
              "name": "BP_RIGHTLEG"
            }
          },
          {
            "_": "Right Leg 2",
            "$": {
              "value": "11",
              "name": "BP_RIGHTLEG2"
            }
          },
          {
            "_": "Right Leg 3",
            "$": {
              "value": "12",
              "name": "BP_RIGHTLEG3"
            }
          },
          {
            "_": "Brain",
            "$": {
              "value": "13",
              "name": "BP_BRAIN"
            }
          },
          {
            "_": "Skyrim, Head(Human), Body(Atronachs,Beasts), Mask(Dragonpriest)",
            "$": {
              "value": "30",
              "name": "SBP_30_HEAD"
            }
          },
          {
            "_": "Skyrim, Hair(human), Far(Dragon), Mask2(Dragonpriest),SkinnedFX(Spriggan)",
            "$": {
              "value": "31",
              "name": "SBP_31_HAIR"
            }
          },
          {
            "_": "Skyrim, Main body, extras(Spriggan)",
            "$": {
              "value": "32",
              "name": "SBP_32_BODY"
            }
          },
          {
            "_": "Skyrim, Hands L/R, BodyToo(Dragonpriest), Legs(Draugr), Arms(Giant)",
            "$": {
              "value": "33",
              "name": "SBP_33_HANDS"
            }
          },
          {
            "_": "Skyrim, Forearms L/R, Beard(Draugr)",
            "$": {
              "value": "34",
              "name": "SBP_34_FOREARMS"
            }
          },
          {
            "_": "Skyrim, Amulet",
            "$": {
              "value": "35",
              "name": "SBP_35_AMULET"
            }
          },
          {
            "_": "Skyrim, Ring",
            "$": {
              "value": "36",
              "name": "SBP_36_RING"
            }
          },
          {
            "_": "Skyrim, Feet L/R",
            "$": {
              "value": "37",
              "name": "SBP_37_FEET"
            }
          },
          {
            "_": "Skyrim, Calves L/R",
            "$": {
              "value": "38",
              "name": "SBP_38_CALVES"
            }
          },
          {
            "_": "Skyrim, Shield",
            "$": {
              "value": "39",
              "name": "SBP_39_SHIELD"
            }
          },
          {
            "_": "Skyrim, Tail(Argonian/Khajiit), Skeleton01(Dragon), FX01(AtronachStorm),FXMist (Dragonpriest), Spit(Chaurus,Spider),SmokeFins(IceWraith)",
            "$": {
              "value": "40",
              "name": "SBP_40_TAIL"
            }
          },
          {
            "_": "Skyrim, Long Hair(Human), Skeleton02(Dragon),FXParticles(Dragonpriest)",
            "$": {
              "value": "41",
              "name": "SBP_41_LONGHAIR"
            }
          },
          {
            "_": "Skyrim, Circlet(Human, MouthFireEffect(Dragon)",
            "$": {
              "value": "42",
              "name": "SBP_42_CIRCLET"
            }
          },
          {
            "_": "Skyrim, Ears",
            "$": {
              "value": "43",
              "name": "SBP_43_EARS"
            }
          },
          {
            "_": "Skyrim, Bloodied dragon head, or NPC face/mouth",
            "$": {
              "value": "44",
              "name": "SBP_44_DRAGON_BLOODHEAD_OR_MOD_MOUTH"
            }
          },
          {
            "_": "Skyrim, Left Bloodied dragon wing, Saddle(Horse), or NPC cape, scarf, shawl, neck-tie, etc.",
            "$": {
              "value": "45",
              "name": "SBP_45_DRAGON_BLOODWINGL_OR_MOD_NECK"
            }
          },
          {
            "_": "Skyrim, Right Bloodied dragon wing, or NPC chest primary or outergarment",
            "$": {
              "value": "46",
              "name": "SBP_46_DRAGON_BLOODWINGR_OR_MOD_CHEST_PRIMARY"
            }
          },
          {
            "_": "Skyrim, Bloodied dragon tail, or NPC backpack/wings/...",
            "$": {
              "value": "47",
              "name": "SBP_47_DRAGON_BLOODTAIL_OR_MOD_BACK"
            }
          },
          {
            "_": "Anything that does not fit in the list",
            "$": {
              "value": "48",
              "name": "SBP_48_MOD_MISC1"
            }
          },
          {
            "_": "Pelvis primary or outergarment",
            "$": {
              "value": "49",
              "name": "SBP_49_MOD_PELVIS_PRIMARY"
            }
          },
          {
            "_": "Skyrim, Decapitated Head",
            "$": {
              "value": "50",
              "name": "SBP_50_DECAPITATEDHEAD"
            }
          },
          {
            "_": "Skyrim, Decapitate, neck gore",
            "$": {
              "value": "51",
              "name": "SBP_51_DECAPITATE"
            }
          },
          {
            "_": "Pelvis secondary or undergarment",
            "$": {
              "value": "52",
              "name": "SBP_52_MOD_PELVIS_SECONDARY"
            }
          },
          {
            "_": "Leg primary or outergarment or right leg",
            "$": {
              "value": "53",
              "name": "SBP_53_MOD_LEG_RIGHT"
            }
          },
          {
            "_": "Leg secondary or undergarment or left leg",
            "$": {
              "value": "54",
              "name": "SBP_54_MOD_LEG_LEFT"
            }
          },
          {
            "_": "Face alternate or jewelry",
            "$": {
              "value": "55",
              "name": "SBP_55_MOD_FACE_JEWELRY"
            }
          },
          {
            "_": "Chest secondary or undergarment",
            "$": {
              "value": "56",
              "name": "SBP_56_MOD_CHEST_SECONDARY"
            }
          },
          {
            "_": "Shoulder",
            "$": {
              "value": "57",
              "name": "SBP_57_MOD_SHOULDER"
            }
          },
          {
            "_": "Arm secondary or undergarment or left arm",
            "$": {
              "value": "58",
              "name": "SBP_58_MOD_ARM_LEFT"
            }
          },
          {
            "_": "Arm primary or outergarment or right arm",
            "$": {
              "value": "59",
              "name": "SBP_59_MOD_ARM_RIGHT"
            }
          },
          {
            "_": "Anything that does not fit in the list",
            "$": {
              "value": "60",
              "name": "SBP_60_MOD_MISC2"
            }
          },
          {
            "_": "Skyrim, FX01(Humanoid)",
            "$": {
              "value": "61",
              "name": "SBP_61_FX01"
            }
          },
          {
            "_": "Section Cap | Head",
            "$": {
              "value": "101",
              "name": "BP_SECTIONCAP_HEAD"
            }
          },
          {
            "_": "Section Cap | Head 2",
            "$": {
              "value": "102",
              "name": "BP_SECTIONCAP_HEAD2"
            }
          },
          {
            "_": "Section Cap | Left Arm",
            "$": {
              "value": "103",
              "name": "BP_SECTIONCAP_LEFTARM"
            }
          },
          {
            "_": "Section Cap | Left Arm 2",
            "$": {
              "value": "104",
              "name": "BP_SECTIONCAP_LEFTARM2"
            }
          },
          {
            "_": "Section Cap | Right Arm",
            "$": {
              "value": "105",
              "name": "BP_SECTIONCAP_RIGHTARM"
            }
          },
          {
            "_": "Section Cap | Right Arm 2",
            "$": {
              "value": "106",
              "name": "BP_SECTIONCAP_RIGHTARM2"
            }
          },
          {
            "_": "Section Cap | Left Leg",
            "$": {
              "value": "107",
              "name": "BP_SECTIONCAP_LEFTLEG"
            }
          },
          {
            "_": "Section Cap | Left Leg 2",
            "$": {
              "value": "108",
              "name": "BP_SECTIONCAP_LEFTLEG2"
            }
          },
          {
            "_": "Section Cap | Left Leg 3",
            "$": {
              "value": "109",
              "name": "BP_SECTIONCAP_LEFTLEG3"
            }
          },
          {
            "_": "Section Cap | Right Leg",
            "$": {
              "value": "110",
              "name": "BP_SECTIONCAP_RIGHTLEG"
            }
          },
          {
            "_": "Section Cap | Right Leg 2",
            "$": {
              "value": "111",
              "name": "BP_SECTIONCAP_RIGHTLEG2"
            }
          },
          {
            "_": "Section Cap | Right Leg 3",
            "$": {
              "value": "112",
              "name": "BP_SECTIONCAP_RIGHTLEG3"
            }
          },
          {
            "_": "Section Cap | Brain",
            "$": {
              "value": "113",
              "name": "BP_SECTIONCAP_BRAIN"
            }
          },
          {
            "_": "Skyrim, Head slot, use on full-face helmets",
            "$": {
              "value": "130",
              "name": "SBP_130_HEAD"
            }
          },
          {
            "_": "Skyrim, Hair slot 1, use on hoods",
            "$": {
              "value": "131",
              "name": "SBP_131_HAIR"
            }
          },
          {
            "_": "Skyrim, Hair slot 2, use for longer hair",
            "$": {
              "value": "141",
              "name": "SBP_141_LONGHAIR"
            }
          },
          {
            "_": "Skyrim, Circlet slot 1, use for circlets",
            "$": {
              "value": "142",
              "name": "SBP_142_CIRCLET"
            }
          },
          {
            "_": "Skyrim, Ear slot",
            "$": {
              "value": "143",
              "name": "SBP_143_EARS"
            }
          },
          {
            "_": "Skyrim, neck gore on head side",
            "$": {
              "value": "150",
              "name": "SBP_150_DECAPITATEDHEAD"
            }
          },
          {
            "_": "Torso Cap | Head",
            "$": {
              "value": "201",
              "name": "BP_TORSOCAP_HEAD"
            }
          },
          {
            "_": "Torso Cap | Head 2",
            "$": {
              "value": "202",
              "name": "BP_TORSOCAP_HEAD2"
            }
          },
          {
            "_": "Torso Cap | Left Arm",
            "$": {
              "value": "203",
              "name": "BP_TORSOCAP_LEFTARM"
            }
          },
          {
            "_": "Torso Cap | Left Arm 2",
            "$": {
              "value": "204",
              "name": "BP_TORSOCAP_LEFTARM2"
            }
          },
          {
            "_": "Torso Cap | Right Arm",
            "$": {
              "value": "205",
              "name": "BP_TORSOCAP_RIGHTARM"
            }
          },
          {
            "_": "Torso Cap | Right Arm 2",
            "$": {
              "value": "206",
              "name": "BP_TORSOCAP_RIGHTARM2"
            }
          },
          {
            "_": "Torso Cap | Left Leg",
            "$": {
              "value": "207",
              "name": "BP_TORSOCAP_LEFTLEG"
            }
          },
          {
            "_": "Torso Cap | Left Leg 2",
            "$": {
              "value": "208",
              "name": "BP_TORSOCAP_LEFTLEG2"
            }
          },
          {
            "_": "Torso Cap | Left Leg 3",
            "$": {
              "value": "209",
              "name": "BP_TORSOCAP_LEFTLEG3"
            }
          },
          {
            "_": "Torso Cap | Right Leg",
            "$": {
              "value": "210",
              "name": "BP_TORSOCAP_RIGHTLEG"
            }
          },
          {
            "_": "Torso Cap | Right Leg 2",
            "$": {
              "value": "211",
              "name": "BP_TORSOCAP_RIGHTLEG2"
            }
          },
          {
            "_": "Torso Cap | Right Leg 3",
            "$": {
              "value": "212",
              "name": "BP_TORSOCAP_RIGHTLEG3"
            }
          },
          {
            "_": "Torso Cap | Brain",
            "$": {
              "value": "213",
              "name": "BP_TORSOCAP_BRAIN"
            }
          },
          {
            "_": "Skyrim, Head slot, use for neck on character head",
            "$": {
              "value": "230",
              "name": "SBP_230_HEAD"
            }
          },
          {
            "_": "Torso Section | Head",
            "$": {
              "value": "1000",
              "name": "BP_TORSOSECTION_HEAD"
            }
          },
          {
            "_": "Torso Section | Head 2",
            "$": {
              "value": "2000",
              "name": "BP_TORSOSECTION_HEAD2"
            }
          },
          {
            "_": "Torso Section | Left Arm",
            "$": {
              "value": "3000",
              "name": "BP_TORSOSECTION_LEFTARM"
            }
          },
          {
            "_": "Torso Section | Left Arm 2",
            "$": {
              "value": "4000",
              "name": "BP_TORSOSECTION_LEFTARM2"
            }
          },
          {
            "_": "Torso Section | Right Arm",
            "$": {
              "value": "5000",
              "name": "BP_TORSOSECTION_RIGHTARM"
            }
          },
          {
            "_": "Torso Section | Right Arm 2",
            "$": {
              "value": "6000",
              "name": "BP_TORSOSECTION_RIGHTARM2"
            }
          },
          {
            "_": "Torso Section | Left Leg",
            "$": {
              "value": "7000",
              "name": "BP_TORSOSECTION_LEFTLEG"
            }
          },
          {
            "_": "Torso Section | Left Leg 2",
            "$": {
              "value": "8000",
              "name": "BP_TORSOSECTION_LEFTLEG2"
            }
          },
          {
            "_": "Torso Section | Left Leg 3",
            "$": {
              "value": "9000",
              "name": "BP_TORSOSECTION_LEFTLEG3"
            }
          },
          {
            "_": "Torso Section | Right Leg",
            "$": {
              "value": "10000",
              "name": "BP_TORSOSECTION_RIGHTLEG"
            }
          },
          {
            "_": "Torso Section | Right Leg 2",
            "$": {
              "value": "11000",
              "name": "BP_TORSOSECTION_RIGHTLEG2"
            }
          },
          {
            "_": "Torso Section | Right Leg 3",
            "$": {
              "value": "12000",
              "name": "BP_TORSOSECTION_RIGHTLEG3"
            }
          },
          {
            "_": "Torso Section | Brain",
            "$": {
              "value": "13000",
              "name": "BP_TORSOSECTION_BRAIN"
            }
          }
        ]
      },
      {
        "_": "\n        Values for configuring the shader type in a BSLightingShaderProperty\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSLightingShaderPropertyShaderType",
          "storage": "uint",
          "prefix": "ST"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "Default"
            }
          },
          {
            "_": "Enables EnvMap Mask(TS6), EnvMap Scale",
            "$": {
              "value": "1",
              "name": "Environment Map"
            }
          },
          {
            "_": "Enables Glow(TS3)",
            "$": {
              "value": "2",
              "name": "Glow Shader"
            }
          },
          {
            "_": "Enables Height(TS4)",
            "$": {
              "value": "3",
              "name": "Parallax"
            }
          },
          {
            "_": "Enables Detail(TS4), Tint(TS7)",
            "$": {
              "value": "4",
              "name": "Face Tint"
            }
          },
          {
            "_": "Enables Skin Tint Color",
            "$": {
              "value": "5",
              "name": "Skin Tint"
            }
          },
          {
            "_": "Enables Hair Tint Color",
            "$": {
              "value": "6",
              "name": "Hair Tint"
            }
          },
          {
            "_": "Enables Height(TS4), Max Passes, Scale. Unimplemented.",
            "$": {
              "value": "7",
              "name": "Parallax Occ"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "Multitexture Landscape"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "LOD Landscape"
            }
          },
          {
            "$": {
              "value": "10",
              "name": "Snow"
            }
          },
          {
            "_": "Enables EnvMap Mask(TS6), Layer(TS7), Parallax Layer Thickness, Parallax Refraction Scale, Parallax Inner Layer U Scale, Parallax Inner Layer V Scale, EnvMap Scale",
            "$": {
              "value": "11",
              "name": "MultiLayer Parallax"
            }
          },
          {
            "$": {
              "value": "12",
              "name": "Tree Anim"
            }
          },
          {
            "$": {
              "value": "13",
              "name": "LOD Objects"
            }
          },
          {
            "_": "Enables SparkleParams",
            "$": {
              "value": "14",
              "name": "Sparkle Snow"
            }
          },
          {
            "$": {
              "value": "15",
              "name": "LOD Objects HD"
            }
          },
          {
            "_": "Enables EnvMap Mask(TS6), Eye EnvMap Scale",
            "$": {
              "value": "16",
              "name": "Eye Envmap"
            }
          },
          {
            "$": {
              "value": "17",
              "name": "Cloud"
            }
          },
          {
            "$": {
              "value": "18",
              "name": "LOD Landscape Noise"
            }
          },
          {
            "$": {
              "value": "19",
              "name": "Multitexture Landscape LOD Blend"
            }
          },
          {
            "$": {
              "value": "20",
              "name": "FO4 Dismemberment"
            }
          }
        ]
      },
      {
        "_": "\n        An unsigned 32-bit integer, describing which float variable in BSEffectShaderProperty to animate.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "EffectShaderControlledVariable",
          "storage": "uint",
          "prefix": "ESCV"
        },
        "option": [
          {
            "_": "EmissiveMultiple.",
            "$": {
              "value": "0",
              "name": "EmissiveMultiple"
            }
          },
          {
            "_": "Falloff Start Angle (degrees).",
            "$": {
              "value": "1",
              "name": "Falloff Start Angle"
            }
          },
          {
            "_": "Falloff Stop Angle (degrees).",
            "$": {
              "value": "2",
              "name": "Falloff Stop Angle"
            }
          },
          {
            "_": "Falloff Start Opacity.",
            "$": {
              "value": "3",
              "name": "Falloff Start Opacity"
            }
          },
          {
            "_": "Falloff Stop Opacity.",
            "$": {
              "value": "4",
              "name": "Falloff Stop Opacity"
            }
          },
          {
            "_": "Alpha Transparency (Emissive alpha?).",
            "$": {
              "value": "5",
              "name": "Alpha Transparency"
            }
          },
          {
            "_": "U Offset.",
            "$": {
              "value": "6",
              "name": "U Offset"
            }
          },
          {
            "_": "U Scale.",
            "$": {
              "value": "7",
              "name": "U Scale"
            }
          },
          {
            "_": "V Offset.",
            "$": {
              "value": "8",
              "name": "V Offset"
            }
          },
          {
            "_": "V Scale.",
            "$": {
              "value": "9",
              "name": "V Scale"
            }
          }
        ]
      },
      {
        "_": "\n        An unsigned 32-bit integer, describing which color in BSEffectShaderProperty to animate.\n        \n    ",
        "$": {
          "name": "EffectShaderControlledColor",
          "storage": "uint",
          "prefix": "ECSC"
        },
        "option": [
          {
            "_": "Emissive Color.",
            "$": {
              "value": "0",
              "name": "Emissive Color"
            }
          }
        ]
      },
      {
        "_": "\n        An unsigned 32-bit integer, describing which float variable in BSLightingShaderProperty to animate.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "LightingShaderControlledVariable",
          "storage": "uint",
          "prefix": "LSCV"
        },
        "option": [
          {
            "_": "The amount of distortion.",
            "$": {
              "value": "0",
              "name": "Refraction Strength"
            }
          },
          {
            "_": "Environment Map Scale.",
            "$": {
              "value": "8",
              "name": "Environment Map Scale"
            }
          },
          {
            "_": "Glossiness.",
            "$": {
              "value": "9",
              "name": "Glossiness"
            }
          },
          {
            "_": "Specular Strength.",
            "$": {
              "value": "10",
              "name": "Specular Strength"
            }
          },
          {
            "_": "Emissive Multiple.",
            "$": {
              "value": "11",
              "name": "Emissive Multiple"
            }
          },
          {
            "_": "Alpha.",
            "$": {
              "value": "12",
              "name": "Alpha"
            }
          },
          {
            "_": "U Offset.",
            "$": {
              "value": "20",
              "name": "U Offset"
            }
          },
          {
            "_": "U Scale.",
            "$": {
              "value": "21",
              "name": "U Scale"
            }
          },
          {
            "_": "V Offset.",
            "$": {
              "value": "22",
              "name": "V Offset"
            }
          },
          {
            "_": "V Scale.",
            "$": {
              "value": "23",
              "name": "V Scale"
            }
          }
        ]
      },
      {
        "_": "\n        An unsigned 32-bit integer, describing which color in BSLightingShaderProperty to animate.\n        \n        \n    ",
        "$": {
          "name": "LightingShaderControlledColor",
          "storage": "uint",
          "prefix": "LSCC"
        },
        "option": [
          {
            "_": "Specular Color.",
            "$": {
              "value": "0",
              "name": "Specular Color"
            }
          },
          {
            "_": "Emissive Color.",
            "$": {
              "value": "1",
              "name": "Emissive Color"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Describes the type of bhkConstraint.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkConstraintType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "A ball and socket constraint.",
            "$": {
              "value": "0",
              "name": "BallAndSocket"
            }
          },
          {
            "_": "A hinge constraint.",
            "$": {
              "value": "1",
              "name": "Hinge"
            }
          },
          {
            "_": "A limited hinge constraint.",
            "$": {
              "value": "2",
              "name": "Limited Hinge"
            }
          },
          {
            "_": "A prismatic constraint.",
            "$": {
              "value": "6",
              "name": "Prismatic"
            }
          },
          {
            "_": "A ragdoll constraint.",
            "$": {
              "value": "7",
              "name": "Ragdoll"
            }
          },
          {
            "_": "A stiff spring constraint.",
            "$": {
              "value": "8",
              "name": "StiffSpring"
            }
          },
          {
            "_": "A malleable constraint.",
            "$": {
              "value": "13",
              "name": "Malleable"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the order of scaling and rotation matrices. Translate, Scale, Rotation, Center are from TexDesc.\n        Back = inverse of Center. FromMaya = inverse of the V axis with a positive translation along V of 1 unit.\n        \n        \n        \n    ",
        "$": {
          "name": "TransformMethod",
          "storage": "uint",
          "prefix": "TM"
        },
        "option": [
          {
            "_": "Center * Rotation * Back * Translate * Scale",
            "$": {
              "value": "0",
              "name": "Maya Deprecated"
            }
          },
          {
            "_": "Center * Scale * Rotation * Translate * Back",
            "$": {
              "value": "1",
              "name": "Max"
            }
          },
          {
            "_": "Center * Rotation * Back * FromMaya * Translate * Scale",
            "$": {
              "value": "2",
              "name": "Maya"
            }
          }
        ]
      },
      {
        "_": "\n\t\tBethesda Animation. Animation type used on this position. This specifies the function of this position.\n\t\t\n\t\t\n\t\t\n\t",
        "$": {
          "name": "AnimationType",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Actor use sit animation.",
            "$": {
              "value": "1",
              "name": "Sit"
            }
          },
          {
            "_": "Actor use sleep animation.",
            "$": {
              "value": "2",
              "name": "Sleep"
            }
          },
          {
            "_": "Used for lean animations?",
            "$": {
              "value": "4",
              "name": "Lean"
            }
          }
        ]
      },
      {
        "$": {
          "name": "MotorType",
          "storage": "byte"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "MOTOR_NONE"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "MOTOR_POSITION"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "MOTOR_VELOCITY"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "MOTOR_SPRING"
            }
          }
        ]
      },
      {
        "_": "\n        Determines how the raw image data is stored in NiRawImageData.\n        \n        \n    ",
        "$": {
          "name": "ImageType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Colors store red, blue, and green components.",
            "$": {
              "value": "1",
              "name": "RGB"
            }
          },
          {
            "_": "Colors store red, blue, green, and alpha components.",
            "$": {
              "value": "2",
              "name": "RGBA"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BroadPhaseType",
          "storage": "byte"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "BROAD_PHASE_INVALID"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "BROAD_PHASE_ENTITY"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "BROAD_PHASE_PHANTOM"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "BROAD_PHASE_BORDER"
            }
          }
        ]
      },
      {
        "$": {
          "name": "InterpBlendFlags",
          "storage": "byte"
        },
        "option": [
          {
            "_": "MANAGER_CONTROLLED",
            "$": {
              "value": "1",
              "name": "MANAGER_CONTROLLED"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxJointType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_JOINT_PRISMATIC",
              "value": "0"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_REVOLUTE",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_CYLINDRICAL",
              "value": "2"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_SPHERICAL",
              "value": "3"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_POINT_ON_LINE",
              "value": "4"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_POINT_IN_PLANE",
              "value": "5"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_DISTANCE",
              "value": "6"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_PULLEY",
              "value": "7"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_FIXED",
              "value": "8"
            }
          },
          {
            "$": {
              "name": "NX_JOINT_D6",
              "value": "9"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxD6JointMotion",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_D6JOINT_MOTION_LOCKED",
              "value": "0"
            }
          },
          {
            "$": {
              "name": "NX_D6JOINT_MOTION_LIMITED",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_D6JOINT_MOTION_FREE",
              "value": "2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxD6JointDriveType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_D6JOINT_DRIVE_POSITION",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_D6JOINT_DRIVE_VELOCITY",
              "value": "2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxJointProjectionMode",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_JPM_NONE",
              "value": "0"
            }
          },
          {
            "$": {
              "name": "NX_JPM_POINT_MINDIST",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_JPM_LINEAR_MINDIST",
              "value": "2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxShapeType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_SHAPE_PLANE",
              "value": "0"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_SPHERE",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_BOX",
              "value": "2"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_CAPSULE",
              "value": "3"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_WHEEL",
              "value": "4"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_CONVEX",
              "value": "5"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_MESH",
              "value": "6"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_HEIGHTFIELD",
              "value": "7"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_RAW_MESH",
              "value": "8"
            }
          },
          {
            "$": {
              "name": "NX_SHAPE_COMPOUND",
              "value": "9"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxCombineMode",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "name": "NX_CM_AVERAGE",
              "value": "0"
            }
          },
          {
            "$": {
              "name": "NX_CM_MIN",
              "value": "1"
            }
          },
          {
            "$": {
              "name": "NX_CM_MULTIPLY",
              "value": "2"
            }
          },
          {
            "$": {
              "name": "NX_CM_MAX",
              "value": "3"
            }
          }
        ]
      },
      {
        "_": "\n        The type of animation interpolation (blending) that will be used on the associated key frames.\n        \n        \n        \n\t\t\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Tall Grass Shader",
            "$": {
              "value": "0",
              "name": "SHADER_TALL_GRASS"
            }
          },
          {
            "_": "Standard Lighting Shader",
            "$": {
              "value": "1",
              "name": "SHADER_DEFAULT"
            }
          },
          {
            "_": "Sky Shader",
            "$": {
              "value": "10",
              "name": "SHADER_SKY"
            }
          },
          {
            "_": "Skin Shader",
            "$": {
              "value": "14",
              "name": "SHADER_SKIN"
            }
          },
          {
            "_": "Water Shader",
            "$": {
              "value": "17",
              "name": "SHADER_WATER"
            }
          },
          {
            "_": "Lighting 3.0 Shader",
            "$": {
              "value": "29",
              "name": "SHADER_LIGHTING30"
            }
          },
          {
            "_": "Tiled Shader",
            "$": {
              "value": "32",
              "name": "SHADER_TILE"
            }
          },
          {
            "_": "No Lighting Shader",
            "$": {
              "value": "33",
              "name": "SHADER_NOLIGHTING"
            }
          }
        ]
      },
      {
        "_": "\n        Sets what sky function this object fulfills in BSSkyShaderProperty or SkyShaderProperty.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SkyObjectType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "BSSM_Sky_Texture",
            "$": {
              "value": "0",
              "name": "BSSM_SKY_TEXTURE"
            }
          },
          {
            "_": "BSSM_Sky_Sunglare",
            "$": {
              "value": "1",
              "name": "BSSM_SKY_SUNGLARE"
            }
          },
          {
            "_": "BSSM_Sky",
            "$": {
              "value": "2",
              "name": "BSSM_SKY"
            }
          },
          {
            "_": "BSSM_Sky_Clouds",
            "$": {
              "value": "3",
              "name": "BSSM_SKY_CLOUDS"
            }
          },
          {
            "_": "BSSM_Sky_Stars",
            "$": {
              "value": "5",
              "name": "BSSM_SKY_STARS"
            }
          },
          {
            "_": "BSSM_Sky_Moon_Stars_Mask",
            "$": {
              "value": "7",
              "name": "BSSM_SKY_MOON_STARS_MASK"
            }
          }
        ]
      },
      {
        "_": "\n        Anim note types.\n        \n        \n        \n    ",
        "$": {
          "name": "AnimNoteType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "ANT_INVALID",
            "$": {
              "value": "0",
              "name": "ANT_INVALID"
            }
          },
          {
            "_": "ANT_GRABIK",
            "$": {
              "value": "1",
              "name": "ANT_GRABIK"
            }
          },
          {
            "_": "ANT_LOOKIK",
            "$": {
              "value": "2",
              "name": "ANT_LOOKIK"
            }
          }
        ]
      },
      {
        "_": "\n        Culling modes for multi bound nodes.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSCPCullingType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Normal",
            "$": {
              "value": "0",
              "name": "BSCP_CULL_NORMAL"
            }
          },
          {
            "_": "All Pass",
            "$": {
              "value": "1",
              "name": "BSCP_CULL_ALLPASS"
            }
          },
          {
            "_": "All Fail",
            "$": {
              "value": "2",
              "name": "BSCP_CULL_ALLFAIL"
            }
          },
          {
            "_": "Ignore Multi Bounds",
            "$": {
              "value": "3",
              "name": "BSCP_CULL_IGNOREMULTIBOUNDS"
            }
          },
          {
            "_": "Force Multi Bounds No Update",
            "$": {
              "value": "4",
              "name": "BSCP_CULL_FORCEMULTIBOUNDSNOUPDATE"
            }
          }
        ]
      },
      {
        "_": "\n        Sets how objects are to be cloned.\n        \n        \n        \n    ",
        "$": {
          "name": "CloningBehavior",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Share this object pointer with the newly cloned scene.",
            "$": {
              "value": "0",
              "name": "CLONING_SHARE"
            }
          },
          {
            "_": "Create an exact duplicate of this object for use with the newly cloned scene.",
            "$": {
              "value": "1",
              "name": "CLONING_COPY"
            }
          },
          {
            "_": "Create a copy of this object for use with the newly cloned stream, leaving some of the data to be written later.",
            "$": {
              "value": "2",
              "name": "CLONING_BLANK_COPY"
            }
          }
        ]
      },
      {
        "_": "\n        The data format of components.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "ComponentFormat",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Unknown, or don't care, format.",
            "$": {
              "value": "0x00000000",
              "name": "F_UNKNOWN"
            }
          },
          {
            "$": {
              "value": "0x00010101",
              "name": "F_INT8_1"
            }
          },
          {
            "$": {
              "value": "0x00020102",
              "name": "F_INT8_2"
            }
          },
          {
            "$": {
              "value": "0x00030103",
              "name": "F_INT8_3"
            }
          },
          {
            "$": {
              "value": "0x00040104",
              "name": "F_INT8_4"
            }
          },
          {
            "$": {
              "value": "0x00010105",
              "name": "F_UINT8_1"
            }
          },
          {
            "$": {
              "value": "0x00020106",
              "name": "F_UINT8_2"
            }
          },
          {
            "$": {
              "value": "0x00030107",
              "name": "F_UINT8_3"
            }
          },
          {
            "$": {
              "value": "0x00040108",
              "name": "F_UINT8_4"
            }
          },
          {
            "$": {
              "value": "0x00010109",
              "name": "F_NORMINT8_1"
            }
          },
          {
            "$": {
              "value": "0x0002010A",
              "name": "F_NORMINT8_2"
            }
          },
          {
            "$": {
              "value": "0x0003010B",
              "name": "F_NORMINT8_3"
            }
          },
          {
            "$": {
              "value": "0x0004010C",
              "name": "F_NORMINT8_4"
            }
          },
          {
            "$": {
              "value": "0x0001010D",
              "name": "F_NORMUINT8_1"
            }
          },
          {
            "$": {
              "value": "0x0002010E",
              "name": "F_NORMUINT8_2"
            }
          },
          {
            "$": {
              "value": "0x0003010F",
              "name": "F_NORMUINT8_3"
            }
          },
          {
            "$": {
              "value": "0x00040110",
              "name": "F_NORMUINT8_4"
            }
          },
          {
            "$": {
              "value": "0x00010211",
              "name": "F_INT16_1"
            }
          },
          {
            "$": {
              "value": "0x00020212",
              "name": "F_INT16_2"
            }
          },
          {
            "$": {
              "value": "0x00030213",
              "name": "F_INT16_3"
            }
          },
          {
            "$": {
              "value": "0x00040214",
              "name": "F_INT16_4"
            }
          },
          {
            "$": {
              "value": "0x00010215",
              "name": "F_UINT16_1"
            }
          },
          {
            "$": {
              "value": "0x00020216",
              "name": "F_UINT16_2"
            }
          },
          {
            "$": {
              "value": "0x00030217",
              "name": "F_UINT16_3"
            }
          },
          {
            "$": {
              "value": "0x00040218",
              "name": "F_UINT16_4"
            }
          },
          {
            "$": {
              "value": "0x00010219",
              "name": "F_NORMINT16_1"
            }
          },
          {
            "$": {
              "value": "0x0002021A",
              "name": "F_NORMINT16_2"
            }
          },
          {
            "$": {
              "value": "0x0003021B",
              "name": "F_NORMINT16_3"
            }
          },
          {
            "$": {
              "value": "0x0004021C",
              "name": "F_NORMINT16_4"
            }
          },
          {
            "$": {
              "value": "0x0001021D",
              "name": "F_NORMUINT16_1"
            }
          },
          {
            "$": {
              "value": "0x0002021E",
              "name": "F_NORMUINT16_2"
            }
          },
          {
            "$": {
              "value": "0x0003021F",
              "name": "F_NORMUINT16_3"
            }
          },
          {
            "$": {
              "value": "0x00040220",
              "name": "F_NORMUINT16_4"
            }
          },
          {
            "$": {
              "value": "0x00010421",
              "name": "F_INT32_1"
            }
          },
          {
            "$": {
              "value": "0x00020422",
              "name": "F_INT32_2"
            }
          },
          {
            "$": {
              "value": "0x00030423",
              "name": "F_INT32_3"
            }
          },
          {
            "$": {
              "value": "0x00040424",
              "name": "F_INT32_4"
            }
          },
          {
            "$": {
              "value": "0x00010425",
              "name": "F_UINT32_1"
            }
          },
          {
            "$": {
              "value": "0x00020426",
              "name": "F_UINT32_2"
            }
          },
          {
            "$": {
              "value": "0x00030427",
              "name": "F_UINT32_3"
            }
          },
          {
            "$": {
              "value": "0x00040428",
              "name": "F_UINT32_4"
            }
          },
          {
            "$": {
              "value": "0x00010429",
              "name": "F_NORMINT32_1"
            }
          },
          {
            "$": {
              "value": "0x0002042A",
              "name": "F_NORMINT32_2"
            }
          },
          {
            "$": {
              "value": "0x0003042B",
              "name": "F_NORMINT32_3"
            }
          },
          {
            "$": {
              "value": "0x0004042C",
              "name": "F_NORMINT32_4"
            }
          },
          {
            "$": {
              "value": "0x0001042D",
              "name": "F_NORMUINT32_1"
            }
          },
          {
            "$": {
              "value": "0x0002042E",
              "name": "F_NORMUINT32_2"
            }
          },
          {
            "$": {
              "value": "0x0003042F",
              "name": "F_NORMUINT32_3"
            }
          },
          {
            "$": {
              "value": "0x00040430",
              "name": "F_NORMUINT32_4"
            }
          },
          {
            "$": {
              "value": "0x00010231",
              "name": "F_FLOAT16_1"
            }
          },
          {
            "$": {
              "value": "0x00020232",
              "name": "F_FLOAT16_2"
            }
          },
          {
            "$": {
              "value": "0x00030233",
              "name": "F_FLOAT16_3"
            }
          },
          {
            "$": {
              "value": "0x00040234",
              "name": "F_FLOAT16_4"
            }
          },
          {
            "$": {
              "value": "0x00010435",
              "name": "F_FLOAT32_1"
            }
          },
          {
            "$": {
              "value": "0x00020436",
              "name": "F_FLOAT32_2"
            }
          },
          {
            "$": {
              "value": "0x00030437",
              "name": "F_FLOAT32_3"
            }
          },
          {
            "$": {
              "value": "0x00040438",
              "name": "F_FLOAT32_4"
            }
          },
          {
            "$": {
              "value": "0x00010439",
              "name": "F_UINT_10_10_10_L1"
            }
          },
          {
            "$": {
              "value": "0x0001043A",
              "name": "F_NORMINT_10_10_10_L1"
            }
          },
          {
            "$": {
              "value": "0x0001043B",
              "name": "F_NORMINT_11_11_10"
            }
          },
          {
            "$": {
              "value": "0x0004013C",
              "name": "F_NORMUINT8_4_BGRA"
            }
          },
          {
            "$": {
              "value": "0x0001043D",
              "name": "F_NORMINT_10_10_10_2"
            }
          },
          {
            "$": {
              "value": "0x0001043E",
              "name": "F_UINT_10_10_10_2"
            }
          }
        ]
      },
      {
        "_": "\n        Determines how a data stream is used?\n        \n        \n        \n        \n    ",
        "$": {
          "name": "DataStreamUsage",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "USAGE_VERTEX_INDEX"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "USAGE_VERTEX"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "USAGE_SHADER_CONSTANT"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "USAGE_USER"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the type of primitives stored in a mesh object.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "MeshPrimitiveType",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Triangle primitive type.",
            "$": {
              "value": "0",
              "name": "MESH_PRIMITIVE_TRIANGLES"
            }
          },
          {
            "_": "Triangle strip primitive type.",
            "$": {
              "value": "1",
              "name": "MESH_PRIMITIVE_TRISTRIPS"
            }
          },
          {
            "_": "Lines primitive type.",
            "$": {
              "value": "2",
              "name": "MESH_PRIMITIVE_LINES"
            }
          },
          {
            "_": "Line strip primitive type.",
            "$": {
              "value": "3",
              "name": "MESH_PRIMITIVE_LINESTRIPS"
            }
          },
          {
            "_": "Quadrilateral primitive type.",
            "$": {
              "value": "4",
              "name": "MESH_PRIMITIVE_QUADS"
            }
          },
          {
            "_": "Point primitive type.",
            "$": {
              "value": "5",
              "name": "MESH_PRIMITIVE_POINTS"
            }
          }
        ]
      },
      {
        "_": "\n        A sync point corresponds to a particular stage in per-frame processing.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "SyncPoint",
          "storage": "ushort"
        },
        "option": [
          {
            "_": "Synchronize for any sync points that the modifier supports.",
            "$": {
              "value": "0x8000",
              "name": "SYNC_ANY"
            }
          },
          {
            "_": "Synchronize when an object is updated.",
            "$": {
              "value": "0x8010",
              "name": "SYNC_UPDATE"
            }
          },
          {
            "_": "Synchronize when an entire scene graph has been updated.",
            "$": {
              "value": "0x8020",
              "name": "SYNC_POST_UPDATE"
            }
          },
          {
            "_": "Synchronize when an object is determined to be potentially visible.",
            "$": {
              "value": "0x8030",
              "name": "SYNC_VISIBLE"
            }
          },
          {
            "_": "Synchronize when an object is rendered.",
            "$": {
              "value": "0x8040",
              "name": "SYNC_RENDER"
            }
          },
          {
            "_": "Synchronize when a physics simulation step is about to begin.",
            "$": {
              "value": "0x8050",
              "name": "SYNC_PHYSICS_SIMULATE"
            }
          },
          {
            "_": "Synchronize when a physics simulation step has produced results.",
            "$": {
              "value": "0x8060",
              "name": "SYNC_PHYSICS_COMPLETED"
            }
          },
          {
            "_": "Synchronize after all data necessary to calculate reflections is ready.",
            "$": {
              "value": "0x8070",
              "name": "SYNC_REFLECTIONS"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the various methods that may be used to specify the orientation of the particles.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "AlignMethod",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "ALIGN_INVALID"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "ALIGN_PER_PARTICLE"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "ALIGN_LOCAL_FIXED"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "ALIGN_LOCAL_POSITION"
            }
          },
          {
            "$": {
              "value": "9",
              "name": "ALIGN_LOCAL_VELOCITY"
            }
          },
          {
            "$": {
              "value": "16",
              "name": "ALIGN_CAMERA"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PSLoopBehavior",
          "ver1": "20.5.0.0",
          "storage": "uint"
        },
        "option": [
          {
            "_": "Key times map such that the first key occurs at the birth of the particle, and times later than the last key get the last key value.",
            "$": {
              "name": "PS_LOOP_CLAMP_BIRTH",
              "value": "0"
            }
          },
          {
            "_": "Key times map such that the last key occurs at the death of the particle, and times before the initial key time get the value of the initial key.",
            "$": {
              "name": "PS_LOOP_CLAMP_DEATH",
              "value": "1"
            }
          },
          {
            "_": "Scale the animation to fit the particle lifetime, so that the first key is age zero, and the last key comes at the particle death.",
            "$": {
              "name": "PS_LOOP_AGESCALE",
              "value": "2"
            }
          },
          {
            "_": "The time is converted to one within the time range represented by the keys, as if the key sequence loops forever in the past and future.",
            "$": {
              "name": "PS_LOOP_LOOP",
              "value": "3"
            }
          },
          {
            "_": "The time is reflection looped, as if the keys played forward then backward the forward then backward etc for all time.",
            "$": {
              "name": "PS_LOOP_REFLECT",
              "value": "4"
            }
          }
        ]
      },
      {
        "_": "\n        This is used by the Floodgate kernel to determine which NiPSForceHelpers functions to call.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "PSForceType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "FORCE_BOMB"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "FORCE_DRAG"
            }
          },
          {
            "$": {
              "value": "2",
              "name": "FORCE_AIR_FIELD"
            }
          },
          {
            "$": {
              "value": "3",
              "name": "FORCE_DRAG_FIELD"
            }
          },
          {
            "$": {
              "value": "4",
              "name": "FORCE_GRAVITY_FIELD"
            }
          },
          {
            "$": {
              "value": "5",
              "name": "FORCE_RADIAL_FIELD"
            }
          },
          {
            "$": {
              "value": "6",
              "name": "FORCE_TURBULENCE_FIELD"
            }
          },
          {
            "$": {
              "value": "7",
              "name": "FORCE_VORTEX_FIELD"
            }
          },
          {
            "$": {
              "value": "8",
              "name": "FORCE_GRAVITY"
            }
          }
        ]
      },
      {
        "_": "\n        This is used by the Floodgate kernel to determine which NiPSColliderHelpers functions to call.\n        \n        \n    ",
        "$": {
          "name": "ColliderType",
          "storage": "uint"
        },
        "option": [
          {
            "$": {
              "value": "0",
              "name": "COLLIDER_PLANAR"
            }
          },
          {
            "$": {
              "value": "1",
              "name": "COLLIDER_SPHERICAL"
            }
          }
        ]
      }
    ],
    "compound": [
      {
        "_": "\n        A string of given length.\n        \n        \n    ",
        "$": {
          "name": "SizedString"
        },
        "add": [
          {
            "_": "The string length.",
            "$": {
              "name": "Length",
              "type": "uint"
            }
          },
          {
            "_": "The string itself.",
            "$": {
              "name": "Value",
              "type": "char",
              "arr1": "Length"
            }
          }
        ]
      },
      {
        "_": "\n        A string type.\n        \n        \n    ",
        "$": {
          "name": "string"
        },
        "add": [
          {
            "_": "The normal string.",
            "$": {
              "name": "String",
              "type": "SizedString",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "The string index.",
            "$": {
              "name": "Index",
              "type": "StringIndex",
              "ver1": "20.1.0.3"
            }
          }
        ]
      },
      {
        "_": "\n        An array of bytes.\n        \n        \n    ",
        "$": {
          "name": "ByteArray"
        },
        "add": [
          {
            "_": "The number of bytes in this array",
            "$": {
              "name": "Data Size",
              "type": "uint"
            }
          },
          {
            "_": "The bytes which make up the array",
            "$": {
              "name": "Data",
              "type": "byte",
              "arr1": "Data Size"
            }
          }
        ]
      },
      {
        "_": "\n        An array of bytes.\n        \n        \n        \n    ",
        "$": {
          "name": "ByteMatrix"
        },
        "add": [
          {
            "_": "The number of bytes in this array",
            "$": {
              "name": "Data Size 1",
              "type": "uint"
            }
          },
          {
            "_": "The number of bytes in this array",
            "$": {
              "name": "Data Size 2",
              "type": "uint"
            }
          },
          {
            "_": "The bytes which make up the array",
            "$": {
              "name": "Data",
              "type": "byte",
              "arr1": "Data Size 2",
              "arr2": "Data Size 1"
            }
          }
        ]
      },
      {
        "_": "\n        A color without alpha (red, green, blue).\n        \n        \n        \n    ",
        "$": {
          "name": "Color3"
        },
        "add": [
          {
            "_": "Red color component.",
            "$": {
              "name": "r",
              "type": "float"
            }
          },
          {
            "_": "Green color component.",
            "$": {
              "name": "g",
              "type": "float"
            }
          },
          {
            "_": "Blue color component.",
            "$": {
              "name": "b",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A color without alpha (red, green, blue).\n        \n        \n        \n    ",
        "$": {
          "name": "ByteColor3"
        },
        "add": [
          {
            "_": "Red color component.",
            "$": {
              "name": "r",
              "type": "byte"
            }
          },
          {
            "_": "Green color component.",
            "$": {
              "name": "g",
              "type": "byte"
            }
          },
          {
            "_": "Blue color component.",
            "$": {
              "name": "b",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        A color with alpha (red, green, blue, alpha).\n        \n        \n        \n        \n    ",
        "$": {
          "name": "Color4"
        },
        "add": [
          {
            "_": "Red component.",
            "$": {
              "name": "r",
              "type": "float"
            }
          },
          {
            "_": "Green component.",
            "$": {
              "name": "g",
              "type": "float"
            }
          },
          {
            "_": "Blue component.",
            "$": {
              "name": "b",
              "type": "float"
            }
          },
          {
            "_": "Alpha.",
            "$": {
              "name": "a",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A color with alpha (red, green, blue, alpha).\n        \n        \n        \n        \n    ",
        "$": {
          "name": "ByteColor4"
        },
        "add": [
          {
            "_": "Red color component.",
            "$": {
              "name": "r",
              "type": "byte"
            }
          },
          {
            "_": "Green color component.",
            "$": {
              "name": "g",
              "type": "byte"
            }
          },
          {
            "_": "Blue color component.",
            "$": {
              "name": "b",
              "type": "byte"
            }
          },
          {
            "_": "Alpha color component.",
            "$": {
              "name": "a",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        A string that contains the path to a file.\n        \n        \n    ",
        "$": {
          "name": "FilePath"
        },
        "add": [
          {
            "_": "The normal string.",
            "$": {
              "name": "String",
              "type": "SizedString",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "The string index.",
            "$": {
              "name": "Index",
              "type": "StringIndex",
              "ver1": "20.1.0.3"
            }
          }
        ]
      },
      {
        "_": "\n        The NIF file footer.\n        \n        \n    ",
        "$": {
          "name": "Footer"
        },
        "add": [
          {
            "_": "The number of root references.",
            "$": {
              "name": "Num Roots",
              "type": "uint",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "List of root NIF objects. If there is a camera, for 1st person view, then this NIF object is referred to as well in this list, even if it is not a root object (usually we want the camera to be attached to the Bip Head node).",
            "$": {
              "name": "Roots",
              "type": "Ref",
              "template": "NiObject",
              "arr1": "Num Roots",
              "ver1": "3.3.0.13"
            }
          }
        ]
      },
      {
        "_": "\n        The distance range where a specific level of detail applies.\n        \n        \n        \n    ",
        "$": {
          "name": "LODRange"
        },
        "add": [
          {
            "_": "Begining of range.",
            "$": {
              "name": "Near Extent",
              "type": "float"
            }
          },
          {
            "_": "End of Range.",
            "$": {
              "name": "Far Extent",
              "type": "float"
            }
          },
          {
            "_": "Unknown (0,0,0).",
            "$": {
              "name": "Unknown Ints",
              "type": "uint",
              "arr1": "3",
              "ver2": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        Group of vertex indices of vertices that match.\n        \n        \n    ",
        "$": {
          "name": "MatchGroup"
        },
        "add": [
          {
            "_": "Number of vertices in this group.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "The vertex indices.",
            "$": {
              "name": "Vertex Indices",
              "type": "ushort",
              "arr1": "Num Vertices"
            }
          }
        ]
      },
      {
        "_": "\n        A vector in 3D space (x,y,z).\n        \n        \n        \n    ",
        "$": {
          "name": "ByteVector3"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "x",
              "type": "byte"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "y",
              "type": "byte"
            }
          },
          {
            "_": "Third coordinate.",
            "$": {
              "name": "z",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        A vector in 3D space (x,y,z).\n        \n        \n        \n    ",
        "$": {
          "name": "HalfVector3"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "x",
              "type": "hfloat"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "y",
              "type": "hfloat"
            }
          },
          {
            "_": "Third coordinate.",
            "$": {
              "name": "z",
              "type": "hfloat"
            }
          }
        ]
      },
      {
        "_": "\n        A vector in 3D space (x,y,z).\n        \n        \n        \n    ",
        "$": {
          "name": "Vector3"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "x",
              "type": "float"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "y",
              "type": "float"
            }
          },
          {
            "_": "Third coordinate.",
            "$": {
              "name": "z",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A 4-dimensional vector.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "Vector4"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "x",
              "type": "float"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "y",
              "type": "float"
            }
          },
          {
            "_": "Third coordinate.",
            "$": {
              "name": "z",
              "type": "float"
            }
          },
          {
            "_": "Fourth coordinate.",
            "$": {
              "name": "w",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A quaternion.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "Quaternion"
        },
        "add": [
          {
            "_": "The w-coordinate.",
            "$": {
              "name": "w",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The x-coordinate.",
            "$": {
              "name": "x",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The y-coordinate.",
            "$": {
              "name": "y",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The z-coordinate.",
            "$": {
              "name": "z",
              "type": "float",
              "default": "0.0"
            }
          }
        ]
      },
      {
        "_": "\n        A quaternion as it appears in the havok objects.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkQuaternion"
        },
        "add": [
          {
            "_": "The x-coordinate.",
            "$": {
              "name": "x",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The y-coordinate.",
            "$": {
              "name": "y",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The z-coordinate.",
            "$": {
              "name": "z",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The w-coordinate.",
            "$": {
              "name": "w",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        A 2x2 matrix of float values.  Stored in OpenGL column-major format.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "Matrix22"
        },
        "add": [
          {
            "_": "Member 1,1 (top left)",
            "$": {
              "name": "m11",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Member 2,1 (bottom left)",
            "$": {
              "name": "m21",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 1,2 (top right)",
            "$": {
              "name": "m12",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 2,2 (bottom right)",
            "$": {
              "name": "m22",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        A 3x3 rotation matrix; M^T M=identity, det(M)=1.    Stored in OpenGL column-major format.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Matrix33"
        },
        "add": [
          {
            "_": "Member 1,1 (top left)",
            "$": {
              "name": "m11",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Member 2,1",
            "$": {
              "name": "m21",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 3,1 (bottom left)",
            "$": {
              "name": "m31",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 1,2",
            "$": {
              "name": "m12",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 2,2",
            "$": {
              "name": "m22",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Member 3,2",
            "$": {
              "name": "m32",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 1,3 (top right)",
            "$": {
              "name": "m13",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 2,3",
            "$": {
              "name": "m23",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "Member 3,3 (bottom left)",
            "$": {
              "name": "m33",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        A 3x4 transformation matrix.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Matrix34"
        },
        "add": [
          {
            "_": "The (1,1) element.",
            "$": {
              "name": "m11",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (2,1) element.",
            "$": {
              "name": "m21",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,1) element.",
            "$": {
              "name": "m31",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (1,2) element.",
            "$": {
              "name": "m12",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,2) element.",
            "$": {
              "name": "m22",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (3,2) element.",
            "$": {
              "name": "m32",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (1,3) element.",
            "$": {
              "name": "m13",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,3) element.",
            "$": {
              "name": "m23",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,3) element.",
            "$": {
              "name": "m33",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (1,4) element.",
            "$": {
              "name": "m14",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,4) element.",
            "$": {
              "name": "m24",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,4) element.",
            "$": {
              "name": "m34",
              "type": "float",
              "default": "0.0"
            }
          }
        ]
      },
      {
        "_": "\n        A 4x4 transformation matrix.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Matrix44"
        },
        "add": [
          {
            "_": "The (1,1) element.",
            "$": {
              "name": "m11",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (2,1) element.",
            "$": {
              "name": "m21",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,1) element.",
            "$": {
              "name": "m31",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (4,1) element.",
            "$": {
              "name": "m41",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (1,2) element.",
            "$": {
              "name": "m12",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,2) element.",
            "$": {
              "name": "m22",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (3,2) element.",
            "$": {
              "name": "m32",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (4,2) element.",
            "$": {
              "name": "m42",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (1,3) element.",
            "$": {
              "name": "m13",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,3) element.",
            "$": {
              "name": "m23",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,3) element.",
            "$": {
              "name": "m33",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The (4,3) element.",
            "$": {
              "name": "m43",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (1,4) element.",
            "$": {
              "name": "m14",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (2,4) element.",
            "$": {
              "name": "m24",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (3,4) element.",
            "$": {
              "name": "m34",
              "type": "float",
              "default": "0.0"
            }
          },
          {
            "_": "The (4,4) element.",
            "$": {
              "name": "m44",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        A 3x3 Havok matrix stored in 4x3 due to memory alignment.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkMatrix3"
        },
        "add": [
          {
            "$": {
              "name": "m11",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m12",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m13",
              "type": "float"
            }
          },
          {
            "_": "Unused",
            "$": {
              "name": "m14",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m21",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m22",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m23",
              "type": "float"
            }
          },
          {
            "_": "Unused",
            "$": {
              "name": "m24",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m31",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m32",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "m33",
              "type": "float"
            }
          },
          {
            "_": "Unused",
            "$": {
              "name": "m34",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Description of a mipmap within an NiPixelData object.\n        \n        \n        \n    ",
        "$": {
          "name": "MipMap"
        },
        "add": [
          {
            "_": "Width of the mipmap image.",
            "$": {
              "name": "Width",
              "type": "uint"
            }
          },
          {
            "_": "Height of the mipmap image.",
            "$": {
              "name": "Height",
              "type": "uint"
            }
          },
          {
            "_": "Offset into the pixel data array where this mipmap starts.",
            "$": {
              "name": "Offset",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        A set of NiNode references.\n        \n        \n    ",
        "$": {
          "name": "NodeSet"
        },
        "add": [
          {
            "_": "Number of node references that follow.",
            "$": {
              "name": "Num Nodes",
              "type": "uint"
            }
          },
          {
            "_": "The list of NiNode references.",
            "$": {
              "name": "Nodes",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Nodes"
            }
          }
        ]
      },
      {
        "_": "\n        Another string format, for short strings.  Specific to Bethesda-specific header tags.\n        \n        \n    ",
        "$": {
          "name": "ShortString",
          "ver1": "10.1.0.0"
        },
        "add": [
          {
            "_": "The string length.",
            "$": {
              "name": "Length",
              "type": "byte"
            }
          },
          {
            "_": "The string itself, null terminated (the null terminator is taken into account in the length byte).",
            "$": {
              "name": "Value",
              "type": "char",
              "arr1": "Length"
            }
          }
        ]
      },
      {
        "_": "\n        NiBoneLODController::SkinInfo. Reference to shape and skin instance.\n        \n        \n    ",
        "$": {
          "name": "SkinInfo"
        },
        "add": [
          {
            "$": {
              "name": "Shape",
              "type": "Ptr",
              "template": "NiTriBasedGeom"
            }
          },
          {
            "$": {
              "name": "Skin Instance",
              "type": "Ref",
              "template": "NiSkinInstance"
            }
          }
        ]
      },
      {
        "_": "\n        A set of NiBoneLODController::SkinInfo.\n        \n        \n    ",
        "$": {
          "name": "SkinInfoSet",
          "ver1": "10.0.1.0"
        },
        "add": [
          {
            "$": {
              "name": "Num Skin Info",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Skin Info",
              "type": "SkinInfo",
              "arr1": "Num Skin Info"
            }
          }
        ]
      },
      {
        "_": "\n        NiSkinData::BoneVertData. A vertex and its weight.\n        \n        \n    ",
        "$": {
          "name": "BoneVertData"
        },
        "add": [
          {
            "_": "The vertex index, in the mesh.",
            "$": {
              "name": "Index",
              "type": "ushort"
            }
          },
          {
            "_": "The vertex weight - between 0.0 and 1.0",
            "$": {
              "name": "Weight",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Used in NiDefaultAVObjectPalette.\n        \n        \n    ",
        "$": {
          "name": "AVObject"
        },
        "add": [
          {
            "_": "Object name.",
            "$": {
              "name": "Name",
              "type": "SizedString"
            }
          },
          {
            "_": "Object reference.",
            "$": {
              "name": "AV Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        In a .kf file, this links to a controllable object, via its name (or for version 10.2.0.0 and up, a link and offset to a NiStringPalette that contains the name), and a sequence of interpolators that apply to this controllable object, via links.\n        For Controller ID, NiInterpController::GetCtlrID() virtual function returns a string formatted specifically for the derived type.\n        For Interpolator ID, NiInterpController::GetInterpolatorID() virtual function returns a string formatted specifically for the derived type.\n        The string formats are documented on the relevant niobject blocks.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "ControlledBlock"
        },
        "add": [
          {
            "_": "Name of a controllable object in another NIF file.",
            "$": {
              "name": "Target Name",
              "type": "string",
              "ver2": "10.1.0.103"
            }
          },
          {
            "$": {
              "name": "Interpolator",
              "type": "Ref",
              "template": "NiInterpolator",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Controller",
              "type": "Ref",
              "template": "NiTimeController",
              "ver2": "20.5.0.0"
            }
          },
          {
            "$": {
              "name": "Blend Interpolator",
              "type": "Ref",
              "template": "NiBlendInterpolator",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.110"
            }
          },
          {
            "$": {
              "name": "Blend Index",
              "type": "ushort",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.110"
            }
          },
          {
            "_": "Idle animations tend to have low values for this, and high values tend to correspond with the important parts of the animations.",
            "$": {
              "name": "Priority",
              "type": "byte",
              "ver1": "10.1.0.106",
              "vercond": "(User Version 2 > 0)"
            }
          },
          {
            "_": "The name of the animated NiAVObject.",
            "$": {
              "name": "Node Name",
              "type": "string",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.113"
            }
          },
          {
            "_": "The RTTI type of the NiProperty the controller is attached to, if applicable.",
            "$": {
              "name": "Property Type",
              "type": "string",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.113"
            }
          },
          {
            "_": "The RTTI type of the NiTimeController.",
            "$": {
              "name": "Controller Type",
              "type": "string",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.113"
            }
          },
          {
            "_": "An ID that can uniquely identify the controller among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Controller ID",
              "type": "string",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.113"
            }
          },
          {
            "_": "An ID that can uniquely identify the interpolator among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Interpolator ID",
              "type": "string",
              "ver1": "10.1.0.104",
              "ver2": "10.1.0.113"
            }
          },
          {
            "_": "Refers to the NiStringPalette which contains the name of the controlled NIF object.",
            "$": {
              "name": "String Palette",
              "type": "Ref",
              "template": "NiStringPalette",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "Offset in NiStringPalette to the name of the animated NiAVObject.",
            "$": {
              "name": "Node Name Offset",
              "type": "StringOffset",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "Offset in NiStringPalette to the RTTI type of the NiProperty the controller is attached to, if applicable.",
            "$": {
              "name": "Property Type Offset",
              "type": "StringOffset",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "Offset in NiStringPalette to the RTTI type of the NiTimeController.",
            "$": {
              "name": "Controller Type Offset",
              "type": "StringOffset",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "Offset in NiStringPalette to an ID that can uniquely identify the controller among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Controller ID Offset",
              "type": "StringOffset",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "Offset in NiStringPalette to an ID that can uniquely identify the interpolator among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Interpolator ID Offset",
              "type": "StringOffset",
              "ver1": "10.2.0.0",
              "ver2": "20.1.0.0"
            }
          },
          {
            "_": "The name of the animated NiAVObject.",
            "$": {
              "name": "Node Name",
              "type": "string",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "The RTTI type of the NiProperty the controller is attached to, if applicable.",
            "$": {
              "name": "Property Type",
              "type": "string",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "The RTTI type of the NiTimeController.",
            "$": {
              "name": "Controller Type",
              "type": "string",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "An ID that can uniquely identify the controller among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Controller ID",
              "type": "string",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "An ID that can uniquely identify the interpolator among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Interpolator ID",
              "type": "string",
              "ver1": "20.1.0.1"
            }
          }
        ]
      },
      {
        "_": "\n    \tInformation about how the file was exported\n        \n        \n        \n    ",
        "$": {
          "name": "ExportInfo"
        },
        "add": [
          {
            "$": {
              "name": "Author",
              "type": "ShortString"
            }
          },
          {
            "$": {
              "name": "Process Script",
              "type": "ShortString"
            }
          },
          {
            "$": {
              "name": "Export Script",
              "type": "ShortString"
            }
          }
        ]
      },
      {
        "_": "\n        The NIF file header.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Header"
        },
        "add": [
          {
            "_": "'NetImmerse File Format x.x.x.x' (versions <= 10.0.1.2) or 'Gamebryo File Format x.x.x.x' (versions >= 10.1.0.0), with x.x.x.x the version written out. Ends with a newline character (0x0A).",
            "$": {
              "name": "Header String",
              "type": "HeaderString"
            }
          },
          {
            "$": {
              "name": "Copyright",
              "type": "LineString",
              "arr1": "3",
              "ver2": "3.1.0.0"
            }
          },
          {
            "_": "The NIF version, in hexadecimal notation: 0x04000002, 0x0401000C, 0x04020002, 0x04020100, 0x04020200, 0x0A000100, 0x0A010000, 0x0A020000, 0x14000004, ...",
            "$": {
              "name": "Version",
              "type": "FileVersion",
              "default": "0x04000002",
              "ver1": "3.1.0.1"
            }
          },
          {
            "_": "Determines the endianness of the data in the file.",
            "$": {
              "name": "Endian Type",
              "type": "EndianType",
              "default": "ENDIAN_LITTLE",
              "ver1": "20.0.0.3"
            }
          },
          {
            "_": "An extra version number, for companies that decide to modify the file format.",
            "$": {
              "name": "User Version",
              "type": "ulittle32",
              "ver1": "10.0.1.8"
            }
          },
          {
            "_": "Number of file objects.",
            "$": {
              "name": "Num Blocks",
              "type": "ulittle32",
              "ver1": "3.1.0.1"
            }
          },
          {
            "$": {
              "name": "User Version 2",
              "type": "ulittle32",
              "default": "0",
              "cond": "((Version == 20.2.0.7) || (Version == 20.0.0.5) || ((Version >= 10.0.1.2) && (Version <= 20.0.0.4) && (User Version <= 11))) && (User Version >= 3)"
            }
          },
          {
            "$": {
              "name": "Export Info",
              "type": "ExportInfo",
              "cond": "((Version == 20.2.0.7) || (Version == 20.0.0.5) || ((Version >= 10.0.1.2) && (Version <= 20.0.0.4) && (User Version <= 11))) && (User Version >= 3)"
            }
          },
          {
            "$": {
              "name": "Max Filepath",
              "type": "ShortString",
              "cond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Metadata",
              "type": "ByteArray",
              "ver1": "30.0.0.0"
            }
          },
          {
            "_": "Number of object types in this NIF file.",
            "$": {
              "name": "Num Block Types",
              "type": "ushort",
              "ver1": "5.0.0.1"
            }
          },
          {
            "_": "List of all object types used in this NIF file.",
            "$": {
              "name": "Block Types",
              "type": "SizedString",
              "arr1": "Num Block Types",
              "ver1": "5.0.0.1"
            }
          },
          {
            "_": "Maps file objects on their corresponding type: first file object is of type object_types[object_type_index[0]], the second of object_types[object_type_index[1]], etc.",
            "$": {
              "name": "Block Type Index",
              "type": "BlockTypeIndex",
              "arr1": "Num Blocks",
              "ver1": "5.0.0.1"
            }
          },
          {
            "_": "Array of block sizes?",
            "$": {
              "name": "Block Size",
              "type": "uint",
              "arr1": "Num Blocks",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Number of strings.",
            "$": {
              "name": "Num Strings",
              "type": "uint",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "Maximum string length.",
            "$": {
              "name": "Max String Length",
              "type": "uint",
              "ver1": "20.1.0.1"
            }
          },
          {
            "_": "Strings.",
            "$": {
              "name": "Strings",
              "type": "SizedString",
              "arr1": "Num Strings",
              "ver1": "20.1.0.1"
            }
          },
          {
            "$": {
              "name": "Num Groups",
              "type": "uint",
              "default": "0",
              "ver1": "5.0.0.6"
            }
          },
          {
            "$": {
              "name": "Groups",
              "type": "uint",
              "arr1": "Num Groups",
              "ver1": "5.0.0.6"
            }
          }
        ]
      },
      {
        "_": "\n        A list of \\\\0 terminated strings.\n        \n        \n    ",
        "$": {
          "name": "StringPalette"
        },
        "add": [
          {
            "_": "A bunch of 0x00 seperated strings.",
            "$": {
              "name": "Palette",
              "type": "SizedString"
            }
          },
          {
            "_": "Length of the palette string is repeated here.",
            "$": {
              "name": "Length",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Tension, bias, continuity.\n        \n        \n        \n    ",
        "$": {
          "name": "TBC"
        },
        "add": [
          {
            "_": "Tension.",
            "$": {
              "name": "t",
              "type": "float"
            }
          },
          {
            "_": "Bias.",
            "$": {
              "name": "b",
              "type": "float"
            }
          },
          {
            "_": "Continuity.",
            "$": {
              "name": "c",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A generic key with support for interpolation. Type 1 is normal linear interpolation, type 2 has forward and backward tangents, and type 3 has tension, bias and continuity arguments. Note that color4 and byte always seem to be of type 1.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Key",
          "istemplate": "1"
        },
        "add": [
          {
            "_": "Time of the key.",
            "$": {
              "name": "Time",
              "type": "float"
            }
          },
          {
            "_": "The key value.",
            "$": {
              "name": "Value",
              "type": "TEMPLATE"
            }
          },
          {
            "_": "Key forward tangent.",
            "$": {
              "name": "Forward",
              "type": "TEMPLATE",
              "cond": "ARG == 2"
            }
          },
          {
            "_": "The key backward tangent.",
            "$": {
              "name": "Backward",
              "type": "TEMPLATE",
              "cond": "ARG == 2"
            }
          },
          {
            "_": "The TBC of the key.",
            "$": {
              "name": "TBC",
              "type": "TBC",
              "cond": "ARG == 3"
            }
          }
        ]
      },
      {
        "_": "\n        Array of vector keys (anything that can be interpolated, except rotations).\n        \n        \n        \n    ",
        "$": {
          "name": "KeyGroup",
          "istemplate": "1"
        },
        "add": [
          {
            "_": "Number of keys in the array.",
            "$": {
              "name": "Num Keys",
              "type": "uint"
            }
          },
          {
            "_": "The key type.",
            "$": {
              "name": "Interpolation",
              "type": "KeyType",
              "cond": "Num Keys != 0"
            }
          },
          {
            "_": "The keys.",
            "$": {
              "name": "Keys",
              "type": "Key",
              "arg": "Interpolation",
              "template": "TEMPLATE",
              "arr1": "Num Keys"
            }
          }
        ]
      },
      {
        "_": "\n        A special version of the key type used for quaternions.  Never has tangents.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "QuatKey",
          "istemplate": "1"
        },
        "add": [
          {
            "_": "Time the key applies.",
            "$": {
              "name": "Time",
              "type": "float",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Time the key applies.",
            "$": {
              "name": "Time",
              "type": "float",
              "cond": "ARG != 4",
              "ver1": "10.1.0.106"
            }
          },
          {
            "_": "Value of the key.",
            "$": {
              "name": "Value",
              "type": "TEMPLATE",
              "cond": "ARG != 4"
            }
          },
          {
            "_": "The TBC of the key.",
            "$": {
              "name": "TBC",
              "type": "TBC",
              "cond": "ARG == 3"
            }
          }
        ]
      },
      {
        "_": "\n        Texture coordinates (u,v). As in OpenGL; image origin is in the lower left corner.\n        \n        \n    ",
        "$": {
          "name": "TexCoord"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "u",
              "type": "float"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "v",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Texture coordinates (u,v).\n        \n        \n    ",
        "$": {
          "name": "HalfTexCoord"
        },
        "add": [
          {
            "_": "First coordinate.",
            "$": {
              "name": "u",
              "type": "hfloat"
            }
          },
          {
            "_": "Second coordinate.",
            "$": {
              "name": "v",
              "type": "hfloat"
            }
          }
        ]
      },
      {
        "_": "\n        NiTexturingProperty::Map. Texture description.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "TexDesc"
        },
        "add": [
          {
            "_": "Link to the texture image.",
            "$": {
              "name": "Image",
              "type": "Ref",
              "template": "NiImage",
              "ver2": "3.1"
            }
          },
          {
            "_": "NiSourceTexture object index.",
            "$": {
              "name": "Source",
              "type": "Ref",
              "template": "NiSourceTexture",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "0=clamp S clamp T, 1=clamp S wrap T, 2=wrap S clamp T, 3=wrap S wrap T",
            "$": {
              "name": "Clamp Mode",
              "type": "TexClampMode",
              "default": "WRAP_S_WRAP_T",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "0=nearest, 1=bilinear, 2=trilinear, 3=..., 4=..., 5=...",
            "$": {
              "name": "Filter Mode",
              "type": "TexFilterMode",
              "default": "FILTER_TRILERP",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Texture mode flags; clamp and filter mode stored in upper byte with 0xYZ00 = clamp mode Y, filter mode Z.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver1": "20.1.0.3"
            }
          },
          {
            "$": {
              "name": "Max Anisotropy",
              "type": "ushort",
              "ver1": "20.5.0.4"
            }
          },
          {
            "_": "The texture coordinate set in NiGeometryData that this texture slot will use.",
            "$": {
              "name": "UV Set",
              "type": "uint",
              "default": "0",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "L can range from 0 to 3 and are used to specify how fast a texture gets blurry.",
            "$": {
              "name": "PS2 L",
              "type": "short",
              "default": "0",
              "ver2": "10.4.0.1"
            }
          },
          {
            "_": "K is used as an offset into the mipmap levels and can range from -2047 to 2047. Positive values push the mipmap towards being blurry and negative values make the mipmap sharper.",
            "$": {
              "name": "PS2 K",
              "type": "short",
              "default": "-75",
              "ver2": "10.4.0.1"
            }
          },
          {
            "_": "Unknown, 0 or 0x0101?",
            "$": {
              "name": "Unknown1",
              "type": "ushort",
              "ver2": "4.1.0.12"
            }
          },
          {
            "_": "Whether or not the texture coordinates are transformed.",
            "$": {
              "name": "Has Texture Transform",
              "type": "bool",
              "default": "false",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The UV translation.",
            "$": {
              "name": "Translation",
              "type": "TexCoord",
              "cond": "Has Texture Transform",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The UV scale.",
            "$": {
              "name": "Scale",
              "type": "TexCoord",
              "cond": "Has Texture Transform",
              "ver1": "10.1.0.0",
              "default": "1.0, 1.0"
            }
          },
          {
            "_": "The W axis rotation in texture space.",
            "$": {
              "name": "Rotation",
              "type": "float",
              "default": "0.0",
              "cond": "Has Texture Transform",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Depending on the source, scaling can occur before or after rotation.",
            "$": {
              "name": "Transform Method",
              "type": "TransformMethod",
              "default": "0",
              "cond": "Has Texture Transform",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The origin around which the texture rotates.",
            "$": {
              "name": "Center",
              "type": "TexCoord",
              "cond": "Has Texture Transform",
              "ver1": "10.1.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        NiTexturingProperty::ShaderMap. Shader texture description.\n        \n        \n        \n    ",
        "$": {
          "name": "ShaderTexDesc"
        },
        "add": [
          {
            "$": {
              "name": "Has Map",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Map",
              "type": "TexDesc",
              "cond": "Has Map"
            }
          },
          {
            "_": "Unique identifier for the Gamebryo shader system.",
            "$": {
              "name": "Map ID",
              "type": "uint",
              "cond": "Has Map"
            }
          }
        ]
      },
      {
        "_": "\n        List of three vertex indices.\n        \n        \n        \n    ",
        "$": {
          "name": "Triangle"
        },
        "add": [
          {
            "_": "First vertex index.",
            "$": {
              "name": "v1",
              "type": "ushort"
            }
          },
          {
            "_": "Second vertex index.",
            "$": {
              "name": "v2",
              "type": "ushort"
            }
          },
          {
            "_": "Third vertex index.",
            "$": {
              "name": "v3",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSVertexData"
        },
        "add": [
          {
            "$": {
              "name": "Vertex",
              "type": "HalfVector3",
              "cond": "((ARG & 16) != 0) && ((ARG & 16384) == 0)"
            }
          },
          {
            "$": {
              "name": "Bitangent X",
              "type": "hfloat",
              "cond": "((ARG & 16) != 0) && ((ARG & 256) != 0) && ((ARG & 16384) == 0)"
            }
          },
          {
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "cond": "((ARG & 16) != 0) && ((ARG & 256) == 0) && ((ARG & 16384) == 0)"
            }
          },
          {
            "$": {
              "name": "Vertex",
              "type": "Vector3",
              "cond": "((ARG & 16) != 0) && ((ARG & 16384) != 0)"
            }
          },
          {
            "$": {
              "name": "Bitangent X",
              "type": "float",
              "cond": "((ARG & 16) != 0) && ((ARG & 256) != 0) && ((ARG & 16384) != 0)"
            }
          },
          {
            "$": {
              "name": "Unknown Int",
              "type": "uint",
              "cond": "((ARG & 16) != 0) && ((ARG & 256) == 0) && ((ARG & 16384) != 0)"
            }
          },
          {
            "$": {
              "name": "UV",
              "type": "HalfTexCoord",
              "cond": "((ARG & 32) != 0)"
            }
          },
          {
            "$": {
              "name": "Normal",
              "type": "ByteVector3",
              "cond": "(ARG & 128) != 0"
            }
          },
          {
            "$": {
              "name": "Bitangent Y",
              "type": "byte",
              "cond": "(ARG & 128) != 0"
            }
          },
          {
            "$": {
              "name": "Tangent",
              "type": "ByteVector3",
              "cond": "((ARG & 128) != 0) && ((ARG & 256) != 0)"
            }
          },
          {
            "$": {
              "name": "Bitangent Z",
              "type": "byte",
              "cond": "((ARG & 128) != 0) && ((ARG & 256) != 0)"
            }
          },
          {
            "$": {
              "name": "Vertex Colors",
              "type": "ByteColor4",
              "cond": "(ARG & 512) != 0"
            }
          },
          {
            "$": {
              "name": "Bone Weights",
              "type": "hfloat",
              "arr1": "4",
              "cond": "(ARG & 1024) != 0"
            }
          },
          {
            "$": {
              "name": "Bone Indices",
              "type": "byte",
              "arr1": "4",
              "cond": "(ARG & 1024) != 0"
            }
          },
          {
            "$": {
              "name": "Eye Data",
              "type": "float",
              "cond": "(ARG & 4096) != 0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSVertexDataSSE"
        },
        "add": [
          {
            "$": {
              "name": "Vertex",
              "type": "Vector3",
              "cond": "((ARG & 16) != 0)"
            }
          },
          {
            "$": {
              "name": "Bitangent X",
              "type": "float",
              "cond": "((ARG & 16) != 0) && ((ARG & 256) != 0)"
            }
          },
          {
            "$": {
              "name": "Unknown Int",
              "type": "int",
              "cond": "((ARG & 16) != 0) && (ARG & 256) == 0"
            }
          },
          {
            "$": {
              "name": "UV",
              "type": "HalfTexCoord",
              "cond": "((ARG & 32) != 0)"
            }
          },
          {
            "$": {
              "name": "Normal",
              "type": "ByteVector3",
              "cond": "(ARG & 128) != 0"
            }
          },
          {
            "$": {
              "name": "Bitangent Y",
              "type": "byte",
              "cond": "(ARG & 128) != 0"
            }
          },
          {
            "$": {
              "name": "Tangent",
              "type": "ByteVector3",
              "cond": "((ARG & 128) != 0) && ((ARG & 256) != 0)"
            }
          },
          {
            "$": {
              "name": "Bitangent Z",
              "type": "byte",
              "cond": "((ARG & 128) != 0) && ((ARG & 256) != 0)"
            }
          },
          {
            "$": {
              "name": "Vertex Colors",
              "type": "ByteColor4",
              "cond": "(ARG & 512) != 0"
            }
          },
          {
            "$": {
              "name": "Bone Weights",
              "type": "hfloat",
              "arr1": "4",
              "cond": "(ARG & 1024) != 0"
            }
          },
          {
            "$": {
              "name": "Bone Indices",
              "type": "byte",
              "arr1": "4",
              "cond": "(ARG & 1024) != 0"
            }
          },
          {
            "$": {
              "name": "Eye Data",
              "type": "float",
              "cond": "(ARG & 4096) != 0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSVertexDesc"
        },
        "add": [
          {
            "$": {
              "name": "VF1",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "VF2",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "VF3",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "VF4",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "VF5",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Vertex Attributes",
              "type": "VertexFlags"
            }
          },
          {
            "$": {
              "name": "VF8",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        Skinning data for a submesh, optimized for hardware skinning. Part of NiSkinPartition.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\t\t\n\t\t\n\t\t\n        \n        \n    ",
        "$": {
          "name": "SkinPartition",
          "ver1": "4.2.1.0"
        },
        "add": [
          {
            "_": "Number of vertices in this submesh.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "Number of triangles in this submesh.",
            "$": {
              "name": "Num Triangles",
              "type": "ushort",
              "calculated": "1"
            }
          },
          {
            "_": "Number of bones influencing this submesh.",
            "$": {
              "name": "Num Bones",
              "type": "ushort"
            }
          },
          {
            "_": "Number of strips in this submesh (zero if not stripped).",
            "$": {
              "name": "Num Strips",
              "type": "ushort"
            }
          },
          {
            "_": "Number of weight coefficients per vertex. The Gamebryo engine seems to work well only if this number is equal to 4, even if there are less than 4 influences per vertex.",
            "$": {
              "name": "Num Weights Per Vertex",
              "type": "ushort"
            }
          },
          {
            "_": "List of bones.",
            "$": {
              "name": "Bones",
              "type": "ushort",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "Do we have a vertex map?",
            "$": {
              "name": "Has Vertex Map",
              "type": "bool",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Maps the weight/influence lists in this submesh to the vertices in the shape being skinned.",
            "$": {
              "name": "Vertex Map",
              "type": "ushort",
              "arr1": "Num Vertices",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "Maps the weight/influence lists in this submesh to the vertices in the shape being skinned.",
            "$": {
              "name": "Vertex Map",
              "type": "ushort",
              "arr1": "Num Vertices",
              "cond": "Has Vertex Map",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Do we have vertex weights?",
            "$": {
              "name": "Has Vertex Weights",
              "type": "bool",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The vertex weights.",
            "$": {
              "name": "Vertex Weights",
              "type": "float",
              "arr1": "Num Vertices",
              "arr2": "Num Weights Per Vertex",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "The vertex weights.",
            "$": {
              "name": "Vertex Weights",
              "type": "float",
              "arr1": "Num Vertices",
              "arr2": "Num Weights Per Vertex",
              "cond": "Has Vertex Weights",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The strip lengths.",
            "$": {
              "name": "Strip Lengths",
              "type": "ushort",
              "arr1": "Num Strips"
            }
          },
          {
            "_": "Do we have triangle or strip data?",
            "$": {
              "name": "Has Faces",
              "type": "bool",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The strips.",
            "$": {
              "name": "Strips",
              "type": "ushort",
              "arr1": "Num Strips",
              "arr2": "Strip Lengths",
              "cond": "Num Strips != 0",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "The strips.",
            "$": {
              "name": "Strips",
              "type": "ushort",
              "arr1": "Num Strips",
              "arr2": "Strip Lengths",
              "cond": "(Has Faces) && (Num Strips != 0)",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The triangles.",
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "cond": "Num Strips == 0",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "The triangles.",
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "cond": "(Has Faces) && (Num Strips == 0)",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Do we have bone indices?",
            "$": {
              "name": "Has Bone Indices",
              "type": "bool"
            }
          },
          {
            "_": "Bone indices, they index into 'Bones'.",
            "$": {
              "name": "Bone Indices",
              "type": "byte",
              "arr1": "Num Vertices",
              "arr2": "Num Weights Per Vertex",
              "cond": "Has Bone Indices"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "vercond": "User Version 2 > 34"
            }
          },
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Triangles Copy",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          }
        ]
      },
      {
        "_": "\n        A plane.\n        \n        \n    ",
        "$": {
          "name": "NiPlane"
        },
        "add": [
          {
            "_": "The plane normal.",
            "$": {
              "name": "Normal",
              "type": "Vector3"
            }
          },
          {
            "_": "The plane constant.",
            "$": {
              "name": "Constant",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A sphere.\n        \n        \n    ",
        "$": {
          "name": "NiBound"
        },
        "add": [
          {
            "_": "The sphere's center.",
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "_": "The sphere's radius.",
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiQuatTransform"
        },
        "add": [
          {
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Rotation",
              "type": "Quaternion"
            }
          },
          {
            "$": {
              "name": "Scale",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Whether each transform component is valid.",
            "$": {
              "name": "TRS Valid",
              "type": "bool",
              "arr1": "3",
              "ver2": "10.1.0.109"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiTransform"
        },
        "add": [
          {
            "_": "The rotation part of the transformation matrix.",
            "$": {
              "name": "Rotation",
              "type": "Matrix33"
            }
          },
          {
            "_": "The translation vector.",
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "_": "Scaling part (only uniform scaling is supported).",
            "$": {
              "name": "Scale",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Animation. Describes a furniture position?\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "FurniturePosition"
        },
        "add": [
          {
            "_": "Offset of furniture marker.",
            "$": {
              "name": "Offset",
              "type": "Vector3"
            }
          },
          {
            "_": "Furniture marker orientation.",
            "$": {
              "name": "Orientation",
              "type": "ushort",
              "vercond": "User Version 2 <= 34"
            }
          },
          {
            "_": "Refers to a furnituremarkerxx.nif file. Always seems to be the same as Position Ref 2.",
            "$": {
              "name": "Position Ref 1",
              "type": "byte",
              "vercond": "User Version 2 <= 34"
            }
          },
          {
            "_": "Refers to a furnituremarkerxx.nif file. Always seems to be the same as Position Ref 1.",
            "$": {
              "name": "Position Ref 2",
              "type": "byte",
              "vercond": "User Version 2 <= 34"
            }
          },
          {
            "_": "Similar to Orientation, in float form.",
            "$": {
              "name": "Heading",
              "type": "float",
              "vercond": "User Version 2 > 34"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Animation Type",
              "type": "AnimationType",
              "vercond": "User Version 2 > 34"
            }
          },
          {
            "_": "Unknown/unused in nif?",
            "$": {
              "name": "Entry Properties",
              "type": "FurnitureEntryPoints",
              "vercond": "User Version 2 > 34"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. A triangle with extra data used for physics.\n        \n        \n        \n    ",
        "$": {
          "name": "TriangleData"
        },
        "add": [
          {
            "_": "The triangle.",
            "$": {
              "name": "Triangle",
              "type": "Triangle"
            }
          },
          {
            "_": "Additional havok information on how triangles are welded.",
            "$": {
              "name": "Welding Info",
              "type": "ushort"
            }
          },
          {
            "_": "This is the triangle's normal.",
            "$": {
              "name": "Normal",
              "type": "Vector3",
              "ver2": "20.0.0.5"
            }
          }
        ]
      },
      {
        "_": "\n        Geometry morphing data component.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Morph"
        },
        "add": [
          {
            "_": "Name of the frame.",
            "$": {
              "name": "Frame Name",
              "type": "string",
              "ver1": "10.1.0.106"
            }
          },
          {
            "_": "The number of morph keys that follow.",
            "$": {
              "name": "Num Keys",
              "type": "uint",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Unlike most objects, the presense of this value is not conditional on there being keys.",
            "$": {
              "name": "Interpolation",
              "type": "KeyType",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "The morph key frames.",
            "$": {
              "name": "Keys",
              "type": "Key",
              "arg": "Interpolation",
              "template": "float",
              "arr1": "Num Keys",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int",
              "type": "uint",
              "ver1": "10.1.0.106",
              "ver2": "10.2.0.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int",
              "type": "uint",
              "ver1": "20.0.0.4",
              "ver2": "20.0.0.5",
              "userver": "0"
            }
          },
          {
            "_": "Morph vectors.",
            "$": {
              "name": "Vectors",
              "type": "Vector3",
              "arr1": "ARG"
            }
          }
        ]
      },
      {
        "_": "\n        particle array entry\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Particle"
        },
        "add": [
          {
            "_": "Particle velocity",
            "$": {
              "name": "Velocity",
              "type": "Vector3"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Vector",
              "type": "Vector3"
            }
          },
          {
            "_": "The particle age.",
            "$": {
              "name": "Lifetime",
              "type": "float"
            }
          },
          {
            "_": "Maximum age of the particle.",
            "$": {
              "name": "Lifespan",
              "type": "float"
            }
          },
          {
            "_": "Timestamp of the last update.",
            "$": {
              "name": "Timestamp",
              "type": "float"
            }
          },
          {
            "_": "Unknown short",
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "default": "0"
            }
          },
          {
            "_": "Particle/vertex index matches array index",
            "$": {
              "name": "Vertex ID",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        NiSkinData::BoneData. Skinning data component.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BoneData"
        },
        "add": [
          {
            "_": "Offset of the skin from this bone in bind position.",
            "$": {
              "name": "Skin Transform",
              "type": "NiTransform"
            }
          },
          {
            "_": "Translation offset of a bounding sphere holding all vertices. (Note that its a Sphere Containing Axis Aligned Box not a minimum volume Sphere)",
            "$": {
              "name": "Bounding Sphere Offset",
              "type": "Vector3"
            }
          },
          {
            "_": "Radius for bounding sphere holding all vertices.",
            "$": {
              "name": "Bounding Sphere Radius",
              "type": "float"
            }
          },
          {
            "_": "Unknown, always 0?",
            "$": {
              "name": "Unknown 13 Shorts",
              "type": "short",
              "arr1": "13",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          },
          {
            "_": "Number of weighted vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "The vertex weights.",
            "$": {
              "name": "Vertex Weights",
              "type": "BoneVertData",
              "arr1": "Num Vertices",
              "ver2": "4.2.1.0"
            }
          },
          {
            "_": "The vertex weights.",
            "$": {
              "name": "Vertex Weights",
              "type": "BoneVertData",
              "arr1": "Num Vertices",
              "ver1": "4.2.2.0",
              "cond": "ARG != 0"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Collision filter info representing Layer, Flags, Part Number, and Group all combined into one uint.\n        \n        \n        \n\n        \n        \n    ",
        "$": {
          "name": "HavokFilter"
        },
        "add": [
          {
            "_": "The layer the collision belongs to.",
            "$": {
              "name": "Layer",
              "suffix": "OB",
              "type": "OblivionLayer",
              "default": "OL_STATIC",
              "ver1": "20.0.0.4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "The layer the collision belongs to.",
            "$": {
              "name": "Layer",
              "suffix": "FO",
              "type": "Fallout3Layer",
              "default": "FOL_STATIC",
              "vercond": "(Version == 20.2.0.7) && (User Version 2 <= 34)"
            }
          },
          {
            "_": "The layer the collision belongs to.",
            "$": {
              "name": "Layer",
              "suffix": "SK",
              "type": "SkyrimLayer",
              "default": "SKYL_STATIC",
              "vercond": "(Version == 20.2.0.7) && (User Version 2 > 34)"
            }
          },
          {
            "_": "FLAGS are stored in highest 3 bits:\n        \tBit 7: sets the LINK property and controls whether this body is physically linked to others.\n        \tBit 6: turns collision off (not used for Layer BIPED).\n        \tBit 5: sets the SCALED property.\n\n        \tPART NUMBER is stored in bits 0-4. Used only when Layer is set to BIPED.\n\n        \tPart Numbers for Oblivion, Fallout 3, Skyrim:\n        \t0 - OTHER\n        \t1 - HEAD\n        \t2 - BODY\n        \t3 - SPINE1\n        \t4 - SPINE2\n        \t5 - LUPPERARM\n        \t6 - LFOREARM\n        \t7 - LHAND\n        \t8 - LTHIGH\n        \t9 - LCALF\n        \t10 - LFOOT\n        \t11 - RUPPERARM\n        \t12 - RFOREARM\n        \t13 - RHAND\n        \t14 - RTHIGH\n        \t15 - RCALF\n        \t16 - RFOOT\n        \t17 - TAIL\n        \t18 - SHIELD\n        \t19 - QUIVER\n        \t20 - WEAPON\n        \t21 - PONYTAIL\n        \t22 - WING\n        \t23 - PACK\n        \t24 - CHAIN\n        \t25 - ADDONHEAD\n        \t26 - ADDONCHEST\n        \t27 - ADDONARM\n        \t28 - ADDONLEG\n        \t29-31 - NULL\n        ",
            "$": {
              "name": "Flags and Part Number",
              "type": "byte",
              "default": "0"
            }
          },
          {
            "$": {
              "name": "Group",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Material wrapper for varying material enums by game.\n        \n        \n        \n    ",
        "$": {
          "name": "HavokMaterial"
        },
        "add": [
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "suffix": "OB",
              "type": "OblivionHavokMaterial",
              "ver1": "20.0.0.4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "suffix": "FO",
              "type": "Fallout3HavokMaterial",
              "vercond": "(Version == 20.2.0.7) && (User Version 2 <= 34)"
            }
          },
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "suffix": "SK",
              "type": "SkyrimHavokMaterial",
              "vercond": "(Version == 20.2.0.7) && (User Version 2 > 34)"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda Havok. Havok Information for packed TriStrip shapes.\n        \n        \n        \n    ",
        "$": {
          "name": "OblivionSubShape"
        },
        "add": [
          {
            "$": {
              "name": "Havok Filter",
              "type": "HavokFilter"
            }
          },
          {
            "_": "The number of vertices that form this sub shape.",
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "_": "The material of the subshape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          }
        ]
      },
      {
        "$": {
          "name": "bhkPositionConstraintMotor"
        },
        "add": [
          {
            "_": "Minimum motor force",
            "$": {
              "name": "Min Force",
              "type": "float",
              "default": "-1000000.0"
            }
          },
          {
            "_": "Maximum motor force",
            "$": {
              "name": "Max Force",
              "type": "float",
              "default": "1000000.0"
            }
          },
          {
            "_": "Relative stiffness",
            "$": {
              "name": "Tau",
              "type": "float",
              "default": "0.8"
            }
          },
          {
            "_": "Motor damping value",
            "$": {
              "name": "Damping",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "A factor of the current error to calculate the recovery velocity",
            "$": {
              "name": "Proportional Recovery Velocity",
              "type": "float",
              "default": "2.0"
            }
          },
          {
            "_": "A constant velocity which is used to recover from errors",
            "$": {
              "name": "Constant Recovery Velocity",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Is Motor enabled",
            "$": {
              "name": "Motor Enabled",
              "type": "bool",
              "default": "0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "bhkVelocityConstraintMotor"
        },
        "add": [
          {
            "_": "Minimum motor force",
            "$": {
              "name": "Min Force",
              "type": "float",
              "default": "-1000000.0"
            }
          },
          {
            "_": "Maximum motor force",
            "$": {
              "name": "Max Force",
              "type": "float",
              "default": "1000000.0"
            }
          },
          {
            "_": "Relative stiffness",
            "$": {
              "name": "Tau",
              "type": "float",
              "default": "0"
            }
          },
          {
            "$": {
              "name": "Target Velocity",
              "type": "float",
              "default": "0"
            }
          },
          {
            "$": {
              "name": "Use Velocity Target",
              "type": "bool",
              "default": "0"
            }
          },
          {
            "_": "Is Motor enabled",
            "$": {
              "name": "Motor Enabled",
              "type": "bool",
              "default": "0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "bhkSpringDamperConstraintMotor"
        },
        "add": [
          {
            "_": "Minimum motor force",
            "$": {
              "name": "Min Force",
              "type": "float",
              "default": "-1000000.0"
            }
          },
          {
            "_": "Maximum motor force",
            "$": {
              "name": "Max Force",
              "type": "float",
              "default": "1000000.0"
            }
          },
          {
            "_": "The spring constant in N/m",
            "$": {
              "name": "Spring Constant",
              "type": "float",
              "default": "0"
            }
          },
          {
            "_": "The spring damping in Nsec/m",
            "$": {
              "name": "Spring Damping",
              "type": "float",
              "default": "0"
            }
          },
          {
            "_": "Is Motor enabled",
            "$": {
              "name": "Motor Enabled",
              "type": "bool",
              "default": "0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "MotorDescriptor"
        },
        "add": [
          {
            "$": {
              "name": "Type",
              "type": "MotorType",
              "default": "MOTOR_NONE"
            }
          },
          {
            "$": {
              "name": "Position Motor",
              "type": "bhkPositionConstraintMotor",
              "cond": "Type == 1"
            }
          },
          {
            "$": {
              "name": "Velocity Motor",
              "type": "bhkVelocityConstraintMotor",
              "cond": "Type == 2"
            }
          },
          {
            "$": {
              "name": "Spring Damper Motor",
              "type": "bhkSpringDamperConstraintMotor",
              "cond": "Type == 3"
            }
          }
        ]
      },
      {
        "_": "\n        This constraint defines a cone in which an object can rotate. The shape of the cone can be controlled in two (orthogonal) directions.\n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n\n        \n    ",
        "$": {
          "name": "RagdollDescriptor"
        },
        "add": [
          {
            "_": "The point where the constraint is attached to its parent rigidbody.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Defines the orthogonal plane in which the body can move, the orthogonal directions in which the shape can be controlled (the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Plane A",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Central directed axis of the cone in which the object can rotate. Orthogonal on Plane A.",
            "$": {
              "name": "Twist A",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "The point where the constraint is attached to the other rigidbody.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Defines the orthogonal plane in which the shape can be controlled (the direction orthogonal on this one and Twist B).",
            "$": {
              "name": "Plane B",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Central directed axis of the cone in which the object can rotate. Orthogonal on Plane B.",
            "$": {
              "name": "Twist B",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Central directed axis of the cone in which the object can rotate. Orthogonal on Plane A.",
            "$": {
              "name": "Twist A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Defines the orthogonal plane in which the body can move, the orthogonal directions in which the shape can be controlled (the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Plane A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Defines the orthogonal directions in which the shape can be controlled (namely in this direction, and in the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Motor A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Point around which the object will rotate. Defines the orthogonal directions in which the shape can be controlled (namely in this direction, and in the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Central directed axis of the cone in which the object can rotate. Orthogonal on Plane B.",
            "$": {
              "name": "Twist B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Defines the orthogonal plane in which the body can move, the orthogonal directions in which the shape can be controlled (the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Plane B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Defines the orthogonal directions in which the shape can be controlled (namely in this direction, and in the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Motor B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Defines the orthogonal directions in which the shape can be controlled (namely in this direction, and in the direction orthogonal on this one and Twist A).",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Maximum angle the object can rotate around the vector orthogonal on Plane A and Twist A relative to the Twist A vector. Note that Cone Min Angle is not stored, but is simply minus this angle.",
            "$": {
              "name": "Cone Max Angle",
              "type": "float"
            }
          },
          {
            "_": "Minimum angle the object can rotate around Plane A, relative to Twist A.",
            "$": {
              "name": "Plane Min Angle",
              "type": "float"
            }
          },
          {
            "_": "Maximum angle the object can rotate around Plane A, relative to Twist A.",
            "$": {
              "name": "Plane Max Angle",
              "type": "float"
            }
          },
          {
            "_": "Minimum angle the object can rotate around Twist A, relative to Plane A.",
            "$": {
              "name": "Twist Min Angle",
              "type": "float"
            }
          },
          {
            "_": "Maximum angle the object can rotate around Twist A, relative to Plane A.",
            "$": {
              "name": "Twist Max Angle",
              "type": "float"
            }
          },
          {
            "_": "Maximum friction, typically 0 or 10. In Fallout 3, typically 100.",
            "$": {
              "name": "Max Friction",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Motor",
              "type": "MotorDescriptor",
              "ver1": "20.2.0.7",
              "vercond": "User Version 2 > 16"
            }
          }
        ]
      },
      {
        "_": "\n    \tThis constraint allows rotation about a specified axis, limited by specified boundaries.\n    \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n\n        \n    ",
        "$": {
          "name": "LimitedHingeDescriptor"
        },
        "add": [
          {
            "_": "Pivot point around which the object will rotate.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Axis of rotation.",
            "$": {
              "name": "Axle A",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Vector in the rotation plane which defines the zero angle.",
            "$": {
              "name": "Perp2 Axle In A1",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Vector in the rotation plane, orthogonal on the previous one, which defines the positive direction of rotation. This is always the vector product of Axle A and Perp2 Axle In A1.",
            "$": {
              "name": "Perp2 Axle In A2",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Pivot A in second entity coordinate system.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Axle A in second entity coordinate system.",
            "$": {
              "name": "Axle B",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Perp2 Axle In A2 in second entity coordinate system.",
            "$": {
              "name": "Perp2 Axle In B2",
              "type": "Vector4",
              "vercond": "User Version 2 <= 16"
            }
          },
          {
            "_": "Axis of rotation.",
            "$": {
              "name": "Axle A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Vector in the rotation plane which defines the zero angle.",
            "$": {
              "name": "Perp2 Axle In A1",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Vector in the rotation plane, orthogonal on the previous one, which defines the positive direction of rotation. This is always the vector product of Axle A and Perp2 Axle In A1.",
            "$": {
              "name": "Perp2 Axle In A2",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Pivot point around which the object will rotate.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Axle A in second entity coordinate system.",
            "$": {
              "name": "Axle B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Perp2 Axle In A1 in second entity coordinate system.",
            "$": {
              "name": "Perp2 Axle In B1",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Perp2 Axle In A2 in second entity coordinate system.",
            "$": {
              "name": "Perp2 Axle In B2",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Pivot A in second entity coordinate system.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "vercond": "User Version 2 > 16"
            }
          },
          {
            "_": "Minimum rotation angle.",
            "$": {
              "name": "Min Angle",
              "type": "float"
            }
          },
          {
            "_": "Maximum rotation angle.",
            "$": {
              "name": "Max Angle",
              "type": "float"
            }
          },
          {
            "_": "Maximum friction, typically either 0 or 10. In Fallout 3, typically 100.",
            "$": {
              "name": "Max Friction",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Motor",
              "type": "MotorDescriptor",
              "ver1": "20.2.0.7",
              "vercond": "User Version 2 > 16"
            }
          }
        ]
      },
      {
        "_": "\n    \tThis constraint allows rotation about a specified axis. \n    \t\n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    ",
        "$": {
          "name": "HingeDescriptor"
        },
        "add": [
          {
            "_": "Pivot point around which the object will rotate.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Vector in the rotation plane which defines the zero angle.",
            "$": {
              "name": "Perp2 Axle In A1",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Vector in the rotation plane, orthogonal on the previous one, which defines the positive direction of rotation.",
            "$": {
              "name": "Perp2 Axle In A2",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Pivot A in second entity coordinate system.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Axle A (vector orthogonal on Perp2 Axles) in second entity coordinate system.",
            "$": {
              "name": "Axle B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Axis of rotation.",
            "$": {
              "name": "Axle A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Vector in the rotation plane which defines the zero angle.",
            "$": {
              "name": "Perp2 Axle In A1",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Vector in the rotation plane, orthogonal on the previous one, which defines the positive direction of rotation. This is always the vector product of Axle A and Perp2 Axle In A1.",
            "$": {
              "name": "Perp2 Axle In A2",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Pivot point around which the object will rotate.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Axle A in second entity coordinate system.",
            "$": {
              "name": "Axle B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Perp2 Axle In A1 in second entity coordinate system.",
            "$": {
              "name": "Perp2 Axle In B1",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Perp2 Axle In A2 in second entity coordinate system.",
            "$": {
              "name": "Perp2 Axle In B2",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Pivot A in second entity coordinate system.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BallAndSocketDescriptor"
        },
        "add": [
          {
            "_": "Pivot point in the local space of entity A.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4"
            }
          },
          {
            "_": "Pivot point in the local space of entity B.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PrismaticDescriptor"
        },
        "add": [
          {
            "_": "Pivot.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Rotation axis.",
            "$": {
              "name": "Rotation A",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Plane normal. Describes the plane the object is able to move on.",
            "$": {
              "name": "Plane A",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Describes the axis the object is able to travel along. Unit vector.",
            "$": {
              "name": "Sliding A",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Pivot in B coordinates.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Rotation axis.",
            "$": {
              "name": "Rotation B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Plane normal. Describes the plane the object is able to move on in B coordinates.",
            "$": {
              "name": "Plane B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Describes the axis the object is able to travel along in B coordinates. Unit vector.",
            "$": {
              "name": "Sliding B",
              "type": "Vector4",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Describes the axis the object is able to travel along. Unit vector.",
            "$": {
              "name": "Sliding A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Rotation axis.",
            "$": {
              "name": "Rotation A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Plane normal. Describes the plane the object is able to move on.",
            "$": {
              "name": "Plane A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Pivot.",
            "$": {
              "name": "Pivot A",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Describes the axis the object is able to travel along in B coordinates. Unit vector.",
            "$": {
              "name": "Sliding B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Rotation axis.",
            "$": {
              "name": "Rotation B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Plane normal. Describes the plane the object is able to move on in B coordinates.",
            "$": {
              "name": "Plane B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Pivot in B coordinates.",
            "$": {
              "name": "Pivot B",
              "type": "Vector4",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "Describe the min distance the object is able to travel.",
            "$": {
              "name": "Min Distance",
              "type": "float"
            }
          },
          {
            "_": "Describe the max distance the object is able to travel.",
            "$": {
              "name": "Max Distance",
              "type": "float"
            }
          },
          {
            "_": "Friction.",
            "$": {
              "name": "Friction",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Motor",
              "type": "MotorDescriptor",
              "ver1": "20.2.0.7",
              "vercond": "User Version 2 > 16"
            }
          }
        ]
      },
      {
        "$": {
          "name": "StiffSpringDescriptor"
        },
        "add": [
          {
            "$": {
              "name": "Pivot A",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Pivot B",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Length",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Used to store skin weights in NiTriShapeSkinController.\n        \n        \n        \n    ",
        "$": {
          "name": "OldSkinData"
        },
        "add": [
          {
            "_": "The amount that this bone affects the vertex.",
            "$": {
              "name": "Vertex Weight",
              "type": "float"
            }
          },
          {
            "_": "The index of the vertex that this weight applies to.",
            "$": {
              "name": "Vertex Index",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown.  Perhaps some sort of offset?",
            "$": {
              "name": "Unknown Vector",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Box Bounding Volume\n        \n        \n        \n    ",
        "$": {
          "name": "BoxBV"
        },
        "add": [
          {
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Axis",
              "type": "Vector3",
              "arr1": "3"
            }
          },
          {
            "$": {
              "name": "Extent",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Capsule Bounding Volume\n        \n        \n        \n        \n    ",
        "$": {
          "name": "CapsuleBV"
        },
        "add": [
          {
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Origin",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Extent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "HalfSpaceBV"
        },
        "add": [
          {
            "$": {
              "name": "Plane",
              "type": "NiPlane"
            }
          },
          {
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BoundingVolume"
        },
        "add": [
          {
            "_": "Type of collision data.",
            "$": {
              "name": "Collision Type",
              "type": "BoundVolumeType"
            }
          },
          {
            "$": {
              "name": "Sphere",
              "type": "NiBound",
              "cond": "Collision Type == 0"
            }
          },
          {
            "$": {
              "name": "Box",
              "type": "BoxBV",
              "cond": "Collision Type == 1"
            }
          },
          {
            "$": {
              "name": "Capsule",
              "type": "CapsuleBV",
              "cond": "Collision Type == 2"
            }
          },
          {
            "$": {
              "name": "Union",
              "type": "UnionBV",
              "cond": "Collision Type == 4"
            }
          },
          {
            "$": {
              "name": "Half Space",
              "type": "HalfSpaceBV",
              "cond": "Collision Type == 5"
            }
          }
        ]
      },
      {
        "$": {
          "name": "UnionBV"
        },
        "add": [
          {
            "$": {
              "name": "Num BV",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bounding Volumes",
              "type": "BoundingVolume",
              "arr1": "Num BV"
            }
          }
        ]
      },
      {
        "$": {
          "name": "MorphWeight"
        },
        "add": [
          {
            "$": {
              "name": "Interpolator",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "$": {
              "name": "Weight",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Transformation data for the bone at this index in bhkPoseArray.\n        \n        \n        \n    ",
        "$": {
          "name": "BoneTransform"
        },
        "add": [
          {
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Rotation",
              "type": "hkQuaternion"
            }
          },
          {
            "$": {
              "name": "Scale",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        A list of transforms for each bone in bhkPoseArray.\n        \n        \n    ",
        "$": {
          "name": "BonePose"
        },
        "add": [
          {
            "$": {
              "name": "Num Transforms",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Transforms",
              "type": "BoneTransform",
              "arr1": "Num Transforms"
            }
          }
        ]
      },
      {
        "_": "\n        Array of Vectors for Decal placement in BSDecalPlacementVectorExtraData.\n        \n        \n        \n    ",
        "$": {
          "name": "DecalVectorArray"
        },
        "add": [
          {
            "$": {
              "name": "Num Vectors",
              "type": "short"
            }
          },
          {
            "_": "Vector XYZ coords",
            "$": {
              "name": "Points",
              "type": "Vector3",
              "arr1": "Num Vectors"
            }
          },
          {
            "_": "Vector Normals",
            "$": {
              "name": "Normals",
              "type": "Vector3",
              "arr1": "Num Vectors"
            }
          }
        ]
      },
      {
        "_": "\n        Body part list for DismemberSkinInstance\n        \n        \n    ",
        "$": {
          "name": "BodyPartList"
        },
        "add": [
          {
            "_": "Flags related to the Body Partition",
            "$": {
              "name": "Part Flag",
              "type": "BSPartFlag",
              "default": "257"
            }
          },
          {
            "_": "Body Part Index",
            "$": {
              "name": "Body Part",
              "type": "BSDismemberBodyPartType"
            }
          }
        ]
      },
      {
        "_": "\n        Stores Bone Level of Detail info in a BSBoneLODExtraData\n        \n        \n    ",
        "$": {
          "name": "BoneLOD"
        },
        "add": [
          {
            "$": {
              "name": "Distance",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bone Name",
              "type": "string"
            }
          }
        ]
      },
      {
        "_": "\n        Per-chunk material, used in bhkCompressedMeshShapeData\n        \n        \n    ",
        "$": {
          "name": "bhkCMSDMaterial"
        },
        "add": [
          {
            "$": {
              "name": "Material",
              "type": "SkyrimHavokMaterial"
            }
          },
          {
            "$": {
              "name": "Filter",
              "type": "HavokFilter"
            }
          }
        ]
      },
      {
        "_": "\n        Triangle indices used in pair with \"Big Verts\" in a bhkCompressedMeshShapeData.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkCMSDBigTris"
        },
        "add": [
          {
            "$": {
              "name": "Triangle 1",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Triangle 2",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Triangle 3",
              "type": "ushort"
            }
          },
          {
            "_": "Always 0?",
            "$": {
              "name": "Material",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Welding Info",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        A set of transformation data: translation and rotation\n        \n        \n    ",
        "$": {
          "name": "bhkCMSDTransform"
        },
        "add": [
          {
            "_": "A vector that moves the chunk by the specified amount. W is not used.",
            "$": {
              "name": "Translation",
              "type": "Vector4"
            }
          },
          {
            "_": "Rotation. Reference point for rotation is bhkRigidBody translation.",
            "$": {
              "name": "Rotation",
              "type": "hkQuaternion"
            }
          }
        ]
      },
      {
        "_": "\n        Defines subshape chunks in bhkCompressedMeshShapeData\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkCMSDChunk"
        },
        "add": [
          {
            "$": {
              "name": "Translation",
              "type": "Vector4"
            }
          },
          {
            "_": "Index of material in bhkCompressedMeshShapeData::Chunk Materials",
            "$": {
              "name": "Material Index",
              "type": "uint"
            }
          },
          {
            "_": "Always 65535?",
            "$": {
              "name": "Reference",
              "type": "ushort"
            }
          },
          {
            "_": "Index of transformation in bhkCompressedMeshShapeData::Chunk Transforms",
            "$": {
              "name": "Transform Index",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Vertices",
              "type": "ushort",
              "arr1": "Num Vertices"
            }
          },
          {
            "$": {
              "name": "Num Indices",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Indices",
              "type": "ushort",
              "arr1": "Num Indices"
            }
          },
          {
            "$": {
              "name": "Num Strips",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Strips",
              "type": "ushort",
              "arr1": "Num Strips"
            }
          },
          {
            "$": {
              "name": "Num Welding Info",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Welding Info",
              "type": "ushort",
              "arr1": "Num Welding Info"
            }
          }
        ]
      },
      {
        "$": {
          "name": "MalleableDescriptor"
        },
        "add": [
          {
            "_": "Type of constraint.",
            "$": {
              "name": "Type",
              "type": "hkConstraintType"
            }
          },
          {
            "_": "Always 2 (Hardcoded). Number of bodies affected by this constraint.",
            "$": {
              "name": "Num Entities",
              "type": "uint",
              "default": "2"
            }
          },
          {
            "_": "Usually NONE. The entity affected by this constraint.",
            "$": {
              "name": "Entity A",
              "type": "Ptr",
              "template": "bhkEntity"
            }
          },
          {
            "_": "Usually NONE. The entity affected by this constraint.",
            "$": {
              "name": "Entity B",
              "type": "Ptr",
              "template": "bhkEntity"
            }
          },
          {
            "_": "Usually 1. Higher values indicate higher priority of this constraint?",
            "$": {
              "name": "Priority",
              "type": "uint",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Ball and Socket",
              "type": "BallAndSocketDescriptor",
              "cond": "Type == 0"
            }
          },
          {
            "$": {
              "name": "Hinge",
              "type": "HingeDescriptor",
              "cond": "Type == 1"
            }
          },
          {
            "$": {
              "name": "Limited Hinge",
              "type": "LimitedHingeDescriptor",
              "cond": "Type == 2"
            }
          },
          {
            "$": {
              "name": "Prismatic",
              "type": "PrismaticDescriptor",
              "cond": "Type == 6"
            }
          },
          {
            "$": {
              "name": "Ragdoll",
              "type": "RagdollDescriptor",
              "cond": "Type == 7"
            }
          },
          {
            "$": {
              "name": "Stiff Spring",
              "type": "StiffSpringDescriptor",
              "cond": "Type == 8"
            }
          },
          {
            "$": {
              "name": "Tau",
              "type": "float",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Damping",
              "type": "float",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Strength",
              "type": "float",
              "ver1": "20.2.0.7"
            }
          }
        ]
      },
      {
        "$": {
          "name": "ConstraintData"
        },
        "add": [
          {
            "_": "Type of constraint.",
            "$": {
              "name": "Type",
              "type": "hkConstraintType"
            }
          },
          {
            "_": "Always 2 (Hardcoded). Number of bodies affected by this constraint.",
            "$": {
              "name": "Num Entities 2",
              "type": "uint",
              "default": "2"
            }
          },
          {
            "_": "Usually NONE. The entity affected by this constraint.",
            "$": {
              "name": "Entity A",
              "type": "Ptr",
              "template": "bhkEntity"
            }
          },
          {
            "_": "Usually NONE. The entity affected by this constraint.",
            "$": {
              "name": "Entity B",
              "type": "Ptr",
              "template": "bhkEntity"
            }
          },
          {
            "_": "Usually 1. Higher values indicate higher priority of this constraint?",
            "$": {
              "name": "Priority",
              "type": "uint",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Ball and Socket",
              "type": "BallAndSocketDescriptor",
              "cond": "Type == 0"
            }
          },
          {
            "$": {
              "name": "Hinge",
              "type": "HingeDescriptor",
              "cond": "Type == 1"
            }
          },
          {
            "$": {
              "name": "Limited Hinge",
              "type": "LimitedHingeDescriptor",
              "cond": "Type == 2"
            }
          },
          {
            "$": {
              "name": "Prismatic",
              "type": "PrismaticDescriptor",
              "cond": "Type == 6"
            }
          },
          {
            "$": {
              "name": "Ragdoll",
              "type": "RagdollDescriptor",
              "cond": "Type == 7"
            }
          },
          {
            "$": {
              "name": "Stiff Spring",
              "type": "StiffSpringDescriptor",
              "cond": "Type == 8"
            }
          },
          {
            "$": {
              "name": "Malleable",
              "type": "MalleableDescriptor",
              "cond": "Type == 13"
            }
          }
        ]
      },
      {
        "$": {
          "name": "hkWorldObjCinfoProperty"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "uint",
              "default": "0"
            }
          },
          {
            "$": {
              "name": "Size",
              "type": "uint",
              "default": "0"
            }
          },
          {
            "$": {
              "name": "Capacity and Flags",
              "type": "uint",
              "default": "0x80000000"
            }
          }
        ]
      },
      {
        "_": "\n        Two Vector4 for pivot in A and B.\n        \n        \n    ",
        "$": {
          "name": "ConstraintInfo"
        },
        "add": [
          {
            "$": {
              "name": "Pivot In A",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Pivot In B",
              "type": "Vector4"
            }
          }
        ]
      },
      {
        "_": "\n        Interpolator item for array in NiBlendInterpolator.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "InterpBlendItem"
        },
        "add": [
          {
            "_": "Reference to an interpolator.",
            "$": {
              "name": "Interpolator",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "$": {
              "name": "Weight",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Normalized Weight",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Priority",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Ease Spinner",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "MaterialData"
        },
        "add": [
          {
            "_": "Shader.",
            "$": {
              "name": "Has Shader",
              "type": "bool",
              "ver1": "10.0.1.0",
              "ver2": "20.1.0.3"
            }
          },
          {
            "_": "The shader name.",
            "$": {
              "name": "Shader Name",
              "type": "string",
              "cond": "Has Shader",
              "ver1": "10.0.1.0",
              "ver2": "20.1.0.3"
            }
          },
          {
            "_": "Extra data associated with the shader. A value of -1 means the shader is the default implementation.",
            "$": {
              "name": "Shader Extra Data",
              "type": "int",
              "cond": "Has Shader",
              "ver1": "10.0.1.0",
              "ver2": "20.1.0.3"
            }
          },
          {
            "$": {
              "name": "Num Materials",
              "type": "uint",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "The name of the material.",
            "$": {
              "name": "Material Name",
              "type": "string",
              "arr1": "Num Materials",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Extra data associated with the material. A value of -1 means the material is the default implementation.",
            "$": {
              "name": "Material Extra Data",
              "type": "int",
              "arr1": "Num Materials",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "The index of the currently active material.",
            "$": {
              "name": "Active Material",
              "type": "int",
              "default": "-1",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Cyanide extension (only in version 10.2.0.0?).",
            "$": {
              "name": "Unknown Byte",
              "type": "byte",
              "default": "255",
              "ver1": "10.2.0.0",
              "ver2": "10.2.0.0",
              "userver": "1"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Integer 2",
              "type": "int",
              "ver1": "10.4.0.1",
              "ver2": "10.4.0.1"
            }
          },
          {
            "_": "Whether the materials for this object always needs to be updated before rendering with them.",
            "$": {
              "name": "Material Needs Update",
              "type": "bool",
              "ver1": "20.2.0.7"
            }
          }
        ]
      },
      {
        "_": "\n        Particle Description.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "ParticleDesc"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Floats 1",
              "type": "float",
              "arr1": "3",
              "ver2": "10.4.0.1"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float",
              "default": "0.9"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 2",
              "type": "float",
              "default": "0.9"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 3",
              "type": "float",
              "default": "3.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 1",
              "type": "int"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PixelFormatComponent"
        },
        "add": [
          {
            "_": "Component Type",
            "$": {
              "name": "Type",
              "type": "PixelComponent"
            }
          },
          {
            "_": "Data Storage Convention",
            "$": {
              "name": "Convention",
              "type": "PixelRepresentation"
            }
          },
          {
            "_": "Bits per component",
            "$": {
              "name": "Bits Per Channel",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Is Signed",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        NiTexture::FormatPrefs. These preferences are a request to the renderer to use a format the most closely matches the settings and may be ignored.\n        \n        \n        \n    ",
        "$": {
          "name": "FormatPrefs"
        },
        "add": [
          {
            "_": "Requests the way the image will be stored.",
            "$": {
              "name": "Pixel Layout",
              "type": "PixelLayout"
            }
          },
          {
            "_": "Requests if mipmaps are used or not.",
            "$": {
              "name": "Use Mipmaps",
              "type": "MipMapFormat",
              "default": "MIP_FMT_DEFAULT"
            }
          },
          {
            "_": "Requests no alpha, 1-bit alpha, or ",
            "$": {
              "name": "Alpha Format",
              "type": "AlphaFormat",
              "default": "ALPHA_DEFAULT"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PhysXMaterialRef"
        },
        "add": [
          {
            "$": {
              "name": "Key",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Material Desc",
              "type": "Ref",
              "template": "NiPhysXMaterialDesc"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PhysXStateName"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Index",
              "type": "uint"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PhysXBodyStoredVels"
        },
        "add": [
          {
            "$": {
              "name": "Linear Velocity",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Angular Velocity",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Sleep",
              "type": "bool",
              "ver1": "30.2.0.3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPhysXJointActor"
        },
        "add": [
          {
            "$": {
              "name": "Actor",
              "type": "Ref",
              "template": "NiPhysXActorDesc"
            }
          },
          {
            "$": {
              "name": "Local Normal",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Local Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Local Anchor",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxJointLimitSoftDesc"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Restitution",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Spring",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Damping",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxJointDriveDesc"
        },
        "add": [
          {
            "$": {
              "name": "Drive Type",
              "type": "NxD6JointDriveType"
            }
          },
          {
            "$": {
              "name": "Restitution",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Spring",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Damping",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPhysXJointLimit"
        },
        "add": [
          {
            "$": {
              "name": "Limit Plane Normal",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Limit Plane D",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Limit Plane R",
              "type": "float",
              "ver1": "20.4.0.0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxPlane"
        },
        "add": [
          {
            "$": {
              "name": "Val 1",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Point 1",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxCapsule"
        },
        "add": [
          {
            "$": {
              "name": "Val 1",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Val 2",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Capsule Flags",
              "type": "uint"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxSpringDesc"
        },
        "add": [
          {
            "$": {
              "name": "Spring",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Damper",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Target Value",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NxMaterialDesc"
        },
        "add": [
          {
            "$": {
              "name": "Dynamic Friction",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Static Friction",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Restitution",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Dynamic Friction V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Static Friction V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Direction of Anisotropy",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "NxMaterialFlag"
            }
          },
          {
            "$": {
              "name": "Friction Combine Mode",
              "type": "NxCombineMode"
            }
          },
          {
            "$": {
              "name": "Restitution Combine Mode",
              "type": "NxCombineMode"
            }
          },
          {
            "$": {
              "name": "Has Spring",
              "type": "bool",
              "ver2": "20.2.3.0"
            }
          },
          {
            "$": {
              "name": "Spring",
              "type": "NxSpringDesc",
              "ver2": "20.2.3.0",
              "cond": "Has Spring"
            }
          }
        ]
      },
      {
        "_": "\n        Two dimensional screen elements.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "Polygon"
        },
        "add": [
          {
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "Offset in vertex array.",
            "$": {
              "name": "Vertex Offset",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Triangles",
              "type": "ushort"
            }
          },
          {
            "_": "Offset in indices array.",
            "$": {
              "name": "Triangle Offset",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific compound.\n        \n        \n        \n    ",
        "$": {
          "name": "BSTreadTransform"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Transform 1",
              "type": "NiQuatTransform"
            }
          },
          {
            "$": {
              "name": "Transform 2",
              "type": "NiQuatTransform"
            }
          }
        ]
      },
      {
        "_": "\n        This is only defined because of recursion issues.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSGeometrySubSegment"
        },
        "add": [
          {
            "$": {
              "name": "Start Index",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Primitives",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Parent Array Index",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unused",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific. Describes groups of triangles either segmented in a grid (for LOD) or by body part for skinned FO4 meshes.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSGeometrySegmentData"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "byte",
              "vercond": "(User Version 2 < 130)"
            }
          },
          {
            "_": "Index = previous Index + previous Num Tris in Segment * 3",
            "$": {
              "name": "Index",
              "type": "uint",
              "vercond": "(User Version 2 < 130)"
            }
          },
          {
            "_": "The number of triangles belonging to this segment",
            "$": {
              "name": "Num Tris in Segment",
              "type": "uint",
              "vercond": "(User Version 2 < 130)"
            }
          },
          {
            "$": {
              "name": "Start Index",
              "type": "uint",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Num Primitives",
              "type": "uint",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Parent Array Index",
              "type": "uint",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Num Sub Segments",
              "type": "uint",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Sub Segment",
              "type": "BSGeometrySubSegment",
              "arr1": "Num Sub Segments",
              "userver2": "130"
            }
          }
        ]
      },
      {
        "$": {
          "name": "AdditionalDataInfo"
        },
        "add": [
          {
            "_": "Type of data in this channel",
            "$": {
              "name": "Data Type",
              "type": "int"
            }
          },
          {
            "_": "Number of bytes per element of this channel",
            "$": {
              "name": "Num Channel Bytes Per Element",
              "type": "int"
            }
          },
          {
            "_": "Total number of bytes of this channel (num vertices times num bytes per element)",
            "$": {
              "name": "Num Channel Bytes",
              "type": "int"
            }
          },
          {
            "_": "Number of bytes per element in all channels together. Sum of num channel bytes per element over all block infos.",
            "$": {
              "name": "Num Total Bytes Per Element",
              "type": "int"
            }
          },
          {
            "_": "Unsure. The block in which this channel is stored? Usually there is only one block, and so this is zero.",
            "$": {
              "name": "Block Index",
              "type": "int"
            }
          },
          {
            "_": "Offset (in bytes) of this channel. Sum of all num channel bytes per element of all preceeding block infos.",
            "$": {
              "name": "Channel Offset",
              "type": "int"
            }
          },
          {
            "_": "Unknown, usually equal to 2.",
            "$": {
              "name": "Unknown Byte 1",
              "type": "byte",
              "default": "2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "AdditionalDataBlock"
        },
        "add": [
          {
            "_": "Has data",
            "$": {
              "name": "Has Data",
              "type": "bool"
            }
          },
          {
            "_": "Size of Block",
            "$": {
              "name": "Block Size",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Num Blocks",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Block Offsets",
              "type": "int",
              "arr1": "Num Blocks",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Num Data",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Data Sizes",
              "type": "int",
              "arr1": "Num Data",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "byte",
              "arr1": "Num Data",
              "arr2": "Block Size",
              "cond": "Has Data"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPackedAdditionalDataBlock"
        },
        "add": [
          {
            "_": "Has data",
            "$": {
              "name": "Has Data",
              "type": "bool"
            }
          },
          {
            "_": "Total number of bytes (over all channels and all elements, equals num total bytes per element times num vertices).",
            "$": {
              "name": "Num Total Bytes",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "_": "Number of blocks? Usually equal to one.",
            "$": {
              "name": "Num Blocks",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "_": "Block offsets in the data? Usually equal to zero.",
            "$": {
              "name": "Block Offsets",
              "type": "int",
              "arr1": "Num Blocks",
              "cond": "Has Data"
            }
          },
          {
            "_": "Number of atoms?",
            "$": {
              "name": "Num Atoms",
              "type": "int",
              "cond": "Has Data"
            }
          },
          {
            "_": "The sum of all of these equal num total bytes per element, so this probably describes how each data element breaks down into smaller chunks (i.e. atoms).",
            "$": {
              "name": "Atom Sizes",
              "type": "int",
              "arr1": "Num Atoms",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "byte",
              "arr1": "Num Total Bytes",
              "cond": "Has Data"
            }
          },
          {
            "$": {
              "name": "Unknown Int 1",
              "type": "int"
            }
          },
          {
            "_": "Unsure, but this seems to correspond again to the number of total bytes per element.",
            "$": {
              "name": "Num Total Bytes Per Element",
              "type": "int"
            }
          }
        ]
      },
      {
        "_": "\n        A range of indices, which make up a region (such as a submesh).\n        \n        \n    ",
        "$": {
          "name": "Region"
        },
        "add": [
          {
            "$": {
              "name": "Start Index",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Indices",
              "type": "uint"
            }
          }
        ]
      },
      {
        "$": {
          "name": "SemanticData"
        },
        "add": [
          {
            "_": "\n            Type of data (POSITION, POSITION_BP, INDEX, NORMAL, NORMAL_BP,\n            TEXCOORD, BLENDINDICES, BLENDWEIGHT, BONE_PALETTE, COLOR, DISPLAYLIST,\n            MORPH_POSITION, BINORMAL_BP, TANGENT_BP).\n        ",
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "_": "\n            An extra index of the data. For example, if there are 3 uv maps,\n            then the corresponding TEXCOORD data components would have indices\n            0, 1, and 2, respectively.\n        ",
            "$": {
              "name": "Index",
              "type": "uint",
              "default": "0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "DataStreamRef"
        },
        "add": [
          {
            "_": "\n            Reference to a data stream object which holds the data used by\n            this reference.\n        ",
            "$": {
              "name": "Stream",
              "type": "Ref",
              "template": "NiDataStream"
            }
          },
          {
            "_": "\n            Sets whether this stream data is per-instance data for use in\n            hardware instancing.\n        ",
            "$": {
              "name": "Is Per Instance",
              "type": "bool",
              "default": "0"
            }
          },
          {
            "_": "\n            The number of submesh-to-region mappings that this data stream\n            has.\n        ",
            "$": {
              "name": "Num Submeshes",
              "type": "ushort",
              "default": "1"
            }
          },
          {
            "_": "\n            \n            A lookup table that maps submeshes to regions.\n        ",
            "$": {
              "name": "Submesh To Region Map",
              "type": "ushort",
              "arr1": "Num Submeshes"
            }
          },
          {
            "$": {
              "name": "Num Components",
              "type": "uint",
              "default": "1"
            }
          },
          {
            "_": "Describes the semantic of each component.",
            "$": {
              "name": "Component Semantics",
              "type": "SemanticData",
              "arr1": "Num Components"
            }
          }
        ]
      },
      {
        "$": {
          "name": "ExtraMeshDataEpicMickey"
        },
        "add": [
          {
            "$": {
              "name": "Unknown Int 1",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Unknown Int 2",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Unknown Int 3",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Unknown Int 4",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unknown Int 5",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unknown Int 6",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "ExtraMeshDataEpicMickey2"
        },
        "add": [
          {
            "$": {
              "name": "Start",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "End",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Unknown Shorts",
              "type": "short",
              "arr1": "10"
            }
          }
        ]
      },
      {
        "$": {
          "name": "ElementReference",
          "ver1": "20.5.0.0"
        },
        "add": [
          {
            "_": "The element semantic.",
            "$": {
              "name": "Semantic",
              "type": "SemanticData"
            }
          },
          {
            "_": "Whether or not to normalize the data.",
            "$": {
              "name": "Normalize Flag",
              "type": "uint"
            }
          }
        ]
      },
      {
        "$": {
          "name": "LODInfo"
        },
        "add": [
          {
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Active Skins",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Skin Indices",
              "type": "uint",
              "arr1": "Num Active Skins"
            }
          }
        ]
      },
      {
        "$": {
          "name": "PSSpawnRateKey"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Time",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSGeometryPerSegmentSharedData"
        },
        "add": [
          {
            "_": "If Bone ID is 0xffffffff, this value refers to the Segment at the listed index. Otherwise this is the \"Biped Object\", which is like the body part types in Skyrim and earlier.",
            "$": {
              "name": "User Index",
              "type": "uint"
            }
          },
          {
            "_": "A hash of the bone name string.",
            "$": {
              "name": "Bone ID",
              "type": "uint"
            }
          },
          {
            "_": "Maximum of 8.",
            "$": {
              "name": "Num Cut Offsets",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Cut Offsets",
              "type": "float",
              "arr1": "Num Cut Offsets"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSGeometrySegmentSharedData"
        },
        "add": [
          {
            "$": {
              "name": "Num Segments",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Total Segments",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Segment Starts",
              "type": "uint",
              "arr1": "Num Segments"
            }
          },
          {
            "$": {
              "name": "Per Segment Data",
              "type": "BSGeometryPerSegmentSharedData",
              "arr1": "Total Segments"
            }
          },
          {
            "$": {
              "name": "SSF Length",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "SSF File",
              "type": "byte",
              "arr1": "SSF Length"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Bone Transform\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSSkinBoneTrans"
        },
        "add": [
          {
            "$": {
              "name": "Bounding Sphere",
              "type": "NiBound"
            }
          },
          {
            "$": {
              "name": "Rotation",
              "type": "Matrix33"
            }
          },
          {
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Scale",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSConnectPoint"
        },
        "add": [
          {
            "$": {
              "name": "Parent",
              "type": "SizedString",
              "default": "WorkshopConnectPoints"
            }
          },
          {
            "$": {
              "name": "Name",
              "type": "SizedString"
            }
          },
          {
            "$": {
              "name": "Rotation",
              "type": "Quaternion"
            }
          },
          {
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Scale",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPackedGeomDataCombined"
        },
        "add": [
          {
            "$": {
              "name": "Grayscale to Palette Scale",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Transform",
              "type": "NiTransform"
            }
          },
          {
            "$": {
              "name": "Bounding Sphere",
              "type": "NiBound"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPackedGeomData"
        },
        "add": [
          {
            "$": {
              "name": "Num Verts",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD Levels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Count LOD0",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Offset LOD0",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Count LOD1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Offset LOD1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Count LOD2",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Tri Offset LOD2",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Combined",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Combined",
              "type": "BSPackedGeomDataCombined",
              "arr1": "Num Combined"
            }
          },
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc"
            }
          },
          {
            "$": {
              "name": "Vertex Data",
              "type": "BSVertexData",
              "arr1": "Num Verts",
              "arg": "Vertex Desc\\Vertex Attributes",
              "cond": "!BSPackedCombinedSharedGeomDataExtra"
            }
          },
          {
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Tri Count LOD0 + Tri Count LOD1 + Tri Count LOD2",
              "cond": "!BSPackedCombinedSharedGeomDataExtra"
            }
          }
        ]
      },
      {
        "_": "\n        This appears to be a 64-bit hash but nif.xml does not have a 64-bit type.\n        \n        \n    ",
        "$": {
          "name": "BSPackedGeomObject"
        },
        "add": [
          {
            "$": {
              "name": "Shape ID 1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Shape ID 2",
              "type": "uint"
            }
          }
        ]
      }
    ],
    "niobject": [
      {
        "_": "\n        Abstract object type.\n    ",
        "$": {
          "name": "NiObject",
          "abstract": "1"
        }
      },
      {
        "_": "\n        Unknown.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Ni3dsAlphaAnimator",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 1",
              "type": "byte",
              "arr1": "40"
            }
          },
          {
            "_": "The parent?",
            "$": {
              "name": "Parent",
              "type": "Ref",
              "template": "NiObject"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Num 1",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Num 2",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 2",
              "type": "uint",
              "arr1": "Num 1",
              "arr2": "Num 2",
              "arr3": "2"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown. Only found in 2.3 nifs.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "Ni3dsAnimationNode",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Name of this object.",
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Has Data",
              "type": "bool"
            }
          },
          {
            "_": "Unknown. Matrix?",
            "$": {
              "name": "Unknown Floats 1",
              "type": "float",
              "arr1": "21",
              "cond": "Has Data"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "cond": "Has Data"
            }
          },
          {
            "_": "Child?",
            "$": {
              "name": "Child",
              "type": "Ref",
              "template": "NiObject",
              "cond": "Has Data"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Floats 2",
              "type": "float",
              "arr1": "12",
              "cond": "Has Data"
            }
          },
          {
            "_": "A count.",
            "$": {
              "name": "Count",
              "type": "uint",
              "cond": "Has Data"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Array",
              "type": "byte",
              "arr1": "Count",
              "arr2": "5",
              "cond": "Has Data"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown!\n        \n    ",
        "$": {
          "name": "Ni3dsColorAnimator",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 1",
              "type": "byte",
              "arr1": "184"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown!\n        \n    ",
        "$": {
          "name": "Ni3dsMorphShape",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 1",
              "type": "byte",
              "arr1": "14"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown!\n        \n    ",
        "$": {
          "name": "Ni3dsParticleSystem",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 1",
              "type": "byte",
              "arr1": "14"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown!\n        \n    ",
        "$": {
          "name": "Ni3dsPathController",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 1",
              "type": "byte",
              "arr1": "20"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1). Abstract base class for particle system modifiers.\n        \n        \n    ",
        "$": {
          "name": "NiParticleModifier",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Next particle modifier.",
            "$": {
              "name": "Next Modifier",
              "type": "Ref",
              "template": "NiParticleModifier"
            }
          },
          {
            "_": "Points to the particle system controller parent.",
            "$": {
              "name": "Controller",
              "type": "Ptr",
              "template": "NiParticleSystemController",
              "ver1": "4.0.0.2"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system collider.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysCollider",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Amount of bounce for the collider.",
            "$": {
              "name": "Bounce",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Spawn particles on impact?",
            "$": {
              "name": "Spawn on Collide",
              "type": "bool"
            }
          },
          {
            "_": "Kill particles on impact?",
            "$": {
              "name": "Die on Collide",
              "type": "bool"
            }
          },
          {
            "_": "Spawner to use for the collider.",
            "$": {
              "name": "Spawn Modifier",
              "type": "Ref",
              "template": "NiPSysSpawnModifier"
            }
          },
          {
            "_": "Link to parent.",
            "$": {
              "name": "Parent",
              "type": "Ptr",
              "template": "NiPSysColliderManager"
            }
          },
          {
            "_": "The next collider.",
            "$": {
              "name": "Next Collider",
              "type": "Ref",
              "template": "NiPSysCollider"
            }
          },
          {
            "_": "The object whose position and orientation are the basis of the collider.",
            "$": {
              "name": "Collider Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        The base type of most Bethesda-specific Havok-related NIF objects.\n    ",
        "$": {
          "name": "bhkRefObject",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Havok objects that can be saved and loaded from disk?\n    ",
        "$": {
          "name": "bhkSerializable",
          "abstract": "1",
          "inherit": "bhkRefObject"
        }
      },
      {
        "_": "\n        Havok objects that have a position in the world?\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkWorldObject",
          "abstract": "1",
          "inherit": "bhkSerializable"
        },
        "add": [
          {
            "_": " Link to the body for this collision object.",
            "$": {
              "name": "Shape",
              "type": "Ref",
              "template": "bhkShape"
            }
          },
          {
            "$": {
              "name": "Havok Filter",
              "type": "HavokFilter"
            }
          },
          {
            "_": "Garbage data from memory.",
            "$": {
              "name": "Unused",
              "type": "byte",
              "arr1": "4"
            }
          },
          {
            "$": {
              "name": "Broad Phase Type",
              "type": "BroadPhaseType",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Unused Bytes",
              "type": "byte",
              "arr1": "3"
            }
          },
          {
            "$": {
              "name": "Cinfo Property",
              "type": "hkWorldObjCinfoProperty"
            }
          }
        ]
      },
      {
        "_": "\n        Havok object that do not react with other objects when they collide (causing deflection, etc.) but still trigger collision notifications to the game.  Possible uses are traps, portals, AI fields, etc.\n    ",
        "$": {
          "name": "bhkPhantom",
          "abstract": "1",
          "inherit": "bhkWorldObject"
        }
      },
      {
        "_": "\n        A Havok phantom that uses a Havok shape object for its collision volume instead of just a bounding box.\n    ",
        "$": {
          "name": "bhkShapePhantom",
          "abstract": "1",
          "inherit": "bhkPhantom"
        }
      },
      {
        "_": "\n        Unknown shape.\n        \n        \n    ",
        "$": {
          "name": "bhkSimpleShapePhantom",
          "abstract": "0",
          "inherit": "bhkShapePhantom"
        },
        "add": [
          {
            "_": "Garbage data from memory.",
            "$": {
              "name": "Unused 2",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "$": {
              "name": "Transform",
              "type": "Matrix44"
            }
          }
        ]
      },
      {
        "_": "\n        A havok node, describes physical properties.\n    ",
        "$": {
          "name": "bhkEntity",
          "abstract": "1",
          "inherit": "bhkWorldObject"
        }
      },
      {
        "_": "\n        This is the default body type for all \"normal\" usable and static world objects. The \"T\" suffix\n        marks this body as active for translation and rotation, a normal bhkRigidBody ignores those\n        properties. Because the properties are equal, a bhkRigidBody may be renamed into a bhkRigidBodyT and vice-versa.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkRigidBody",
          "abstract": "0",
          "inherit": "bhkEntity"
        },
        "add": [
          {
            "_": "How the body reacts to collisions. See hkResponseType for hkpWorld default implementations.",
            "$": {
              "name": "Collision Response",
              "type": "hkResponseType",
              "default": "RESPONSE_SIMPLE_CONTACT"
            }
          },
          {
            "_": "Skipped over when writing Collision Response and Callback Delay.",
            "$": {
              "name": "Unused Byte 1",
              "type": "byte"
            }
          },
          {
            "_": "Lowers the frequency for processContactCallbacks. A value of 5 means that a callback is raised every 5th frame. The default is once every 65535 frames.",
            "$": {
              "name": "Process Contact Callback Delay",
              "type": "ushort",
              "default": "0xffff"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 1",
              "type": "uint"
            }
          },
          {
            "_": "Copy of Havok Filter",
            "$": {
              "name": "Havok Filter Copy",
              "type": "HavokFilter"
            }
          },
          {
            "_": "Garbage data from memory. Matches previous Unused value.",
            "$": {
              "name": "Unused 2",
              "type": "byte",
              "arr1": "4"
            }
          },
          {
            "$": {
              "name": "Unknown Int 2",
              "type": "uint",
              "vercond": "User Version 2 > 34"
            }
          },
          {
            "$": {
              "name": "Collision Response 2",
              "type": "hkResponseType",
              "default": "RESPONSE_SIMPLE_CONTACT"
            }
          },
          {
            "_": "Skipped over when writing Collision Response and Callback Delay.",
            "$": {
              "name": "Unused Byte 2",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Process Contact Callback Delay 2",
              "type": "ushort",
              "default": "0xffff"
            }
          },
          {
            "$": {
              "name": "Unknown Int 2",
              "type": "uint",
              "vercond": "User Version 2 <= 34"
            }
          },
          {
            "_": " A vector that moves the body by the specified amount. Only enabled in bhkRigidBodyT objects.",
            "$": {
              "name": "Translation",
              "type": "Vector4"
            }
          },
          {
            "_": "The rotation Yaw/Pitch/Roll to apply to the body. Only enabled in bhkRigidBodyT objects.",
            "$": {
              "name": "Rotation",
              "type": "hkQuaternion"
            }
          },
          {
            "_": "Linear velocity.",
            "$": {
              "name": "Linear Velocity",
              "type": "Vector4"
            }
          },
          {
            "_": "Angular velocity.",
            "$": {
              "name": "Angular Velocity",
              "type": "Vector4"
            }
          },
          {
            "_": "Defines how the mass is distributed among the body, i.e. how difficult it is to rotate around any given axis.",
            "$": {
              "name": "Inertia Tensor",
              "type": "hkMatrix3"
            }
          },
          {
            "_": "The body's center of mass.",
            "$": {
              "name": "Center",
              "type": "Vector4"
            }
          },
          {
            "_": "The body's mass in kg. A mass of zero represents an immovable object.",
            "$": {
              "name": "Mass",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Reduces the movement of the body over time. A value of 0.1 will remove 10% of the linear velocity every second.",
            "$": {
              "name": "Linear Damping",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "_": "Reduces the movement of the body over time. A value of 0.05 will remove 5% of the angular velocity every second.",
            "$": {
              "name": "Angular Damping",
              "type": "float",
              "default": "0.05"
            }
          },
          {
            "$": {
              "name": "Time Factor",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Gravity Factor",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "_": "How smooth its surfaces is and how easily it will slide along other bodies.",
            "$": {
              "name": "Friction",
              "type": "float",
              "default": "0.5"
            }
          },
          {
            "$": {
              "name": "Rolling Friction Multiplier",
              "type": "float",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "_": "\n            How \"bouncy\" the body is, i.e. how much energy it has after colliding. Less than 1.0 loses energy, greater than 1.0 gains energy.\n            If the restitution is not 0.0 the object will need extra CPU for all new collisions.\n        ",
            "$": {
              "name": "Restitution",
              "type": "float",
              "default": "0.4"
            }
          },
          {
            "_": "Maximal linear velocity.",
            "$": {
              "name": "Max Linear Velocity",
              "type": "float",
              "default": "104.4"
            }
          },
          {
            "_": "Maximal angular velocity.",
            "$": {
              "name": "Max Angular Velocity",
              "type": "float",
              "default": "31.57"
            }
          },
          {
            "_": "\n            The maximum allowed penetration for this object.\n            This is a hint to the engine to see how much CPU the engine should invest to keep this object from penetrating.\n            A good choice is 5% - 20% of the smallest diameter of the object.\n        ",
            "$": {
              "name": "Penetration Depth",
              "type": "float",
              "default": "0.15"
            }
          },
          {
            "_": "Motion system? Overrides Quality when on Keyframed?",
            "$": {
              "name": "Motion System",
              "type": "hkMotionType",
              "default": "MO_SYS_DYNAMIC"
            }
          },
          {
            "_": "The initial deactivator type of the body.",
            "$": {
              "name": "Deactivator Type",
              "type": "hkDeactivatorType",
              "default": "DEACTIVATOR_NEVER",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "$": {
              "name": "Enable Deactivation",
              "type": "bool",
              "default": "1",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "_": "How aggressively the engine will try to zero the velocity for slow objects. This does not save CPU.",
            "$": {
              "name": "Solver Deactivation",
              "type": "hkSolverDeactivation",
              "default": "SOLVER_DEACTIVATION_OFF"
            }
          },
          {
            "_": "The type of interaction with other objects.",
            "$": {
              "name": "Quality Type",
              "type": "hkQualityType",
              "default": "MO_QUAL_FIXED"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Bytes 1",
              "type": "byte",
              "arr1": "12"
            }
          },
          {
            "_": "Unknown. Skyrim only.",
            "$": {
              "name": "Unknown Bytes 2",
              "type": "byte",
              "arr1": "4",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Num Constraints",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Constraints",
              "type": "Ref",
              "template": "bhkSerializable",
              "arr1": "Num Constraints"
            }
          },
          {
            "_": "1 = respond to wind",
            "$": {
              "name": "Body Flags",
              "type": "uint",
              "vercond": "(User Version 2 < 76)"
            }
          },
          {
            "_": "1 = respond to wind",
            "$": {
              "name": "Body Flags",
              "type": "ushort",
              "vercond": "(User Version 2 >= 76)"
            }
          }
        ]
      },
      {
        "_": "\n        The \"T\" suffix marks this body as active for translation and rotation.\n    ",
        "$": {
          "name": "bhkRigidBodyT",
          "abstract": "0",
          "inherit": "bhkRigidBody"
        }
      },
      {
        "_": "\n        Describes a physical constraint.\n        \n        \n        \n    ",
        "$": {
          "name": "bhkConstraint",
          "abstract": "1",
          "inherit": "bhkSerializable"
        },
        "add": [
          {
            "_": "Number of bodies affected by this constraint.",
            "$": {
              "name": "Num Entities",
              "type": "uint"
            }
          },
          {
            "_": "The entities affected by this constraint.",
            "$": {
              "name": "Entities",
              "type": "Ptr",
              "template": "bhkEntity",
              "arr1": "Num Entities"
            }
          },
          {
            "_": "Usually 1. Higher values indicate higher priority of this constraint?",
            "$": {
              "name": "Priority",
              "type": "uint",
              "default": "1"
            }
          }
        ]
      },
      {
        "_": "\n        Hinge constraint.\n        \n    ",
        "$": {
          "name": "bhkLimitedHingeConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Describes a limited hinge constraint",
            "$": {
              "name": "Limited Hinge",
              "type": "LimitedHingeDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A malleable constraint.\n        \n    ",
        "$": {
          "name": "bhkMalleableConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Constraint within constraint.",
            "$": {
              "name": "Malleable",
              "type": "MalleableDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A spring constraint.\n        \n    ",
        "$": {
          "name": "bhkStiffSpringConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Stiff Spring constraint.",
            "$": {
              "name": "Stiff Spring",
              "type": "StiffSpringDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        Ragdoll constraint.\n        \n    ",
        "$": {
          "name": "bhkRagdollConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Ragdoll constraint.",
            "$": {
              "name": "Ragdoll",
              "type": "RagdollDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A prismatic constraint.\n        \n    ",
        "$": {
          "name": "bhkPrismaticConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Describes a prismatic constraint",
            "$": {
              "name": "Prismatic",
              "type": "PrismaticDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A hinge constraint.\n        \n    ",
        "$": {
          "name": "bhkHingeConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Hinge constraing.",
            "$": {
              "name": "Hinge",
              "type": "HingeDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A Ball and Socket Constraint.\n        \n    ",
        "$": {
          "name": "bhkBallAndSocketConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Describes a ball and socket constraint",
            "$": {
              "name": "Ball and Socket",
              "type": "BallAndSocketDescriptor"
            }
          }
        ]
      },
      {
        "_": "\n        A Ball and Socket Constraint chain.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkBallSocketConstraintChain",
          "abstract": "0",
          "inherit": "bhkSerializable"
        },
        "add": [
          {
            "_": "Number of pivot points. Divide by 2 to get the number of constraints.",
            "$": {
              "name": "Num Pivots",
              "type": "uint"
            }
          },
          {
            "_": "Two pivot points A and B for each constraint.",
            "$": {
              "name": "Pivots",
              "type": "ConstraintInfo",
              "arr1": "Num Pivots / 2"
            }
          },
          {
            "_": "High values are harder and more reactive, lower values are smoother.",
            "$": {
              "name": "Tau",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Defines damping strength for the current velocity.",
            "$": {
              "name": "Damping",
              "type": "float",
              "default": "0.6"
            }
          },
          {
            "_": "Restitution (amount of elasticity) of constraints. Added to the diagonal of the constraint matrix. A value of 0.0 can result in a division by zero with some chain configurations.",
            "$": {
              "name": "Constraint Force Mixing",
              "type": "float",
              "default": "1.1920929e-08"
            }
          },
          {
            "_": "Maximum distance error in constraints allowed before stabilization algorithm kicks in. A smaller distance causes more resistance.",
            "$": {
              "name": "Max Error Distance",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "_": "Number of links in the chain",
            "$": {
              "name": "Num Entities A",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Entities A",
              "type": "Ptr",
              "template": "bhkRigidBody",
              "arr1": "Num Entities A"
            }
          },
          {
            "_": "Hardcoded to 2. Don't change.",
            "$": {
              "name": "Num Entities",
              "type": "uint",
              "default": "2"
            }
          },
          {
            "$": {
              "name": "Entity A",
              "type": "Ptr",
              "template": "bhkRigidBody"
            }
          },
          {
            "$": {
              "name": "Entity B",
              "type": "Ptr",
              "template": "bhkRigidBody"
            }
          },
          {
            "$": {
              "name": "Priority",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        A Havok Shape?\n    ",
        "$": {
          "name": "bhkShape",
          "abstract": "1",
          "inherit": "bhkSerializable"
        }
      },
      {
        "_": "\n        Transforms a shape.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkTransformShape",
          "abstract": "0",
          "inherit": "bhkShape"
        },
        "add": [
          {
            "_": "The shape that this object transforms.",
            "$": {
              "name": "Shape",
              "type": "Ref",
              "template": "bhkShape"
            }
          },
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          },
          {
            "_": "Garbage data from memory.",
            "$": {
              "name": "Unused",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "_": "A transform matrix.",
            "$": {
              "name": "Transform",
              "type": "Matrix44"
            }
          }
        ]
      },
      {
        "_": "\n        A havok shape, perhaps with a bounding sphere for quick rejection in addition to more detailed shape data?\n        \n        \n    ",
        "$": {
          "name": "bhkSphereRepShape",
          "abstract": "1",
          "inherit": "bhkShape"
        },
        "add": [
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "_": "The radius of the sphere that encloses the shape.",
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A havok shape.\n    ",
        "$": {
          "name": "bhkConvexShape",
          "abstract": "1",
          "inherit": "bhkSphereRepShape"
        }
      },
      {
        "_": "\n        A sphere.\n    ",
        "$": {
          "name": "bhkSphereShape",
          "abstract": "0",
          "inherit": "bhkConvexShape"
        }
      },
      {
        "_": "\n        A capsule.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkCapsuleShape",
          "abstract": "0",
          "inherit": "bhkConvexShape"
        },
        "add": [
          {
            "_": "Not used. The following wants to be aligned at 16 bytes.",
            "$": {
              "name": "Unused",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "_": "First point on the capsule's axis.",
            "$": {
              "name": "First Point",
              "type": "Vector3"
            }
          },
          {
            "_": "Matches first capsule radius.",
            "$": {
              "name": "Radius 1",
              "type": "float"
            }
          },
          {
            "_": "Second point on the capsule's axis.",
            "$": {
              "name": "Second Point",
              "type": "Vector3"
            }
          },
          {
            "_": "Matches second capsule radius.",
            "$": {
              "name": "Radius 2",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A box.\n        \n        \n        \n    ",
        "$": {
          "name": "bhkBoxShape",
          "abstract": "0",
          "inherit": "bhkConvexShape"
        },
        "add": [
          {
            "_": "Not used. The following wants to be aligned at 16 bytes.",
            "$": {
              "name": "Unused",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "_": "A cube stored in Half Extents. A unit cube (1.0, 1.0, 1.0) would be stored as 0.5, 0.5, 0.5.",
            "$": {
              "name": "Dimensions",
              "type": "Vector3"
            }
          },
          {
            "_": "Unused as Havok stores the Half Extents as hkVector4 with the W component unused.",
            "$": {
              "name": "Unused Float",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A convex shape built from vertices. Note that if the shape is used in\n        a non-static object (such as clutter), then they will simply fall\n        through ground when they are under a bhkListShape.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkConvexVerticesShape",
          "abstract": "0",
          "inherit": "bhkConvexShape"
        },
        "add": [
          {
            "$": {
              "name": "Vertices Property",
              "type": "hkWorldObjCinfoProperty"
            }
          },
          {
            "$": {
              "name": "Normals Property",
              "type": "hkWorldObjCinfoProperty"
            }
          },
          {
            "_": "Number of vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "_": "Vertices. Fourth component is 0. Lexicographically sorted.",
            "$": {
              "name": "Vertices",
              "type": "Vector4",
              "arr1": "Num Vertices"
            }
          },
          {
            "_": "The number of half spaces.",
            "$": {
              "name": "Num Normals",
              "type": "uint"
            }
          },
          {
            "_": "Half spaces as determined by the set of vertices above. First three components define the normal pointing to the exterior, fourth component is the signed distance of the separating plane to the origin: it is minus the dot product of v and n, where v is any vertex on the separating plane, and n is the normal. Lexicographically sorted.",
            "$": {
              "name": "Normals",
              "type": "Vector4",
              "arr1": "Num Normals"
            }
          }
        ]
      },
      {
        "_": "\n        A convex transformed shape?\n    ",
        "$": {
          "name": "bhkConvexTransformShape",
          "abstract": "0",
          "inherit": "bhkTransformShape"
        }
      },
      {
        "_": "\n        Unknown.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkMultiSphereShape",
          "abstract": "0",
          "inherit": "bhkSphereRepShape"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          },
          {
            "_": "The number of spheres in this multi sphere shape.",
            "$": {
              "name": "Num Spheres",
              "type": "uint"
            }
          },
          {
            "_": "This array holds the spheres which make up the multi sphere shape.",
            "$": {
              "name": "Spheres",
              "type": "NiBound",
              "arr1": "Num Spheres"
            }
          }
        ]
      },
      {
        "_": "\n        A tree-like Havok data structure stored in an assembly-like binary code?\n    ",
        "$": {
          "name": "bhkBvTreeShape",
          "abstract": "1",
          "inherit": "bhkShape"
        }
      },
      {
        "_": "\n        Memory optimized partial polytope bounding volume tree shape (not an entity).\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkMoppBvTreeShape",
          "abstract": "0",
          "inherit": "bhkBvTreeShape"
        },
        "add": [
          {
            "_": "The shape.",
            "$": {
              "name": "Shape",
              "type": "Ref",
              "template": "bhkShape"
            }
          },
          {
            "_": "Garbage data from memory. Referred to as User Data, Shape Collection, and Code.",
            "$": {
              "name": "Unused",
              "type": "uint",
              "arr1": "3"
            }
          },
          {
            "_": "Scale.",
            "$": {
              "name": "Shape Scale",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Number of bytes for MOPP data.",
            "$": {
              "name": "MOPP Data Size",
              "type": "uint",
              "calculated": "1"
            }
          },
          {
            "_": "Origin of the object in mopp coordinates. This is the minimum of all vertices in the packed shape along each axis, minus 0.1.",
            "$": {
              "name": "Origin",
              "type": "Vector3"
            }
          },
          {
            "_": "The scaling factor to quantize the MOPP: the quantization factor is equal to 256*256 divided by this number. In Oblivion files, scale is taken equal to 256*256*254 / (size + 0.2) where size is the largest dimension of the bounding box of the packed shape.",
            "$": {
              "name": "Scale",
              "type": "float"
            }
          },
          {
            "_": "The tree of bounding volume data (old style, contains more than just the mopp script).",
            "$": {
              "name": "Old MOPP Data",
              "ver2": "10.0.1.0",
              "type": "byte",
              "binary": "1",
              "arr1": "MOPP Data Size - 1"
            }
          },
          {
            "_": "Tells if MOPP Data was organized into smaller chunks (PS3) or not (PC)",
            "$": {
              "name": "Build Type",
              "type": "MoppDataBuildType",
              "vercond": "User Version 2 > 34"
            }
          },
          {
            "_": "The tree of bounding volume data.",
            "$": {
              "name": "MOPP Data",
              "ver1": "10.0.1.2",
              "type": "byte",
              "binary": "1",
              "arr1": "MOPP Data Size"
            }
          }
        ]
      },
      {
        "_": "\n        Havok collision object that uses multiple shapes?\n    ",
        "$": {
          "name": "bhkShapeCollection",
          "abstract": "1",
          "inherit": "bhkShape"
        }
      },
      {
        "_": "\n        A list of shapes.\n\n        Do not put a bhkPackedNiTriStripsShape in the Sub Shapes. Use a\n        separate collision nodes without a list shape for those.\n\n        Also, shapes collected in a bhkListShape may not have the correct\n        walking noise, so only use it for non-walkable objects.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkListShape",
          "abstract": "0",
          "inherit": "bhkShapeCollection"
        },
        "add": [
          {
            "_": "The number of sub shapes referenced.",
            "$": {
              "name": "Num Sub Shapes",
              "type": "uint"
            }
          },
          {
            "_": "List of shapes.",
            "$": {
              "name": "Sub Shapes",
              "type": "Ref",
              "template": "bhkShape",
              "arr1": "Num Sub Shapes"
            }
          },
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "$": {
              "name": "Child Shape Property",
              "type": "hkWorldObjCinfoProperty"
            }
          },
          {
            "$": {
              "name": "Child Filter Property",
              "type": "hkWorldObjCinfoProperty"
            }
          },
          {
            "_": "Count.",
            "$": {
              "name": "Num Unknown Ints",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Ints",
              "type": "uint",
              "arr1": "Num Unknown Ints"
            }
          }
        ]
      },
      {
        "$": {
          "name": "bhkMeshShape",
          "abstract": "0",
          "inherit": "bhkShape"
        },
        "add": [
          {
            "$": {
              "name": "Unknown 1",
              "type": "float",
              "arr1": "9"
            }
          },
          {
            "$": {
              "name": "Num Unknown Floats",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Unknown Floats",
              "type": "float",
              "arr1": "Num Unknown Floats",
              "arr2": "3"
            }
          },
          {
            "$": {
              "name": "Unknown 2",
              "type": "int",
              "arr1": "3"
            }
          },
          {
            "_": "The number of strips data objects referenced.",
            "$": {
              "name": "Num Strips Data",
              "type": "uint",
              "ver2": "10.0.1.0"
            }
          },
          {
            "_": "Refers to a bunch of NiTriStripsData objects that make up this shape.",
            "$": {
              "name": "Strips Data",
              "type": "Ref",
              "template": "NiTriStripsData",
              "arr1": "Num Strips Data",
              "ver2": "10.0.1.0"
            }
          }
        ]
      },
      {
        "_": "\n        A shape constructed from strips data.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkPackedNiTriStripsShape",
          "abstract": "0",
          "inherit": "bhkShapeCollection"
        },
        "add": [
          {
            "$": {
              "name": "Num Sub Shapes",
              "type": "ushort",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Sub Shapes",
              "type": "OblivionSubShape",
              "arr1": "Num Sub Shapes",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "User Data",
              "type": "uint",
              "default": "0"
            }
          },
          {
            "_": "Looks like a memory pointer and may be garbage.",
            "$": {
              "name": "Unused 1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "_": "Looks like a memory pointer and may be garbage.",
            "$": {
              "name": "Unused 2",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Scale",
              "type": "Vector4",
              "default": "1.0, 1.0, 1.0, 0.0"
            }
          },
          {
            "_": "Same as radius",
            "$": {
              "name": "Radius Copy",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "_": "Same as scale.",
            "$": {
              "name": "Scale Copy",
              "type": "Vector4",
              "default": "1.0, 1.0, 1.0, 0.0"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "hkPackedNiTriStripsData"
            }
          }
        ]
      },
      {
        "_": "\n        A shape constructed from a bunch of strips.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkNiTriStripsShape",
          "abstract": "0",
          "inherit": "bhkShapeCollection"
        },
        "add": [
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "_": "Garbage data from memory though the last 3 are referred to as maxSize, size, and eSize.",
            "$": {
              "name": "Unused",
              "type": "uint",
              "arr1": "5"
            }
          },
          {
            "$": {
              "name": "Grow By",
              "type": "uint",
              "default": "1"
            }
          },
          {
            "_": "Scale. Usually (1.0, 1.0, 1.0, 0.0).",
            "$": {
              "name": "Scale",
              "type": "Vector4",
              "default": "1.0, 1.0, 1.0, 0.0"
            }
          },
          {
            "_": "The number of strips data objects referenced.",
            "$": {
              "name": "Num Strips Data",
              "type": "uint"
            }
          },
          {
            "_": "Refers to a bunch of NiTriStripsData objects that make up this shape.",
            "$": {
              "name": "Strips Data",
              "type": "Ref",
              "template": "NiTriStripsData",
              "arr1": "Num Strips Data"
            }
          },
          {
            "_": "Number of Havok Layers, equal to Number of strips data objects.",
            "$": {
              "name": "Num Data Layers",
              "type": "uint"
            }
          },
          {
            "_": "Havok Layers for each strip data.",
            "$": {
              "name": "Data Layers",
              "type": "HavokFilter",
              "arr1": "Num Data Layers"
            }
          }
        ]
      },
      {
        "_": "\n        A generic extra data object.\n        \n        \n    ",
        "$": {
          "name": "NiExtraData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Name of this object.",
            "$": {
              "name": "Name",
              "type": "string",
              "ver1": "10.0.1.0",
              "cond": "!BSExtraData"
            }
          },
          {
            "_": "Block number of the next extra data object.",
            "$": {
              "name": "Next Extra Data",
              "type": "Ref",
              "template": "NiExtraData",
              "ver2": "4.2.2.0"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all interpolators of bool, float, NiQuaternion, NiPoint3, NiColorA, and NiQuatTransform data.\n    ",
        "$": {
          "name": "NiInterpolator",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Abstract base class for interpolators that use NiAnimationKeys (Key, KeyGrp) for interpolation.\n    ",
        "$": {
          "name": "NiKeyBasedInterpolator",
          "abstract": "1",
          "inherit": "NiInterpolator"
        }
      },
      {
        "_": "\n        Uses NiFloatKeys to animate a float value over time.\n        \n        \n    ",
        "$": {
          "name": "NiFloatInterpolator",
          "abstract": "0",
          "inherit": "NiKeyBasedInterpolator"
        },
        "add": [
          {
            "_": "Pose value if lacking NiFloatData.",
            "$": {
              "name": "Value",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "_": "\n        An interpolator for transform keyframes.\n        \n        \n    ",
        "$": {
          "name": "NiTransformInterpolator",
          "abstract": "0",
          "inherit": "NiKeyBasedInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Transform",
              "type": "NiQuatTransform"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiTransformData"
            }
          }
        ]
      },
      {
        "_": "\n        Uses NiPosKeys to animate an NiPoint3 value over time.\n        \n        \n    ",
        "$": {
          "name": "NiPoint3Interpolator",
          "abstract": "0",
          "inherit": "NiKeyBasedInterpolator"
        },
        "add": [
          {
            "_": "Pose value if lacking NiPosData.",
            "$": {
              "name": "Value",
              "type": "Vector3",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPosData"
            }
          }
        ]
      },
      {
        "_": "\n        Used to make an object follow a predefined spline path.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPathInterpolator",
          "abstract": "0",
          "inherit": "NiKeyBasedInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "PathFlags",
              "default": "3"
            }
          },
          {
            "_": "-1 = Negative, 1 = Positive",
            "$": {
              "name": "Bank Dir",
              "type": "int",
              "default": "1"
            }
          },
          {
            "_": "Max angle in radians.",
            "$": {
              "name": "Max Bank Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Smoothing",
              "type": "float"
            }
          },
          {
            "_": "0, 1, or 2 representing X, Y, or Z.",
            "$": {
              "name": "Follow Axis",
              "type": "short"
            }
          },
          {
            "$": {
              "name": "Path Data",
              "type": "Ref",
              "template": "NiPosData"
            }
          },
          {
            "$": {
              "name": "Percent Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "_": "\n        Uses NiBoolKeys to animate a bool value over time.\n        \n        \n    ",
        "$": {
          "name": "NiBoolInterpolator",
          "abstract": "0",
          "inherit": "NiKeyBasedInterpolator"
        },
        "add": [
          {
            "_": "Pose value if lacking NiBoolData.",
            "$": {
              "name": "Value",
              "type": "bool",
              "default": "2"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiBoolData"
            }
          }
        ]
      },
      {
        "_": "\n        Uses NiBoolKeys to animate a bool value over time.\n        Unlike NiBoolInterpolator, it ensures that keys have not been missed between two updates.\n    ",
        "$": {
          "name": "NiBoolTimelineInterpolator",
          "abstract": "0",
          "inherit": "NiBoolInterpolator"
        }
      },
      {
        "_": "\n        Abstract base class for all NiInterpolators that blend the results of sub-interpolators together to compute a final weighted value.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBlendInterpolator",
          "abstract": "1",
          "inherit": "NiInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "InterpBlendFlags"
            }
          },
          {
            "$": {
              "name": "Array Size",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Weight Threshold",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Interp Count",
              "type": "byte",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "Single Index",
              "type": "byte",
              "default": "255",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "High Priority",
              "type": "char",
              "default": "-128",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "Next High Priority",
              "type": "char",
              "default": "-128",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "Single Time",
              "type": "float",
              "default": "-3.402823466e+38",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "High Weights Sum",
              "type": "float",
              "default": "-3.402823466e+38",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "Next High Weights Sum",
              "type": "float",
              "default": "-3.402823466e+38",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "High Ease Spinner",
              "type": "float",
              "default": "-3.402823466e+38",
              "cond": "(Flags & 1) == 0"
            }
          },
          {
            "$": {
              "name": "Interp Array Items",
              "type": "InterpBlendItem",
              "arr1": "Array Size",
              "cond": "(Flags & 1) == 0"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for interpolators storing data via a B-spline.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBSplineInterpolator",
          "abstract": "1",
          "inherit": "NiInterpolator"
        },
        "add": [
          {
            "_": "Animation start time.",
            "$": {
              "name": "Start Time",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "_": "Animation stop time.",
            "$": {
              "name": "Stop Time",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Spline Data",
              "type": "Ref",
              "template": "NiBSplineData"
            }
          },
          {
            "$": {
              "name": "Basis Data",
              "type": "Ref",
              "template": "NiBSplineBasisData"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for NiObjects that support names, extra data, and time controllers.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiObjectNET",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Configures the main shader path",
            "$": {
              "name": "Skyrim Shader Type",
              "type": "BSLightingShaderPropertyShaderType",
              "vercond": "User Version 2 >= 83",
              "cond": "BSLightingShaderProperty"
            }
          },
          {
            "_": "Name of this controllable object, used to refer to the object in .kf files.",
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "_": "Extra data for pre-3.0 versions.",
            "$": {
              "name": "Has Old Extra Data",
              "type": "bool",
              "ver2": "2.3"
            }
          },
          {
            "_": "(=NiStringExtraData)",
            "$": {
              "name": "Old Extra Prop Name",
              "cond": "Has Old Extra Data",
              "ver2": "2.3",
              "type": "string"
            }
          },
          {
            "_": "ref",
            "$": {
              "name": "Old Extra Internal Id",
              "cond": "Has Old Extra Data",
              "ver2": "2.3",
              "type": "uint"
            }
          },
          {
            "_": "Extra string data.",
            "$": {
              "name": "Old Extra String",
              "cond": "Has Old Extra Data",
              "ver2": "2.3",
              "type": "string"
            }
          },
          {
            "_": "Always 0.",
            "$": {
              "name": "Unknown Byte",
              "type": "byte",
              "ver2": "2.3"
            }
          },
          {
            "_": "Extra data object index. (The first in a chain)",
            "$": {
              "name": "Extra Data",
              "type": "Ref",
              "template": "NiExtraData",
              "ver1": "3.0",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "The number of Extra Data objects referenced through the list.",
            "$": {
              "name": "Num Extra Data List",
              "type": "uint",
              "ver1": "10.0.1.0"
            }
          },
          {
            "_": "List of extra data indices.",
            "$": {
              "name": "Extra Data List",
              "type": "Ref",
              "template": "NiExtraData",
              "arr1": "Num Extra Data List",
              "ver1": "10.0.1.0"
            }
          },
          {
            "_": "Controller object index. (The first in a chain)",
            "$": {
              "name": "Controller",
              "type": "Ref",
              "template": "NiTimeController",
              "ver1": "3.0"
            }
          }
        ]
      },
      {
        "_": "\n        This is the most common collision object found in NIF files. It acts as a real object that\n        is visible and possibly (if the body allows for it) interactive. The node itself\n        is simple, it only has three properties.\n        For this type of collision object, bhkRigidBody or bhkRigidBodyT is generally used.\n        \n    ",
        "$": {
          "name": "NiCollisionObject",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Index of the AV object referring to this collision object.",
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Collision box.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiCollisionData",
          "abstract": "0",
          "inherit": "NiCollisionObject"
        },
        "add": [
          {
            "$": {
              "name": "Propagation Mode",
              "type": "PropagationMode"
            }
          },
          {
            "$": {
              "name": "Collision Mode",
              "type": "CollisionMode",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Use Alternate Bounding Volume.",
            "$": {
              "name": "Use ABV",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Bounding Volume",
              "type": "BoundingVolume",
              "cond": "Use ABV == 1"
            }
          }
        ]
      },
      {
        "_": "\n        Havok related collision object?\n        \n        \n    ",
        "$": {
          "name": "bhkNiCollisionObject",
          "abstract": "1",
          "inherit": "NiCollisionObject"
        },
        "add": [
          {
            "_": "\n            Set to 1 for most objects, and to 41 for animated objects (ANIM_STATIC). Bits: 0=Active 2=Notify 3=Set Local 6=Reset.\n        ",
            "$": {
              "name": "Flags",
              "type": "bhkCOFlags",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Body",
              "type": "Ref",
              "template": "bhkWorldObject"
            }
          }
        ]
      },
      {
        "_": "\n        Havok related collision object?\n    ",
        "$": {
          "name": "bhkCollisionObject",
          "abstract": "0",
          "inherit": "bhkNiCollisionObject"
        }
      },
      {
        "_": "\n        Unknown.\n        \n        \n    ",
        "$": {
          "name": "bhkBlendCollisionObject",
          "abstract": "0",
          "inherit": "bhkCollisionObject"
        },
        "add": [
          {
            "$": {
              "name": "Heir Gain",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Vel Gain",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown.\n    ",
        "$": {
          "name": "bhkPCollisionObject",
          "abstract": "0",
          "inherit": "bhkNiCollisionObject"
        }
      },
      {
        "_": "\n        Unknown.\n    ",
        "$": {
          "name": "bhkSPCollisionObject",
          "abstract": "0",
          "inherit": "bhkPCollisionObject"
        }
      },
      {
        "_": "\n        Abstract audio-visual base class from which all of Gamebryo's scene graph objects inherit.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiAVObject",
          "abstract": "1",
          "inherit": "NiObjectNET"
        },
        "add": [
          {
            "_": "Basic flags for AV objects. For Bethesda streams above 26 only.",
            "$": {
              "name": "Flags",
              "type": "uint",
              "default": "14",
              "vercond": "(User Version 2 > 26)"
            }
          },
          {
            "_": "Basic flags for AV objects; commonly 0x000C or 0x000A.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver1": "3.0",
              "vercond": "(User Version 2 <= 26)"
            }
          },
          {
            "_": "The translation vector.",
            "$": {
              "name": "Translation",
              "type": "Vector3"
            }
          },
          {
            "_": "The rotation part of the transformation matrix.",
            "$": {
              "name": "Rotation",
              "type": "Matrix33"
            }
          },
          {
            "_": "Scaling part (only uniform scaling is supported).",
            "$": {
              "name": "Scale",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Unknown function. Always seems to be (0, 0, 0)",
            "$": {
              "name": "Velocity",
              "type": "Vector3",
              "ver2": "4.2.2.0"
            }
          },
          {
            "$": {
              "name": "Num Properties",
              "type": "uint",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "_": "All rendering properties attached to this object.",
            "$": {
              "name": "Properties",
              "type": "Ref",
              "template": "NiProperty",
              "arr1": "Num Properties",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "_": "Always 2,0,2,0.",
            "$": {
              "name": "Unknown 1",
              "type": "uint",
              "arr1": "4",
              "ver2": "2.3"
            }
          },
          {
            "_": "0 or 1.",
            "$": {
              "name": "Unknown 2",
              "type": "byte",
              "ver2": "2.3"
            }
          },
          {
            "$": {
              "name": "Has Bounding Volume",
              "type": "bool",
              "ver1": "3.0",
              "ver2": "4.2.2.0"
            }
          },
          {
            "$": {
              "name": "Bounding Volume",
              "type": "BoundingVolume",
              "cond": "Has Bounding Volume",
              "ver1": "3.0",
              "ver2": "4.2.2.0"
            }
          },
          {
            "$": {
              "name": "Collision Object",
              "type": "Ref",
              "template": "NiCollisionObject",
              "ver1": "10.0.1.0"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for dynamic effects such as NiLights or projected texture effects.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiDynamicEffect",
          "abstract": "1",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "If true, then the dynamic effect is applied to affected nodes during rendering.",
            "$": {
              "name": "Switch State",
              "type": "bool",
              "default": "1",
              "ver1": "10.1.0.106",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "$": {
              "name": "Num Affected Nodes",
              "type": "uint",
              "ver2": "4.0.0.2"
            }
          },
          {
            "_": "If a node appears in this list, then its entire subtree will be affected by the effect.",
            "$": {
              "name": "Affected Nodes",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Affected Nodes",
              "ver2": "3.3.0.13"
            }
          },
          {
            "_": "As of 4.0 the pointer hash is no longer stored alongside each NiObject on disk, yet this node list still refers to the pointer hashes. Cannot leave the type as Ptr because the link will be invalid.",
            "$": {
              "name": "Affected Node Pointers",
              "type": "uint",
              "arr1": "Num Affected Nodes",
              "ver1": "4.0.0.0",
              "ver2": "4.0.0.2"
            }
          },
          {
            "$": {
              "name": "Num Affected Nodes",
              "type": "uint",
              "ver1": "10.1.0.0",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "_": "If a node appears in this list, then its entire subtree will be affected by the effect.",
            "$": {
              "name": "Affected Nodes",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Affected Nodes",
              "ver1": "10.1.0.0",
              "vercond": "User Version 2 < 130"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class that represents light sources in a scene graph.\n        For Bethesda Stream 130 (FO4), NiLight now directly inherits from NiAVObject.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiLight",
          "abstract": "1",
          "inherit": "NiDynamicEffect"
        },
        "add": [
          {
            "_": "Scales the overall brightness of all light components.",
            "$": {
              "name": "Dimmer",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "$": {
              "name": "Ambient Color",
              "type": "Color3",
              "default": "0.0, 0.0, 0.0"
            }
          },
          {
            "$": {
              "name": "Diffuse Color",
              "type": "Color3",
              "default": "0.0, 0.0, 0.0"
            }
          },
          {
            "$": {
              "name": "Specular Color",
              "type": "Color3",
              "default": "0.0, 0.0, 0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class representing all rendering properties. Subclasses are attached to NiAVObjects to control their rendering.\n    ",
        "$": {
          "name": "NiProperty",
          "abstract": "1",
          "inherit": "NiObjectNET"
        }
      },
      {
        "_": "\n        Unknown\n        \n    ",
        "$": {
          "name": "NiTransparentProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown",
              "type": "byte",
              "arr1": "6"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle system modifiers.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysModifier",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Used to locate the modifier.",
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "_": "Modifier ID in the particle modifier chain (always a multiple of 1000)?",
            "$": {
              "name": "Order",
              "type": "uint"
            }
          },
          {
            "_": "NiParticleSystem parent of this modifier.",
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiParticleSystem"
            }
          },
          {
            "_": "Whether or not the modifier is active.",
            "$": {
              "name": "Active",
              "type": "bool",
              "default": "1"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle system emitters.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysEmitter",
          "abstract": "1",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Speed / Inertia of particle movement.",
            "$": {
              "name": "Speed",
              "type": "float"
            }
          },
          {
            "_": "Adds an amount of randomness to Speed.",
            "$": {
              "name": "Speed Variation",
              "type": "float"
            }
          },
          {
            "_": "Declination / First axis.",
            "$": {
              "name": "Declination",
              "type": "float"
            }
          },
          {
            "_": "Declination randomness / First axis.",
            "$": {
              "name": "Declination Variation",
              "type": "float"
            }
          },
          {
            "_": "Planar Angle / Second axis.",
            "$": {
              "name": "Planar Angle",
              "type": "float"
            }
          },
          {
            "_": "Planar Angle randomness / Second axis .",
            "$": {
              "name": "Planar Angle Variation",
              "type": "float"
            }
          },
          {
            "_": "Defines color of a birthed particle.",
            "$": {
              "name": "Initial Color",
              "type": "Color4"
            }
          },
          {
            "_": "Size of a birthed particle.",
            "$": {
              "name": "Initial Radius",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Particle Radius randomness.",
            "$": {
              "name": "Radius Variation",
              "type": "float",
              "ver1": "10.4.0.1"
            }
          },
          {
            "_": "Duration until a particle dies.",
            "$": {
              "name": "Life Span",
              "type": "float"
            }
          },
          {
            "_": "Adds randomness to Life Span.",
            "$": {
              "name": "Life Span Variation",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for particle emitters that emit particles from a volume.\n        \n    ",
        "$": {
          "name": "NiPSysVolumeEmitter",
          "abstract": "1",
          "inherit": "NiPSysEmitter"
        },
        "add": [
          {
            "_": "Node parent of this modifier?",
            "$": {
              "name": "Emitter Object",
              "type": "Ptr",
              "template": "NiNode",
              "ver1": "10.1.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class that provides the base timing and update functionality for all the Gamebryo animation controllers.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTimeController",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Index of the next controller.",
            "$": {
              "name": "Next Controller",
              "type": "Ref",
              "template": "NiTimeController"
            }
          },
          {
            "_": "\n            Controller flags.\n            Bit 0 : Anim type, 0=APP_TIME 1=APP_INIT\n            Bit 1-2 : Cycle type, 00=Loop 01=Reverse 10=Clamp\n            Bit 3 : Active\n            Bit 4 : Play backwards\n            Bit 5 : Is manager controlled\n            Bit 6 : Always seems to be set in Skyrim and Fallout NIFs, unknown function\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          },
          {
            "_": "Frequency (is usually 1.0).",
            "$": {
              "name": "Frequency",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Phase (usually 0.0).",
            "$": {
              "name": "Phase",
              "type": "float"
            }
          },
          {
            "_": "Controller start time.",
            "$": {
              "name": "Start Time",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "_": "Controller stop time.",
            "$": {
              "name": "Stop Time",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          },
          {
            "_": "Controller target (object index of the first controllable ancestor of this object).",
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiObjectNET",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "Unknown integer.",
            "$": {
              "name": "Unknown Integer",
              "type": "uint",
              "ver2": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all NiTimeController objects using NiInterpolator objects to animate their target objects.\n    ",
        "$": {
          "name": "NiInterpController",
          "abstract": "1",
          "inherit": "NiTimeController"
        }
      },
      {
        "_": "\n        DEPRECATED (20.6)\n        \n        \n    ",
        "$": {
          "name": "NiMultiTargetTransformController",
          "abstract": "0",
          "inherit": "NiInterpController"
        },
        "add": [
          {
            "_": "The number of target pointers that follow.",
            "$": {
              "name": "Num Extra Targets",
              "type": "ushort"
            }
          },
          {
            "_": "NiNode Targets to be controlled.",
            "$": {
              "name": "Extra Targets",
              "type": "Ptr",
              "template": "NiAVObject",
              "arr1": "Num Extra Targets"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5), replaced by NiMorphMeshModifier.\n        Time controller for geometry morphing.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiGeomMorpherController",
          "abstract": "0",
          "inherit": "NiInterpController"
        },
        "add": [
          {
            "_": "1 = UPDATE NORMALS",
            "$": {
              "name": "Extra Flags",
              "type": "Flags",
              "ver1": "10.0.1.2"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 2",
              "type": "byte",
              "ver1": "10.1.0.106",
              "ver2": "10.1.0.106"
            }
          },
          {
            "_": "Geometry morphing data index.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiMorphData"
            }
          },
          {
            "$": {
              "name": "Always Update",
              "type": "byte",
              "ver1": "4.0.0.1"
            }
          },
          {
            "$": {
              "name": "Num Interpolators",
              "type": "uint",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Interpolators",
              "type": "Ref",
              "template": "NiInterpolator",
              "arr1": "Num Interpolators",
              "ver1": "10.1.0.106",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Interpolator Weights",
              "type": "MorphWeight",
              "arr1": "Num Interpolators",
              "ver1": "20.1.0.3"
            }
          },
          {
            "$": {
              "name": "Num Unknown Ints",
              "type": "uint",
              "ver1": "20.0.0.4",
              "ver2": "20.0.0.5",
              "vercond": "(User Version 2 > 0)"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Ints",
              "type": "uint",
              "arr1": "Num Unknown Ints",
              "ver1": "20.0.0.4",
              "ver2": "20.0.0.5",
              "vercond": "(User Version 2 > 0)"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown! Used by Daoc->'healing.nif'.\n    ",
        "$": {
          "name": "NiMorphController",
          "abstract": "0",
          "inherit": "NiInterpController"
        }
      },
      {
        "_": "\n        Unknown! Used by Daoc.\n        \n    ",
        "$": {
          "name": "NiMorpherController",
          "abstract": "0",
          "inherit": "NiInterpController"
        },
        "add": [
          {
            "_": "This controller's data.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiMorphData"
            }
          }
        ]
      },
      {
        "_": "\n        Uses a single NiInterpolator to animate its target value.\n        \n    ",
        "$": {
          "name": "NiSingleInterpController",
          "abstract": "1",
          "inherit": "NiInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Interpolator",
              "type": "Ref",
              "template": "NiInterpolator",
              "ver1": "10.2.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2), RENAMED (10.2) to NiTransformController\n        A time controller object for animation key frames.\n        \n    ",
        "$": {
          "name": "NiKeyframeController",
          "abstract": "0",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiKeyframeData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        NiTransformController replaces NiKeyframeController.\n    ",
        "$": {
          "name": "NiTransformController",
          "abstract": "0",
          "inherit": "NiKeyframeController"
        }
      },
      {
        "_": "\n        A particle system modifier controller.\n        NiInterpController::GetCtlrID() string format:\n            '%s'\n        Where %s = Value of \"Modifier Name\"\n        \n    ",
        "$": {
          "name": "NiPSysModifierCtlr",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "_": "Used to find the modifier pointer.",
            "$": {
              "name": "Modifier Name",
              "type": "string"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system emitter controller.\n        NiInterpController::GetInterpolatorID() string format:\n            ['BirthRate', 'EmitterActive'] (for \"Interpolator\" and \"Visibility Interpolator\" respectively)\n        \n        \n    ",
        "$": {
          "name": "NiPSysEmitterCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierCtlr"
        },
        "add": [
          {
            "$": {
              "name": "Visibility Interpolator",
              "type": "Ref",
              "template": "NiInterpolator",
              "ver1": "10.2.0.0"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPSysEmitterCtlrData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        A particle system modifier controller that animates a boolean value for particles.\n    ",
        "$": {
          "name": "NiPSysModifierBoolCtlr",
          "abstract": "1",
          "inherit": "NiPSysModifierCtlr"
        }
      },
      {
        "_": "\n        A particle system modifier controller that animates active/inactive state for particles.\n        \n    ",
        "$": {
          "name": "NiPSysModifierActiveCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierBoolCtlr"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiVisData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        A particle system modifier controller that animates a floating point value for particles.\n        \n    ",
        "$": {
          "name": "NiPSysModifierFloatCtlr",
          "abstract": "1",
          "inherit": "NiPSysModifierCtlr"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Animates the declination value on an NiPSysEmitter object.\n    ",
        "$": {
          "name": "NiPSysEmitterDeclinationCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the declination variation value on an NiPSysEmitter object.\n    ",
        "$": {
          "name": "NiPSysEmitterDeclinationVarCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the size value on an NiPSysEmitter object.\n    ",
        "$": {
          "name": "NiPSysEmitterInitialRadiusCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the lifespan value on an NiPSysEmitter object.\n    ",
        "$": {
          "name": "NiPSysEmitterLifeSpanCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the speed value on an NiPSysEmitter object.\n    ",
        "$": {
          "name": "NiPSysEmitterSpeedCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the strength value of an NiPSysGravityModifier.\n    ",
        "$": {
          "name": "NiPSysGravityStrengthCtlr",
          "abstract": "0",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Abstract base class for all NiInterpControllers that use an NiInterpolator to animate their target float value.\n    ",
        "$": {
          "name": "NiFloatInterpController",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        }
      },
      {
        "_": "\n        Changes the image a Map (TexDesc) will use. Uses a float interpolator to animate the texture index.\n        Often used for performing flipbook animation.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiFlipController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        },
        "add": [
          {
            "_": "Target texture slot (0=base, 4=glow).",
            "$": {
              "name": "Texture Slot",
              "type": "TexType"
            }
          },
          {
            "$": {
              "name": "Start Time",
              "type": "float",
              "ver1": "3.3.0.13",
              "ver2": "10.1.0.103"
            }
          },
          {
            "_": "\n            Time between two flips.\n            delta = (start_time - stop_time) / sources.num_indices\n        ",
            "$": {
              "name": "Delta",
              "type": "float",
              "ver2": "10.1.0.103"
            }
          },
          {
            "$": {
              "name": "Num Sources",
              "type": "uint"
            }
          },
          {
            "_": "The texture sources.",
            "$": {
              "name": "Sources",
              "type": "Ref",
              "template": "NiSourceTexture",
              "arr1": "Num Sources",
              "ver1": "4.0.0.0"
            }
          },
          {
            "_": "The image sources",
            "$": {
              "name": "Images",
              "type": "Ref",
              "template": "NiImage",
              "arr1": "Num Sources",
              "ver2": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        Animates the alpha value of a property using an interpolator.\n        \n    ",
        "$": {
          "name": "NiAlphaController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Used to animate a single member of an NiTextureTransform.\n        NiInterpController::GetCtlrID() string formats:\n            ['%1-%2-TT_TRANSLATE_U', '%1-%2-TT_TRANSLATE_V', '%1-%2-TT_ROTATE', '%1-%2-TT_SCALE_U', '%1-%2-TT_SCALE_V']\n        (Depending on \"Operation\" enumeration, %1 = Value of \"Shader Map\", %2 = Value of \"Texture Slot\")\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTextureTransformController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        },
        "add": [
          {
            "_": "Is the target map a shader map?",
            "$": {
              "name": "Shader Map",
              "type": "bool"
            }
          },
          {
            "_": "The target texture slot.",
            "$": {
              "name": "Texture Slot",
              "type": "TexType"
            }
          },
          {
            "_": "Controls which aspect of the texture transform to modify.",
            "$": {
              "name": "Operation",
              "type": "TransformMember"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown controller.\n    ",
        "$": {
          "name": "NiLightDimmerController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n        Abstract base class for all NiInterpControllers that use a NiInterpolator to animate their target boolean value.\n    ",
        "$": {
          "name": "NiBoolInterpController",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        }
      },
      {
        "_": "\n        Animates the visibility of an NiAVObject.\n        \n    ",
        "$": {
          "name": "NiVisController",
          "abstract": "0",
          "inherit": "NiBoolInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiVisData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all NiInterpControllers that use an NiInterpolator to animate their target NiPoint3 value.\n    ",
        "$": {
          "name": "NiPoint3InterpController",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        }
      },
      {
        "_": "\n        Time controller for material color. Flags are used for color selection in versions below 10.1.0.0.\n        Bits 4-5: Target Color (00 = Ambient, 01 = Diffuse, 10 = Specular, 11 = Emissive)\n        NiInterpController::GetCtlrID() string formats:\n            ['AMB', 'DIFF', 'SPEC', 'SELF_ILLUM'] (Depending on \"Target Color\")\n        \n        \n    ",
        "$": {
          "name": "NiMaterialColorController",
          "abstract": "0",
          "inherit": "NiPoint3InterpController"
        },
        "add": [
          {
            "_": "Selects which color to control.",
            "$": {
              "name": "Target Color",
              "type": "MaterialColor",
              "ver1": "10.1.0.0"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPosData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Animates the ambient, diffuse and specular colors of an NiLight.\n        NiInterpController::GetCtlrID() string formats:\n            ['Diffuse', 'Ambient'] (Depending on \"Target Color\")\n        \n        \n    ",
        "$": {
          "name": "NiLightColorController",
          "abstract": "0",
          "inherit": "NiPoint3InterpController"
        },
        "add": [
          {
            "$": {
              "name": "Target Color",
              "type": "LightColor",
              "ver1": "10.1.0.0"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPosData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all extra data controllers.\n        NiInterpController::GetCtlrID() string format:\n            '%s'\n        Where %s = Value of \"Extra Data Name\"\n        \n    ",
        "$": {
          "name": "NiExtraDataController",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Extra Data Name",
              "type": "string",
              "ver1": "10.2.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Animates an NiFloatExtraData object attached to an NiAVObject.\n        NiInterpController::GetCtlrID() string format is same as parent.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiFloatExtraDataController",
          "abstract": "0",
          "inherit": "NiExtraDataController"
        },
        "add": [
          {
            "_": "Number of extra bytes.",
            "$": {
              "name": "Num Extra Bytes",
              "type": "byte",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Bytes",
              "type": "byte",
              "arr1": "7",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Extra Bytes",
              "type": "byte",
              "arr1": "Num Extra Bytes",
              "ver2": "10.1.0.0"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Animates an NiFloatsExtraData object attached to an NiAVObject.\n        NiInterpController::GetCtlrID() string format:\n            '%s[%d]'\n        Where %s = Value of \"Extra Data Name\", %d = Value of \"Floats Extra Data Index\"\n        \n        \n    ",
        "$": {
          "name": "NiFloatsExtraDataController",
          "abstract": "0",
          "inherit": "NiExtraDataController"
        },
        "add": [
          {
            "$": {
              "name": "Floats Extra Data Index",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData",
              "ver2": "10.1.0.103"
            }
          }
        ]
      },
      {
        "_": "\n        Animates an NiFloatsExtraData object attached to an NiAVObject.\n        NiInterpController::GetCtlrID() string format:\n            '%s[%d]'\n        Where %s = Value of \"Extra Data Name\", %d = Value of \"Floats Extra Data Index\"\n        \n    ",
        "$": {
          "name": "NiFloatsExtraDataPoint3Controller",
          "abstract": "0",
          "inherit": "NiExtraDataController"
        },
        "add": [
          {
            "$": {
              "name": "Floats Extra Data Index",
              "type": "int"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5), Replaced by NiSkinningLODController.\n        Level of detail controller for bones.  Priority is arranged from low to high.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBoneLODController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "LOD",
              "type": "uint"
            }
          },
          {
            "_": "Number of LODs.",
            "$": {
              "name": "Num LODs",
              "type": "uint"
            }
          },
          {
            "_": "Number of node arrays.",
            "$": {
              "name": "Num Node Groups",
              "type": "uint"
            }
          },
          {
            "_": "A list of node sets (each set a sequence of bones).",
            "$": {
              "name": "Node Groups",
              "type": "NodeSet",
              "arr1": "Num LODs"
            }
          },
          {
            "_": "Number of shape groups.",
            "$": {
              "name": "Num Shape Groups",
              "type": "uint",
              "ver1": "4.2.2.0",
              "userver": "0"
            }
          },
          {
            "_": "Number of shape groups.",
            "$": {
              "name": "Num Shape Groups",
              "type": "uint",
              "ver1": "10.2.0.0",
              "ver2": "10.2.0.0",
              "userver": "1"
            }
          },
          {
            "_": "List of shape groups.",
            "$": {
              "name": "Shape Groups 1",
              "type": "SkinInfoSet",
              "arr1": "Num Shape Groups",
              "ver1": "4.2.2.0",
              "userver": "0"
            }
          },
          {
            "_": "List of shape groups.",
            "$": {
              "name": "Shape Groups 1",
              "type": "SkinInfoSet",
              "arr1": "Num Shape Groups",
              "ver1": "10.2.0.0",
              "ver2": "10.2.0.0",
              "userver": "1"
            }
          },
          {
            "_": "The size of the second list of shape groups.",
            "$": {
              "name": "Num Shape Groups 2",
              "type": "uint",
              "ver1": "4.2.2.0",
              "userver": "0"
            }
          },
          {
            "_": "The size of the second list of shape groups.",
            "$": {
              "name": "Num Shape Groups 2",
              "type": "uint",
              "ver1": "10.2.0.0",
              "ver2": "10.2.0.0",
              "userver": "1"
            }
          },
          {
            "_": "Group of NiTriShape indices.",
            "$": {
              "name": "Shape Groups 2",
              "type": "Ref",
              "template": "NiTriBasedGeom",
              "arr1": "Num Shape Groups 2",
              "ver1": "4.2.2.0",
              "userver": "0"
            }
          },
          {
            "_": "Group of NiTriShape indices.",
            "$": {
              "name": "Shape Groups 2",
              "type": "Ref",
              "template": "NiTriBasedGeom",
              "arr1": "Num Shape Groups 2",
              "ver1": "10.2.0.0",
              "ver2": "10.2.0.0",
              "userver": "1"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 2",
              "type": "int",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 3",
              "type": "int",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          }
        ]
      },
      {
        "_": "\n        A simple LOD controller for bones.\n    ",
        "$": {
          "name": "NiBSBoneLODController",
          "abstract": "0",
          "inherit": "NiBoneLODController"
        }
      },
      {
        "_": "\n        Describes a visible scene element with vertices like a mesh, a particle system, lines, etc.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiGeometry",
          "abstract": "1",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "$": {
              "name": "Bound",
              "type": "NiBound",
              "vercond": "(User Version 2 >= 100)",
              "cond": "NiParticleSystem"
            }
          },
          {
            "$": {
              "name": "Skin",
              "type": "Ref",
              "template": "NiObject",
              "vercond": "(User Version 2 >= 100)",
              "cond": "NiParticleSystem"
            }
          },
          {
            "_": "Data index (NiTriShapeData/NiTriStripData).",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiGeometryData",
              "vercond": "(User Version 2 < 100)"
            }
          },
          {
            "_": "Data index (NiTriShapeData/NiTriStripData).",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiGeometryData",
              "vercond": "(User Version 2 >= 100)",
              "cond": "!NiParticleSystem"
            }
          },
          {
            "$": {
              "name": "Skin Instance",
              "type": "Ref",
              "template": "NiSkinInstance",
              "ver1": "3.3.0.13",
              "vercond": "(User Version 2 < 100)"
            }
          },
          {
            "$": {
              "name": "Skin Instance",
              "type": "Ref",
              "template": "NiSkinInstance",
              "vercond": "(User Version 2 >= 100)",
              "cond": "!NiParticleSystem"
            }
          },
          {
            "$": {
              "name": "Material Data",
              "type": "MaterialData",
              "ver1": "10.0.1.0",
              "vercond": "(User Version 2 < 100)"
            }
          },
          {
            "$": {
              "name": "Material Data",
              "type": "MaterialData",
              "ver1": "10.0.1.0",
              "vercond": "(User Version 2 >= 100)",
              "cond": "!NiParticleSystem"
            }
          },
          {
            "$": {
              "name": "Shader Property",
              "type": "Ref",
              "template": "BSShaderProperty",
              "ver1": "20.2.0.7",
              "userver": "12"
            }
          },
          {
            "$": {
              "name": "Alpha Property",
              "type": "Ref",
              "template": "NiAlphaProperty",
              "ver1": "20.2.0.7",
              "userver": "12"
            }
          }
        ]
      },
      {
        "_": "\n        Describes a mesh, built from triangles.\n    ",
        "$": {
          "name": "NiTriBasedGeom",
          "abstract": "1",
          "inherit": "NiGeometry"
        }
      },
      {
        "_": "\n        Mesh data: vertices, vertex normals, etc.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiGeometryData",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Always zero.",
            "$": {
              "name": "Group ID",
              "type": "int",
              "ver1": "10.1.0.114"
            }
          },
          {
            "_": "Number of vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort",
              "cond": "!NiPSysData"
            }
          },
          {
            "_": "Number of vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort",
              "cond": "NiPSysData",
              "vercond": "(User Version 2 < 34)"
            }
          },
          {
            "_": "Bethesda uses this for max number of particles in NiPSysData.",
            "$": {
              "name": "BS Max Vertices",
              "type": "ushort",
              "cond": "NiPSysData",
              "vercond": "(User Version 2 >= 34)"
            }
          },
          {
            "_": "Used with NiCollision objects when OBB or TRI is set.",
            "$": {
              "name": "Keep Flags",
              "type": "byte",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Compress Flags",
              "type": "byte",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Is the vertex array present? (Always non-zero.)",
            "$": {
              "name": "Has Vertices",
              "type": "bool",
              "default": "1"
            }
          },
          {
            "_": "The mesh vertices.",
            "$": {
              "name": "Vertices",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "Has Vertices"
            }
          },
          {
            "$": {
              "name": "Vector Flags",
              "type": "VectorFlags",
              "ver1": "10.0.1.0",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "BS Vector Flags",
              "type": "BSVectorFlags",
              "vercond": "((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "Material CRC",
              "type": "uint",
              "ver1": "20.2.0.7",
              "ver2": "20.2.0.7",
              "userver": "12"
            }
          },
          {
            "_": "Do we have lighting normals? These are essential for proper lighting: if not present, the model will only be influenced by ambient light.",
            "$": {
              "name": "Has Normals",
              "type": "bool"
            }
          },
          {
            "_": "The lighting normals.",
            "$": {
              "name": "Normals",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "Has Normals"
            }
          },
          {
            "_": "Tangent vectors.",
            "$": {
              "name": "Tangents",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "(Has Normals) && ((Vector Flags | BS Vector Flags) & 4096)",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Bitangent vectors.",
            "$": {
              "name": "Bitangents",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "(Has Normals) && ((Vector Flags | BS Vector Flags) & 4096)",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Center of the bounding box (smallest box that contains all vertices) of the mesh.",
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "_": "Radius of the mesh: maximal Euclidean distance between the center and all vertices.",
            "$": {
              "name": "Radius",
              "type": "float"
            }
          },
          {
            "_": "Unknown, always 0?",
            "$": {
              "name": "Unknown 13 shorts",
              "type": "short",
              "arr1": "13",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          },
          {
            "_": "\n            Do we have vertex colors? These are usually used to fine-tune the lighting of the model.\n\n            Note: how vertex colors influence the model can be controlled by having a NiVertexColorProperty object as a property child of the root node. If this property object is not present, the vertex colors fine-tune lighting.\n\n            Note 2: set to either 0 or 0xFFFFFFFF for NifTexture compatibility.\n        ",
            "$": {
              "name": "Has Vertex Colors",
              "type": "bool"
            }
          },
          {
            "_": "The vertex colors.",
            "$": {
              "name": "Vertex Colors",
              "type": "Color4",
              "arr1": "Num Vertices",
              "cond": "Has Vertex Colors"
            }
          },
          {
            "_": "The lower 6 (or less?) bits of this field represent the number of UV texture sets. The other bits are probably flag bits. For versions 10.1.0.0 and up, if bit 12 is set then extra vectors are present after the normals.",
            "$": {
              "name": "Num UV Sets",
              "type": "ushort",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "\n            Do we have UV coordinates?\n\n            Note: for compatibility with NifTexture, set this value to either 0x00000000 or 0xFFFFFFFF.\n        ",
            "$": {
              "name": "Has UV",
              "type": "bool",
              "ver2": "4.0.0.2"
            }
          },
          {
            "_": "The UV texture coordinates. They follow the OpenGL standard: some programs may require you to flip the second coordinate.",
            "$": {
              "name": "UV Sets",
              "type": "TexCoord",
              "arr1": "((Num UV Sets & 63) | (Vector Flags & 63) | (BS Vector Flags & 1))",
              "arr2": "Num Vertices"
            }
          },
          {
            "_": "Consistency Flags",
            "$": {
              "name": "Consistency Flags",
              "type": "ConsistencyType",
              "ver1": "10.0.1.0",
              "default": "CT_MUTABLE"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Additional Data",
              "type": "Ref",
              "template": "AbstractAdditionalGeometryData",
              "ver1": "20.0.0.4"
            }
          }
        ]
      },
      {
        "$": {
          "name": "AbstractAdditionalGeometryData",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Describes a mesh, built from triangles.\n        \n    ",
        "$": {
          "name": "NiTriBasedGeomData",
          "abstract": "1",
          "inherit": "NiGeometryData"
        },
        "add": [
          {
            "_": "Number of triangles.",
            "$": {
              "name": "Num Triangles",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown. Is apparently only used in skeleton.nif files.\n        \n    ",
        "$": {
          "name": "bhkBlendController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "Seems to be always zero.",
            "$": {
              "name": "Keys",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific collision bounding box for skeletons.\n        \n        \n    ",
        "$": {
          "name": "BSBound",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Center of the bounding box.",
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "_": "Dimensions of the bounding box from center.",
            "$": {
              "name": "Dimensions",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown. Marks furniture sitting positions?\n        \n        \n    ",
        "$": {
          "name": "BSFurnitureMarker",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of positions.",
            "$": {
              "name": "Num Positions",
              "type": "uint"
            }
          },
          {
            "_": "Unknown. Probably has something to do with the furniture positions?",
            "$": {
              "name": "Positions",
              "type": "FurniturePosition",
              "arr1": "Num Positions"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that adds a blend of object space translation and rotation to particles born in world space.\n        \n    ",
        "$": {
          "name": "BSParentVelocityModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Amount of blending?",
            "$": {
              "name": "Damping",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle emitter that uses a node, its children and subchildren to emit from.  Emission will be evenly spread along points from nodes leading to their direct parents/children only.\n    ",
        "$": {
          "name": "BSPSysArrayEmitter",
          "abstract": "0",
          "inherit": "NiPSysVolumeEmitter"
        }
      },
      {
        "_": "\n        Particle Modifier that uses the wind value from the gamedata to alter the path of particles.\n        \n    ",
        "$": {
          "name": "BSWindModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The amount of force wind will have on particles.",
            "$": {
              "name": "Strength",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        NiTriStripsData for havok data?\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "hkPackedNiTriStripsData",
          "abstract": "0",
          "inherit": "bhkShapeCollection"
        },
        "add": [
          {
            "$": {
              "name": "Num Triangles",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Triangles",
              "type": "TriangleData",
              "arr1": "Num Triangles"
            }
          },
          {
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Byte 1",
              "type": "byte",
              "ver1": "20.2.0.7"
            }
          },
          {
            "$": {
              "name": "Vertices",
              "type": "Vector3",
              "arr1": "Num Vertices"
            }
          },
          {
            "_": "Number of subparts.",
            "$": {
              "name": "Num Sub Shapes",
              "type": "ushort",
              "ver1": "20.2.0.7"
            }
          },
          {
            "_": "The subparts.",
            "$": {
              "name": "Sub Shapes",
              "type": "OblivionSubShape",
              "arr1": "Num Sub Shapes",
              "ver1": "20.2.0.7"
            }
          }
        ]
      },
      {
        "_": "\n        Transparency. Flags 0x00ED.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiAlphaProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Bit 0 : alpha blending enable\n            Bits 1-4 : source blend mode\n            Bits 5-8 : destination blend mode\n            Bit 9 : alpha test enable\n            Bit 10-12 : alpha test mode\n            Bit 13 : no sorter flag ( disables triangle sorting )\n\n            blend modes (glBlendFunc):\n            0000 GL_ONE\n            0001 GL_ZERO\n            0010 GL_SRC_COLOR\n            0011 GL_ONE_MINUS_SRC_COLOR\n            0100 GL_DST_COLOR\n            0101 GL_ONE_MINUS_DST_COLOR\n            0110 GL_SRC_ALPHA\n            0111 GL_ONE_MINUS_SRC_ALPHA\n            1000 GL_DST_ALPHA\n            1001 GL_ONE_MINUS_DST_ALPHA\n            1010 GL_SRC_ALPHA_SATURATE\n\n            test modes (glAlphaFunc):\n            000 GL_ALWAYS\n            001 GL_LESS\n            010 GL_EQUAL\n            011 GL_LEQUAL\n            100 GL_GREATER\n            101 GL_NOTEQUAL\n            110 GL_GEQUAL\n            111 GL_NEVER\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "default": "4844"
            }
          },
          {
            "_": "Threshold for alpha testing (see: glAlphaFunc)",
            "$": {
              "name": "Threshold",
              "type": "byte",
              "default": "128"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Short 1",
              "type": "ushort",
              "ver2": "2.3"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 2",
              "type": "uint",
              "ver2": "2.3"
            }
          }
        ]
      },
      {
        "_": "\n        Ambient light source.\n    ",
        "$": {
          "name": "NiAmbientLight",
          "abstract": "0",
          "inherit": "NiLight"
        }
      },
      {
        "_": "\n        Generic rotating particles data object.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiParticlesData",
          "abstract": "0",
          "inherit": "NiGeometryData"
        },
        "add": [
          {
            "_": "The maximum number of particles (matches the number of vertices).",
            "$": {
              "name": "Num Particles",
              "type": "ushort",
              "ver2": "4.0.0.2"
            }
          },
          {
            "_": "The particles' size.",
            "$": {
              "name": "Particle Radius",
              "type": "float",
              "ver2": "10.0.1.0"
            }
          },
          {
            "_": "Is the particle size array present?",
            "$": {
              "name": "Has Radii",
              "type": "bool",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The individual particle sizes.",
            "$": {
              "name": "Radii",
              "type": "float",
              "arr1": "Num Vertices",
              "cond": "Has Radii",
              "ver1": "10.1.0.0",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "The number of active particles at the time the system was saved. This is also the number of valid entries in the following arrays.",
            "$": {
              "name": "Num Active",
              "type": "ushort"
            }
          },
          {
            "_": "Is the particle size array present?",
            "$": {
              "name": "Has Sizes",
              "type": "bool"
            }
          },
          {
            "_": "The individual particle sizes.",
            "$": {
              "name": "Sizes",
              "type": "float",
              "arr1": "Num Vertices",
              "cond": "Has Sizes",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "Is the particle rotation array present?",
            "$": {
              "name": "Has Rotations",
              "type": "bool",
              "ver1": "10.0.1.0"
            }
          },
          {
            "_": "The individual particle rotations.",
            "$": {
              "name": "Rotations",
              "type": "Quaternion",
              "arr1": "Num Vertices",
              "cond": "Has Rotations",
              "ver1": "10.0.1.0",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "Are the angles of rotation present?",
            "$": {
              "name": "Has Rotation Angles",
              "type": "bool",
              "ver1": "20.0.0.4"
            }
          },
          {
            "_": "Angles of rotation",
            "$": {
              "name": "Rotation Angles",
              "type": "float",
              "arr1": "Num Vertices",
              "cond": "Has Rotation Angles",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "Are axes of rotation present?",
            "$": {
              "name": "Has Rotation Axes",
              "type": "bool",
              "ver1": "20.0.0.4"
            }
          },
          {
            "_": "Axes of rotation.",
            "$": {
              "name": "Rotation Axes",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "Has Rotation Axes",
              "ver1": "20.0.0.4",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "Has Texture Indices",
              "type": "bool",
              "vercond": "((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "How many quads to use in BSPSysSubTexModifier for texture atlasing",
            "$": {
              "name": "Num Subtexture Offsets",
              "type": "uint",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "_": "2,4,8,16,32,64 are potential values. If \"Has\" was no then this should be 256, which represents a 16x16 framed image, which is invalid",
            "$": {
              "name": "Num Subtexture Offsets",
              "type": "byte",
              "vercond": "(Version == 20.2.0.7) && (User Version 2 <= 34) && (User Version 2 > 0)"
            }
          },
          {
            "_": "Defines UV offsets",
            "$": {
              "name": "Subtexture Offsets",
              "type": "Vector4",
              "arr1": "Num Subtexture Offsets",
              "vercond": "((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "_": "Sets aspect ratio for Subtexture Offset UV quads",
            "$": {
              "name": "Aspect Ratio",
              "type": "float",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Aspect Flags",
              "type": "ushort",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Speed to Aspect Aspect 2",
              "type": "float",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Speed to Aspect Speed 1",
              "type": "float",
              "vercond": "(User Version 2 > 34)"
            }
          },
          {
            "$": {
              "name": "Speed to Aspect Speed 2",
              "type": "float",
              "vercond": "(User Version 2 > 34)"
            }
          }
        ]
      },
      {
        "_": "\n        Rotating particles data object.\n        \n        \n    ",
        "$": {
          "name": "NiRotatingParticlesData",
          "abstract": "0",
          "inherit": "NiParticlesData"
        },
        "add": [
          {
            "_": "Is the particle rotation array present?",
            "$": {
              "name": "Has Rotations 2",
              "type": "bool",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "The individual particle rotations.",
            "$": {
              "name": "Rotations 2",
              "type": "Quaternion",
              "arr1": "Num Vertices",
              "cond": "Has Rotations 2",
              "ver2": "4.2.2.0"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system data object (with automatic normals?).\n    ",
        "$": {
          "name": "NiAutoNormalParticlesData",
          "abstract": "0",
          "inherit": "NiParticlesData"
        }
      },
      {
        "_": "\n        Particle system data.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysData",
          "abstract": "0",
          "inherit": "NiParticlesData"
        },
        "add": [
          {
            "$": {
              "name": "Particle Descriptions",
              "type": "ParticleDesc",
              "arr1": "Num Vertices",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "Has Rotation Speeds",
              "type": "bool",
              "ver1": "20.0.0.2"
            }
          },
          {
            "$": {
              "name": "Rotation Speeds",
              "type": "float",
              "arr1": "Num Vertices",
              "cond": "Has Rotation Speeds",
              "ver1": "20.0.0.2",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "Num Added Particles",
              "type": "ushort",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          },
          {
            "$": {
              "name": "Added Particles Base",
              "type": "ushort",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 > 0))"
            }
          }
        ]
      },
      {
        "_": "\n        Particle meshes data.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMeshPSysData",
          "abstract": "0",
          "inherit": "NiPSysData"
        },
        "add": [
          {
            "$": {
              "name": "Default Pool Size",
              "type": "uint",
              "ver1": "10.2.0.0"
            }
          },
          {
            "$": {
              "name": "Fill Pools On Load",
              "type": "bool",
              "ver1": "10.2.0.0"
            }
          },
          {
            "$": {
              "name": "Num Generations",
              "type": "uint",
              "ver1": "10.2.0.0"
            }
          },
          {
            "$": {
              "name": "Generations",
              "type": "uint",
              "ver1": "10.2.0.0",
              "arr1": "Num Generations"
            }
          },
          {
            "$": {
              "name": "Particle Meshes",
              "type": "Ref",
              "template": "NiNode"
            }
          }
        ]
      },
      {
        "_": "\n        Binary extra data object. Used to store tangents and bitangents in Oblivion.\n        \n    ",
        "$": {
          "name": "NiBinaryExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The binary data.",
            "$": {
              "name": "Binary Data",
              "type": "ByteArray"
            }
          }
        ]
      },
      {
        "_": "\n        Voxel extra data object.\n        \n        \n    ",
        "$": {
          "name": "NiBinaryVoxelExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Unknown.  0?",
            "$": {
              "name": "Unknown Int",
              "type": "uint",
              "default": "0"
            }
          },
          {
            "_": "Link to binary voxel data.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiBinaryVoxelData"
            }
          }
        ]
      },
      {
        "_": "\n        Voxel data object.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBinaryVoxelData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short 1",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short 2",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown. Is this^3 the Unknown Bytes 1 size?",
            "$": {
              "name": "Unknown Short 3",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 7 Floats",
              "type": "float",
              "arr1": "7"
            }
          },
          {
            "_": "Unknown. Always a multiple of 7.",
            "$": {
              "name": "Unknown Bytes 1",
              "type": "byte",
              "arr1": "7",
              "arr2": "12"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Num Unknown Vectors",
              "type": "uint"
            }
          },
          {
            "_": "Vectors on the unit sphere.",
            "$": {
              "name": "Unknown Vectors",
              "type": "Vector4",
              "arr1": "Num Unknown Vectors"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Num Unknown Bytes 2",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Bytes 2",
              "type": "byte",
              "arr1": "Num Unknown Bytes 2"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 5 Ints",
              "type": "uint",
              "arr1": "5"
            }
          }
        ]
      },
      {
        "_": "\n        Blends bool values together.\n        \n    ",
        "$": {
          "name": "NiBlendBoolInterpolator",
          "abstract": "0",
          "inherit": "NiBlendInterpolator"
        },
        "add": [
          {
            "_": "The pose value. Invalid if using data.",
            "$": {
              "name": "Value",
              "type": "byte",
              "default": "2"
            }
          }
        ]
      },
      {
        "_": "\n        Blends float values together.\n        \n    ",
        "$": {
          "name": "NiBlendFloatInterpolator",
          "abstract": "0",
          "inherit": "NiBlendInterpolator"
        },
        "add": [
          {
            "_": "The pose value. Invalid if using data.",
            "$": {
              "name": "Value",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          }
        ]
      },
      {
        "_": "\n        Blends NiPoint3 values together.\n        \n    ",
        "$": {
          "name": "NiBlendPoint3Interpolator",
          "abstract": "0",
          "inherit": "NiBlendInterpolator"
        },
        "add": [
          {
            "_": "The pose value. Invalid if using data.",
            "$": {
              "name": "Value",
              "type": "Vector3",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38"
            }
          }
        ]
      },
      {
        "_": "\n        Blends NiQuatTransform values together.\n    ",
        "$": {
          "name": "NiBlendTransformInterpolator",
          "abstract": "0",
          "inherit": "NiBlendInterpolator"
        }
      },
      {
        "_": "\n        Wrapper for boolean animation keys.\n        \n    ",
        "$": {
          "name": "NiBoolData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The boolean keys.",
            "$": {
              "name": "Data",
              "type": "KeyGroup",
              "template": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        Boolean extra data.\n        \n    ",
        "$": {
          "name": "NiBooleanExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The boolean extra data value.",
            "$": {
              "name": "Boolean Data",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        Contains an NiBSplineBasis for use in interpolation of open, uniform B-Splines.\n        \n    ",
        "$": {
          "name": "NiBSplineBasisData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The number of control points of the B-spline (number of frames of animation plus degree of B-spline minus one).",
            "$": {
              "name": "Num Control Points",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Uses B-Splines to animate a float value over time.\n        \n        \n    ",
        "$": {
          "name": "NiBSplineFloatInterpolator",
          "abstract": "1",
          "inherit": "NiBSplineInterpolator"
        },
        "add": [
          {
            "_": "Base value when curve not defined.",
            "$": {
              "name": "Value",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          },
          {
            "_": "Handle into the data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "_": "\n        NiBSplineFloatInterpolator plus the information required for using compact control points.\n        \n        \n    ",
        "$": {
          "name": "NiBSplineCompFloatInterpolator",
          "abstract": "0",
          "inherit": "NiBSplineFloatInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Float Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Float Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "_": "\n        Uses B-Splines to animate an NiPoint3 value over time.\n        \n        \n    ",
        "$": {
          "name": "NiBSplinePoint3Interpolator",
          "abstract": "1",
          "inherit": "NiBSplineInterpolator"
        },
        "add": [
          {
            "_": "Base value when curve not defined.",
            "$": {
              "name": "Value",
              "type": "Vector3",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38"
            }
          },
          {
            "_": "Handle into the data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "_": "\n        NiBSplinePoint3Interpolator plus the information required for using compact control points.\n        \n        \n    ",
        "$": {
          "name": "NiBSplineCompPoint3Interpolator",
          "abstract": "0",
          "inherit": "NiBSplinePoint3Interpolator"
        },
        "add": [
          {
            "$": {
              "name": "Position Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Position Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "_": "\n        Supports the animation of position, rotation, and scale using an NiQuatTransform.\n        The NiQuatTransform can be an unchanging pose or interpolated from B-Spline control point channels.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBSplineTransformInterpolator",
          "abstract": "0",
          "inherit": "NiBSplineInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Transform",
              "type": "NiQuatTransform"
            }
          },
          {
            "_": "Handle into the translation data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Translation Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          },
          {
            "_": "Handle into the rotation data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Rotation Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          },
          {
            "_": "Handle into the scale data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Scale Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "_": "\n        NiBSplineTransformInterpolator plus the information required for using compact control points.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBSplineCompTransformInterpolator",
          "abstract": "0",
          "inherit": "NiBSplineTransformInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Translation Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Translation Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Rotation Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Rotation Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Scale Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Scale Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSRotAccumTransfInterpolator",
          "inherit": "NiTransformInterpolator"
        }
      },
      {
        "_": "\n        Contains one or more sets of control points for use in interpolation of open, uniform B-Splines, stored as either float or compact.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBSplineData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Float Control Points",
              "type": "uint"
            }
          },
          {
            "_": "Float values representing the control data.",
            "$": {
              "name": "Float Control Points",
              "type": "float",
              "arr1": "Num Float Control Points"
            }
          },
          {
            "$": {
              "name": "Num Compact Control Points",
              "type": "uint"
            }
          },
          {
            "_": "Signed shorts representing the data from 0 to 1 (scaled by SHRT_MAX).",
            "$": {
              "name": "Compact Control Points",
              "type": "short",
              "arr1": "Num Compact Control Points"
            }
          }
        ]
      },
      {
        "_": "\n        Camera object.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiCamera",
          "abstract": "0",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "Obsolete flags.",
            "$": {
              "name": "Camera Flags",
              "type": "ushort",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Frustrum left.",
            "$": {
              "name": "Frustum Left",
              "type": "float"
            }
          },
          {
            "_": "Frustrum right.",
            "$": {
              "name": "Frustum Right",
              "type": "float"
            }
          },
          {
            "_": "Frustrum top.",
            "$": {
              "name": "Frustum Top",
              "type": "float"
            }
          },
          {
            "_": "Frustrum bottom.",
            "$": {
              "name": "Frustum Bottom",
              "type": "float"
            }
          },
          {
            "_": "Frustrum near.",
            "$": {
              "name": "Frustum Near",
              "type": "float"
            }
          },
          {
            "_": "Frustrum far.",
            "$": {
              "name": "Frustum Far",
              "type": "float"
            }
          },
          {
            "_": "Determines whether perspective is used.  Orthographic means no perspective.",
            "$": {
              "name": "Use Orthographic Projection",
              "type": "bool",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Viewport left.",
            "$": {
              "name": "Viewport Left",
              "type": "float"
            }
          },
          {
            "_": "Viewport right.",
            "$": {
              "name": "Viewport Right",
              "type": "float"
            }
          },
          {
            "_": "Viewport top.",
            "$": {
              "name": "Viewport Top",
              "type": "float"
            }
          },
          {
            "_": "Viewport bottom.",
            "$": {
              "name": "Viewport Bottom",
              "type": "float"
            }
          },
          {
            "_": "Level of detail adjust.",
            "$": {
              "name": "LOD Adjust",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scene",
              "type": "Ref",
              "template": "NiAVObject"
            }
          },
          {
            "_": "Deprecated. Array is always zero length on disk write.",
            "$": {
              "name": "Num Screen Polygons",
              "type": "uint",
              "default": "0"
            }
          },
          {
            "_": "Deprecated. Array is always zero length on disk write.",
            "$": {
              "name": "Num Screen Textures",
              "type": "uint",
              "default": "0",
              "ver1": "4.2.1.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 3",
              "type": "uint",
              "ver2": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        Wrapper for color animation keys.\n        \n    ",
        "$": {
          "name": "NiColorData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The color keys.",
            "$": {
              "name": "Data",
              "type": "KeyGroup",
              "template": "Color4"
            }
          }
        ]
      },
      {
        "_": "\n        Extra data in the form of NiColorA (red, green, blue, alpha).\n        \n    ",
        "$": {
          "name": "NiColorExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "RGBA Color?",
            "$": {
              "name": "Data",
              "type": "Color4"
            }
          }
        ]
      },
      {
        "_": "\n        Controls animation sequences on a specific branch of the scene graph.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiControllerManager",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "Whether transformation accumulation is enabled. If accumulation is not enabled, the manager will treat all sequence data on the accumulation root as absolute data instead of relative delta values.",
            "$": {
              "name": "Cumulative",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Num Controller Sequences",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Controller Sequences",
              "type": "Ref",
              "template": "NiControllerSequence",
              "arr1": "Num Controller Sequences"
            }
          },
          {
            "$": {
              "name": "Object Palette",
              "type": "Ref",
              "template": "NiDefaultAVObjectPalette"
            }
          }
        ]
      },
      {
        "_": "\n        Root node in NetImmerse .kf files (until version 10.0).\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSequence",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The sequence name by which the animation system finds and manages this sequence.",
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "_": "The name of the NiAVObject serving as the accumulation root. This is where all accumulated translations, scales, and rotations are applied.",
            "$": {
              "name": "Accum Root Name",
              "type": "string",
              "ver2": "10.1.0.103"
            }
          },
          {
            "$": {
              "name": "Text Keys",
              "type": "Ref",
              "template": "NiTextKeyExtraData",
              "ver2": "10.1.0.103"
            }
          },
          {
            "_": "Divinity 2",
            "$": {
              "name": "Unknown Int 4",
              "type": "int",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          },
          {
            "_": "Divinity 2",
            "$": {
              "name": "Unknown Int 5",
              "type": "int",
              "ver1": "20.3.0.9",
              "ver2": "20.3.0.9",
              "userver": "131072"
            }
          },
          {
            "$": {
              "name": "Num Controlled Blocks",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Array Grow By",
              "type": "uint",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Controlled Blocks",
              "type": "ControlledBlock",
              "arr1": "Num Controlled Blocks"
            }
          }
        ]
      },
      {
        "_": "\n        Root node in Gamebryo .kf files (version 10.0.1.0 and up).\n        \n        \n        \n        \n         \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiControllerSequence",
          "abstract": "0",
          "inherit": "NiSequence"
        },
        "add": [
          {
            "_": "The weight of a sequence describes how it blends with other sequences at the same priority.",
            "$": {
              "name": "Weight",
              "type": "float",
              "default": "1.0",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Text Keys",
              "type": "Ref",
              "template": "NiTextKeyExtraData",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Cycle Type",
              "type": "CycleType",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Frequency",
              "type": "float",
              "default": "1.0",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Phase",
              "type": "float",
              "ver1": "10.1.0.106",
              "ver2": "10.4.0.1"
            }
          },
          {
            "$": {
              "name": "Start Time",
              "type": "float",
              "default": "3.402823466e+38",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Stop Time",
              "type": "float",
              "default": "-3.402823466e+38",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Play Backwards",
              "type": "bool",
              "ver1": "10.1.0.106",
              "ver2": "10.1.0.106"
            }
          },
          {
            "_": "The owner of this sequence.",
            "$": {
              "name": "Manager",
              "type": "Ptr",
              "template": "NiControllerManager",
              "ver1": "10.1.0.106"
            }
          },
          {
            "_": "The name of the NiAVObject serving as the accumulation root. This is where all accumulated translations, scales, and rotations are applied.",
            "$": {
              "name": "Accum Root Name",
              "type": "string",
              "ver1": "10.1.0.106"
            }
          },
          {
            "$": {
              "name": "Accum Flags",
              "type": "AccumFlags",
              "ver1": "20.3.0.8",
              "default": "ACCUM_X_FRONT"
            }
          },
          {
            "$": {
              "name": "String Palette",
              "type": "Ref",
              "template": "NiStringPalette",
              "ver1": "10.1.0.113",
              "ver2": "20.1.0.0"
            }
          },
          {
            "$": {
              "name": "Anim Notes",
              "type": "Ref",
              "template": "BSAnimNotes",
              "ver1": "20.2.0.7",
              "vercond": "(User Version 2 >= 24) && (User Version 2 <= 28)"
            }
          },
          {
            "$": {
              "name": "Num Anim Note Arrays",
              "type": "ushort",
              "ver1": "20.2.0.7",
              "vercond": "(User Version 2 > 28)"
            }
          },
          {
            "$": {
              "name": "Anim Note Arrays",
              "type": "Ref",
              "template": "BSAnimNotes",
              "arr1": "Num Anim Note Arrays",
              "ver1": "20.2.0.7",
              "vercond": "(User Version 2 > 28)"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for indexing NiAVObject by name.\n    ",
        "$": {
          "name": "NiAVObjectPalette",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        NiAVObjectPalette implementation. Used to quickly look up objects by name.\n        \n        \n        \n    ",
        "$": {
          "name": "NiDefaultAVObjectPalette",
          "abstract": "0",
          "inherit": "NiAVObjectPalette"
        },
        "add": [
          {
            "_": "Scene root of the object palette.",
            "$": {
              "name": "Scene",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "_": "Number of objects.",
            "$": {
              "name": "Num Objs",
              "type": "uint"
            }
          },
          {
            "_": "The objects.",
            "$": {
              "name": "Objs",
              "type": "AVObject",
              "arr1": "Num Objs"
            }
          }
        ]
      },
      {
        "_": "\n        Directional light source.\n    ",
        "$": {
          "name": "NiDirectionalLight",
          "abstract": "0",
          "inherit": "NiLight"
        }
      },
      {
        "_": "\n        NiDitherProperty allows the application to turn the dithering of interpolated colors and fog values on and off.\n        \n    ",
        "$": {
          "name": "NiDitherProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "1 = Enable dithering",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2), REMOVED (20.5). Replaced by NiTransformController and NiLookAtInterpolator.\n        \n    ",
        "$": {
          "name": "NiRollController",
          "abstract": "0",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "_": "The data for the controller.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "_": "\n        Wrapper for 1D (one-dimensional) floating point animation keys.\n        \n    ",
        "$": {
          "name": "NiFloatData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The keys.",
            "$": {
              "name": "Data",
              "type": "KeyGroup",
              "template": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Extra float data.\n        \n    ",
        "$": {
          "name": "NiFloatExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The float data.",
            "$": {
              "name": "Float Data",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Extra float array data.\n        \n        \n    ",
        "$": {
          "name": "NiFloatsExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of floats in the next field.",
            "$": {
              "name": "Num Floats",
              "type": "uint"
            }
          },
          {
            "_": "Float data.",
            "$": {
              "name": "Data",
              "type": "float",
              "arr1": "Num Floats"
            }
          }
        ]
      },
      {
        "_": "\n        NiFogProperty allows the application to enable, disable and control the appearance of fog.\n        \n        \n        \n    ",
        "$": {
          "name": "NiFogProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Bit 0: Enables Fog\n            Bit 1: Sets Fog Function to FOG_RANGE_SQ\n            Bit 2: Sets Fog Function to FOG_VERTEX_ALPHA\n\n            If Bit 1 and Bit 2 are not set, but fog is enabled, Fog function is FOG_Z_LINEAR.\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          },
          {
            "_": "Depth of the fog in normalized units. 1.0 = begins at near plane. 0.5 = begins halfway between the near and far planes.",
            "$": {
              "name": "Fog Depth",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The color of the fog.",
            "$": {
              "name": "Fog Color",
              "type": "Color3"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier. Applies a gravitational field on the particles.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiGravity",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "The strength/force of this gravity.",
            "$": {
              "name": "Force",
              "type": "float"
            }
          },
          {
            "_": "The force field type.",
            "$": {
              "name": "Type",
              "type": "FieldType"
            }
          },
          {
            "_": "The position of the mass point relative to the particle system.",
            "$": {
              "name": "Position",
              "type": "Vector3"
            }
          },
          {
            "_": "The direction of the applied acceleration.",
            "$": {
              "name": "Direction",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Extra integer data.\n        \n    ",
        "$": {
          "name": "NiIntegerExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The value of the extra data.",
            "$": {
              "name": "Integer Data",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Controls animation and collision.  Integer holds flags:\n        Bit 0 : enable havok, bAnimated(Skyrim)\n        Bit 1 : enable collision, bHavok(Skyrim)\n        Bit 2 : is skeleton nif?, bRagdoll(Skyrim)\n        Bit 3 : enable animation, bComplex(Skyrim)\n        Bit 4 : FlameNodes present, bAddon(Skyrim)\n        Bit 5 : EditorMarkers present, bEditorMarker(Skyrim)\n        Bit 6 : bDynamic(Skyrim)\n        Bit 7 : bArticulated(Skyrim)\n        Bit 8 : bIKTarget(Skyrim)/needsTransformUpdates\n        Bit 9 : bExternalEmit(Skyrim)\n        Bit 10: bMagicShaderParticles(Skyrim)\n        Bit 11: bLights(Skyrim)\n        Bit 12: bBreakable(Skyrim)\n        Bit 13: bSearchedBreakable(Skyrim) .. Runtime only?\n    ",
        "$": {
          "name": "BSXFlags",
          "abstract": "0",
          "inherit": "NiIntegerExtraData"
        }
      },
      {
        "_": "\n        Extra integer array data.\n        \n        \n    ",
        "$": {
          "name": "NiIntegersExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of integers.",
            "$": {
              "name": "Num Integers",
              "type": "uint"
            }
          },
          {
            "_": "Integers.",
            "$": {
              "name": "Data",
              "type": "uint",
              "arr1": "Num Integers"
            }
          }
        ]
      },
      {
        "_": "\n        An extended keyframe controller.\n        \n    ",
        "$": {
          "name": "BSKeyframeController",
          "abstract": "0",
          "inherit": "NiKeyframeController"
        },
        "add": [
          {
            "_": "A link to more keyframe data.",
            "$": {
              "name": "Data 2",
              "type": "Ref",
              "template": "NiKeyframeData"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2), RENAMED (10.2) to NiTransformData.\n        Wrapper for transformation animation keys.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiKeyframeData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The number of quaternion rotation keys. If the rotation type is XYZ (type 4) then this *must* be set to 1, and in this case the actual number of keys is stored in the XYZ Rotations field.",
            "$": {
              "name": "Num Rotation Keys",
              "type": "uint"
            }
          },
          {
            "_": "The type of interpolation to use for rotation.  Can also be 4 to indicate that separate X, Y, and Z values are used for the rotation instead of Quaternions.",
            "$": {
              "name": "Rotation Type",
              "type": "KeyType",
              "cond": "Num Rotation Keys != 0"
            }
          },
          {
            "_": "The rotation keys if Quaternion rotation is used.",
            "$": {
              "name": "Quaternion Keys",
              "type": "QuatKey",
              "arg": "Rotation Type",
              "template": "Quaternion",
              "arr1": "Num Rotation Keys",
              "cond": "Rotation Type != 4"
            }
          },
          {
            "$": {
              "name": "Order",
              "type": "float",
              "cond": "Rotation Type == 4",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Individual arrays of keys for rotating X, Y, and Z individually.",
            "$": {
              "name": "XYZ Rotations",
              "type": "KeyGroup",
              "template": "float",
              "arr1": "3",
              "cond": "Rotation Type == 4"
            }
          },
          {
            "_": "Translation keys.",
            "$": {
              "name": "Translations",
              "type": "KeyGroup",
              "template": "Vector3"
            }
          },
          {
            "_": "Scale keys.",
            "$": {
              "name": "Scales",
              "type": "KeyGroup",
              "template": "float"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2), REMOVED (20.5)\n        Replaced by NiTransformController and NiLookAtInterpolator.\n        \n        \n    ",
        "$": {
          "name": "NiLookAtController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "LookAtFlags",
              "ver1": "10.1.0.0"
            }
          },
          {
            "$": {
              "name": "Look At",
              "type": "Ptr",
              "template": "NiNode"
            }
          }
        ]
      },
      {
        "_": "\n        NiLookAtInterpolator rotates an object so that it always faces a target object.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiLookAtInterpolator",
          "abstract": "0",
          "inherit": "NiInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "LookAtFlags"
            }
          },
          {
            "$": {
              "name": "Look At",
              "type": "Ptr",
              "template": "NiNode"
            }
          },
          {
            "$": {
              "name": "Look At Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Transform",
              "type": "NiQuatTransform",
              "ver2": "20.4.0.12"
            }
          },
          {
            "$": {
              "name": "Interpolator: Translation",
              "type": "Ref",
              "template": "NiPoint3Interpolator"
            }
          },
          {
            "$": {
              "name": "Interpolator: Roll",
              "type": "Ref",
              "template": "NiFloatInterpolator"
            }
          },
          {
            "$": {
              "name": "Interpolator: Scale",
              "type": "Ref",
              "template": "NiFloatInterpolator"
            }
          }
        ]
      },
      {
        "_": "\n        Describes the surface properties of an object e.g. translucency, ambient color, diffuse color, emissive color, and specular color.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMaterialProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Property flags.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver1": "3.0",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "How much the material reflects ambient light.",
            "$": {
              "name": "Ambient Color",
              "type": "Color3",
              "default": "1.0, 1.0, 1.0",
              "vercond": "(User Version 2 < 26)"
            }
          },
          {
            "_": "How much the material reflects diffuse light.",
            "$": {
              "name": "Diffuse Color",
              "type": "Color3",
              "default": "1.0, 1.0, 1.0",
              "vercond": "(User Version 2 < 26)"
            }
          },
          {
            "_": "How much light the material reflects in a specular manner.",
            "$": {
              "name": "Specular Color",
              "type": "Color3",
              "default": "1.0, 1.0, 1.0"
            }
          },
          {
            "_": "How much light the material emits.",
            "$": {
              "name": "Emissive Color",
              "type": "Color3",
              "default": "0.0, 0.0, 0.0"
            }
          },
          {
            "_": "The material glossiness.",
            "$": {
              "name": "Glossiness",
              "type": "float",
              "default": "10.0"
            }
          },
          {
            "_": "The material transparency (1=non-transparant). Refer to a NiAlphaProperty object in this material's parent NiTriShape object, when alpha is not 1.",
            "$": {
              "name": "Alpha",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "$": {
              "name": "Emissive Mult",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 21)"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5), replaced by NiMorphMeshModifier.\n        Geometry morphing data.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMorphData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Number of morphing object.",
            "$": {
              "name": "Num Morphs",
              "type": "uint"
            }
          },
          {
            "_": "Number of vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "_": "This byte is always 1 in all official files.",
            "$": {
              "name": "Relative Targets",
              "type": "byte",
              "default": "1"
            }
          },
          {
            "_": "The geometry morphing objects.",
            "$": {
              "name": "Morphs",
              "type": "Morph",
              "arg": "Num Vertices",
              "arr1": "Num Morphs"
            }
          }
        ]
      },
      {
        "_": "\n        Generic node object for grouping.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiNode",
          "abstract": "0",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "The number of child objects.",
            "$": {
              "name": "Num Children",
              "type": "uint"
            }
          },
          {
            "_": "List of child node object indices.",
            "$": {
              "name": "Children",
              "type": "Ref",
              "template": "NiAVObject",
              "arr1": "Num Children"
            }
          },
          {
            "_": "The number of references to effect objects that follow.",
            "$": {
              "name": "Num Effects",
              "type": "uint",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "_": "List of node effects. ADynamicEffect?",
            "$": {
              "name": "Effects",
              "type": "Ref",
              "template": "NiDynamicEffect",
              "arr1": "Num Effects",
              "vercond": "User Version 2 < 130"
            }
          }
        ]
      },
      {
        "_": "\n        A NiNode used as a skeleton bone?\n    ",
        "$": {
          "name": "NiBone",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Morrowind specific.\n    ",
        "$": {
          "name": "AvoidNode",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Firaxis-specific UI widgets?\n        \n        \n    ",
        "$": {
          "name": "FxWidget",
          "abstract": "0",
          "inherit": "NiNode"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 3",
              "type": "byte"
            }
          },
          {
            "_": "Looks like 9 links and some string data.",
            "$": {
              "name": "Unknown 292 Bytes",
              "type": "byte",
              "arr1": "292"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown.\n    ",
        "$": {
          "name": "FxButton",
          "abstract": "0",
          "inherit": "FxWidget"
        }
      },
      {
        "_": "\n        Unknown.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "FxRadioButton",
          "abstract": "0",
          "inherit": "FxWidget"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 1",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int  2",
              "type": "uint"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Int 3",
              "type": "uint"
            }
          },
          {
            "_": "Number of unknown links.",
            "$": {
              "name": "Num Buttons",
              "type": "uint"
            }
          },
          {
            "_": "Unknown pointers to other buttons.  Maybe other buttons in a group so they can be switch off if this one is switched on?",
            "$": {
              "name": "Buttons",
              "type": "Ptr",
              "template": "FxRadioButton",
              "arr1": "Num Buttons"
            }
          }
        ]
      },
      {
        "_": "\n        These nodes will always be rotated to face the camera creating a billboard effect for any attached objects.\n\n        In pre-10.1.0.0 the Flags field is used for BillboardMode.\n        Bit 0: hidden\n        Bits 1-2: collision mode\n        Bit 3: unknown (set in most official meshes)\n        Bits 5-6: billboard mode\n\n        Collision modes:\n        00 NONE\n        01 USE_TRIANGLES\n        10 USE_OBBS\n        11 CONTINUE\n\n        Billboard modes:\n        00 ALWAYS_FACE_CAMERA\n        01 ROTATE_ABOUT_UP\n        10 RIGID_FACE_CAMERA\n        11 ALWAYS_FACE_CENTER\n        \n    ",
        "$": {
          "name": "NiBillboardNode",
          "abstract": "0",
          "inherit": "NiNode"
        },
        "add": [
          {
            "_": "The way the billboard will react to the camera.",
            "$": {
              "name": "Billboard Mode",
              "type": "BillboardMode",
              "ver1": "10.1.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific extension of Node with animation properties stored in the flags, often 42?\n    ",
        "$": {
          "name": "NiBSAnimationNode",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Unknown.\n    ",
        "$": {
          "name": "NiBSParticleNode",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Represents groups of multiple scenegraph subtrees, only one of which (the \"active child\") is drawn at any given time.\n        \n        \n    ",
        "$": {
          "name": "NiSwitchNode",
          "abstract": "0",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Switch Node Flags",
              "type": "NiSwitchFlags",
              "ver1": "10.1.0.0"
            }
          },
          {
            "$": {
              "name": "Index",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Level of detail selector. Links to different levels of detail of the same model, used to switch a geometry at a specified distance.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiLODNode",
          "abstract": "0",
          "inherit": "NiSwitchNode"
        },
        "add": [
          {
            "$": {
              "name": "LOD Center",
              "type": "Vector3",
              "ver1": "4.0.0.2",
              "ver2": "10.0.1.0"
            }
          },
          {
            "$": {
              "name": "Num LOD Levels",
              "type": "uint",
              "ver2": "10.0.1.0"
            }
          },
          {
            "$": {
              "name": "LOD Levels",
              "type": "LODRange",
              "arr1": "Num LOD Levels",
              "ver2": "10.0.1.0"
            }
          },
          {
            "$": {
              "name": "LOD Level Data",
              "type": "Ref",
              "template": "NiLODData",
              "ver1": "10.1.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        NiPalette objects represent mappings from 8-bit indices to 24-bit RGB or 32-bit RGBA colors.\n         \n        \n        \n        \n    ",
        "$": {
          "name": "NiPalette",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Has Alpha",
              "type": "byte"
            }
          },
          {
            "_": "The number of palette entries. Always 256 but can also be 16.",
            "$": {
              "name": "Num Entries",
              "type": "uint",
              "default": "256"
            }
          },
          {
            "_": "The color palette.",
            "$": {
              "name": "Palette",
              "type": "ByteColor4",
              "arr1": "16",
              "cond": "Num Entries == 16"
            }
          },
          {
            "_": "The color palette.",
            "$": {
              "name": "Palette",
              "type": "ByteColor4",
              "arr1": "256",
              "cond": "Num Entries != 16"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiParticleBomb",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "$": {
              "name": "Decay",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Duration",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "DeltaV",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Start",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Decay Type",
              "type": "DecayType"
            }
          },
          {
            "$": {
              "name": "Symmetry Type",
              "type": "SymmetryType",
              "ver1": "4.1.0.12"
            }
          },
          {
            "_": "The position of the mass point relative to the particle system?",
            "$": {
              "name": "Position",
              "type": "Vector3"
            }
          },
          {
            "_": "The direction of the applied acceleration?",
            "$": {
              "name": "Direction",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n    ",
        "$": {
          "name": "NiParticleColorModifier",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "$": {
              "name": "Color Data",
              "type": "Ref",
              "template": "NiColorData"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n    ",
        "$": {
          "name": "NiParticleGrowFade",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "_": "The time from the beginning of the particle lifetime during which the particle grows.",
            "$": {
              "name": "Grow",
              "type": "float"
            }
          },
          {
            "_": "The time from the end of the particle lifetime during which the particle fades.",
            "$": {
              "name": "Fade",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n    ",
        "$": {
          "name": "NiParticleMeshModifier",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "$": {
              "name": "Num Particle Meshes",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Particle Meshes",
              "arr1": "Num Particle Meshes",
              "type": "Ref",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n        \n    ",
        "$": {
          "name": "NiParticleRotation",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "$": {
              "name": "Random Initial Axis",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Initial Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Rotation Speed",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Generic particle system node.\n        \n    ",
        "$": {
          "name": "NiParticles",
          "abstract": "0",
          "inherit": "NiGeometry"
        },
        "add": [
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc",
              "vercond": "(User Version 2 >= 100)"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1). NiParticles which do not house normals and generate them at runtime.\n    ",
        "$": {
          "name": "NiAutoNormalParticles",
          "abstract": "0",
          "inherit": "NiParticles"
        }
      },
      {
        "_": "\n        LEGACY (pre-10.1). Particle meshes.\n    ",
        "$": {
          "name": "NiParticleMeshes",
          "abstract": "0",
          "inherit": "NiParticles"
        }
      },
      {
        "_": "\n        LEGACY (pre-10.1). Particle meshes data.\n        \n    ",
        "$": {
          "name": "NiParticleMeshesData",
          "abstract": "0",
          "inherit": "NiRotatingParticlesData"
        },
        "add": [
          {
            "_": "Refers to the mesh that makes up a particle?",
            "$": {
              "name": "Unknown Link 2",
              "type": "Ref",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        A particle system.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiParticleSystem",
          "abstract": "0",
          "inherit": "NiParticles"
        },
        "add": [
          {
            "$": {
              "name": "Far Begin",
              "type": "ushort",
              "vercond": "(User Version 2 >= 83)"
            }
          },
          {
            "$": {
              "name": "Far End",
              "type": "ushort",
              "vercond": "(User Version 2 >= 83)"
            }
          },
          {
            "$": {
              "name": "Near Begin",
              "type": "ushort",
              "vercond": "(User Version 2 >= 83)"
            }
          },
          {
            "$": {
              "name": "Near End",
              "type": "ushort",
              "vercond": "(User Version 2 >= 83)"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPSysData",
              "vercond": "(User Version 2 >= 100)"
            }
          },
          {
            "_": "If true, Particles are birthed into world space.  If false, Particles are birthed into object space.",
            "$": {
              "name": "World Space",
              "type": "bool",
              "default": "1",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The number of modifier references.",
            "$": {
              "name": "Num Modifiers",
              "type": "uint",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "The list of particle modifiers.",
            "$": {
              "name": "Modifiers",
              "type": "Ref",
              "template": "NiPSysModifier",
              "arr1": "Num Modifiers",
              "ver1": "10.1.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system.\n    ",
        "$": {
          "name": "NiMeshParticleSystem",
          "abstract": "0",
          "inherit": "NiParticleSystem"
        }
      },
      {
        "_": "\n        A generic particle system time controller object.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiParticleSystemController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "Particle speed in old files",
            "$": {
              "name": "Old Speed",
              "type": "uint",
              "ver2": "3.1"
            }
          },
          {
            "_": "Particle speed",
            "$": {
              "name": "Speed",
              "type": "float",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "Particle random speed modifier",
            "$": {
              "name": "Speed Random",
              "type": "float"
            }
          },
          {
            "_": "\n            vertical emit direction [radians]\n            0.0 : up\n            1.6 : horizontal\n            3.1416 : down\n        ",
            "$": {
              "name": "Vertical Direction",
              "type": "float"
            }
          },
          {
            "_": "emitter's vertical opening angle [radians]",
            "$": {
              "name": "Vertical Angle",
              "type": "float"
            }
          },
          {
            "_": "horizontal emit direction",
            "$": {
              "name": "Horizontal Direction",
              "type": "float"
            }
          },
          {
            "_": "emitter's horizontal opening angle",
            "$": {
              "name": "Horizontal Angle",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Normal?",
              "type": "Vector3"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Color?",
              "type": "Color4"
            }
          },
          {
            "_": "Particle size",
            "$": {
              "name": "Size",
              "type": "float"
            }
          },
          {
            "_": "Particle emit start time",
            "$": {
              "name": "Emit Start Time",
              "type": "float"
            }
          },
          {
            "_": "Particle emit stop time",
            "$": {
              "name": "Emit Stop Time",
              "type": "float"
            }
          },
          {
            "_": "Unknown byte, (=0)",
            "$": {
              "name": "Unknown Byte",
              "type": "byte",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Particle emission rate in old files",
            "$": {
              "name": "Old Emit Rate",
              "type": "uint",
              "ver2": "3.1"
            }
          },
          {
            "_": "Particle emission rate (particles per second)",
            "$": {
              "name": "Emit Rate",
              "type": "float",
              "ver1": "3.3.0.13"
            }
          },
          {
            "_": "Particle lifetime",
            "$": {
              "name": "Lifetime",
              "type": "float"
            }
          },
          {
            "_": "Particle lifetime random modifier",
            "$": {
              "name": "Lifetime Random",
              "type": "float"
            }
          },
          {
            "_": "Bit 0: Emit Rate toggle bit (0 = auto adjust, 1 = use Emit Rate value)",
            "$": {
              "name": "Emit Flags",
              "type": "ushort",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Particle random start translation vector",
            "$": {
              "name": "Start Random",
              "type": "Vector3"
            }
          },
          {
            "_": "This index targets the particle emitter object (TODO: find out what type of object this refers to).",
            "$": {
              "name": "Emitter",
              "type": "Ptr",
              "template": "NiObject"
            }
          },
          {
            "_": "? short=0 ?",
            "$": {
              "name": "Unknown Short 2?",
              "type": "ushort",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "? float=1.0 ?",
            "$": {
              "name": "Unknown Float 13?",
              "type": "float",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "? int=1 ?",
            "$": {
              "name": "Unknown Int 1?",
              "type": "uint",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "? int=0 ?",
            "$": {
              "name": "Unknown Int 2?",
              "type": "uint",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "? short=0 ?",
            "$": {
              "name": "Unknown Short 3?",
              "type": "ushort",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Particle velocity",
            "$": {
              "name": "Particle Velocity",
              "type": "Vector3",
              "ver2": "3.1"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Particle Unknown Vector",
              "type": "Vector3",
              "ver2": "3.1"
            }
          },
          {
            "_": "The particle's age.",
            "$": {
              "name": "Particle Lifetime",
              "type": "float",
              "ver2": "3.1"
            }
          },
          {
            "$": {
              "name": "Particle Link",
              "type": "Ref",
              "template": "NiObject",
              "ver2": "3.1"
            }
          },
          {
            "_": "Timestamp of the last update.",
            "$": {
              "name": "Particle Timestamp",
              "type": "uint",
              "ver2": "3.1"
            }
          },
          {
            "_": "Unknown short",
            "$": {
              "name": "Particle Unknown Short",
              "type": "ushort",
              "ver2": "3.1"
            }
          },
          {
            "_": "Particle/vertex index matches array index",
            "$": {
              "name": "Particle Vertex Id",
              "type": "ushort",
              "ver2": "3.1"
            }
          },
          {
            "_": "Size of the following array. (Maximum number of simultaneous active particles)",
            "$": {
              "name": "Num Particles",
              "type": "ushort",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Number of valid entries in the following array. (Number of active particles at the time the system was saved)",
            "$": {
              "name": "Num Valid",
              "type": "ushort",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Individual particle modifiers?",
            "$": {
              "name": "Particles",
              "type": "Particle",
              "arr1": "Num Particles",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "unknown int (=0xffffffff)",
            "$": {
              "name": "Unknown Link",
              "type": "Ref",
              "template": "NiObject",
              "ver1": "4.0.0.2"
            }
          },
          {
            "_": "Link to some optional particle modifiers (NiGravity, NiParticleGrowFade, NiParticleBomb, ...)",
            "$": {
              "name": "Particle Extra",
              "type": "Ref",
              "template": "NiParticleModifier"
            }
          },
          {
            "_": "Unknown int (=0xffffffff)",
            "$": {
              "name": "Unknown Link 2",
              "type": "Ref",
              "template": "NiObject"
            }
          },
          {
            "_": "Trailing null byte",
            "$": {
              "name": "Trailer",
              "type": "byte",
              "ver1": "4.0.0.2"
            }
          },
          {
            "$": {
              "name": "Color Data",
              "type": "Ref",
              "template": "NiColorData",
              "ver2": "3.1"
            }
          },
          {
            "$": {
              "name": "Unknown Float 1",
              "type": "float",
              "ver2": "3.1"
            }
          },
          {
            "$": {
              "name": "Unknown Floats 2",
              "arr1": "Particle Unknown Short",
              "type": "float",
              "ver2": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        A particle system controller, used by BS in conjunction with NiBSParticleNode.\n    ",
        "$": {
          "name": "NiBSPArrayController",
          "abstract": "0",
          "inherit": "NiParticleSystemController"
        }
      },
      {
        "_": "\n        DEPRECATED (10.2), REMOVED (20.5). Replaced by NiTransformController and NiPathInterpolator.\n        Time controller for a path.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPathController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "$": {
              "name": "Path Flags",
              "type": "PathFlags",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "-1 = Negative, 1 = Positive",
            "$": {
              "name": "Bank Dir",
              "type": "int",
              "default": "1"
            }
          },
          {
            "_": "Max angle in radians.",
            "$": {
              "name": "Max Bank Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Smoothing",
              "type": "float"
            }
          },
          {
            "_": "0, 1, or 2 representing X, Y, or Z.",
            "$": {
              "name": "Follow Axis",
              "type": "short"
            }
          },
          {
            "$": {
              "name": "Path Data",
              "type": "Ref",
              "template": "NiPosData"
            }
          },
          {
            "$": {
              "name": "Percent Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPixelFormat",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The format of the pixels in this internally stored image.",
            "$": {
              "name": "Pixel Format",
              "type": "PixelFormat"
            }
          },
          {
            "_": "0x000000ff (for 24bpp and 32bpp) or 0x00000000 (for 8bpp)",
            "$": {
              "name": "Red Mask",
              "type": "uint",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "0x0000ff00 (for 24bpp and 32bpp) or 0x00000000 (for 8bpp)",
            "$": {
              "name": "Green Mask",
              "type": "uint",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "0x00ff0000 (for 24bpp and 32bpp) or 0x00000000 (for 8bpp)",
            "$": {
              "name": "Blue Mask",
              "type": "uint",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "0xff000000 (for 32bpp) or 0x00000000 (for 24bpp and 8bpp)",
            "$": {
              "name": "Alpha Mask",
              "type": "uint",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "Bits per pixel, 0 (Compressed), 8, 24 or 32.",
            "$": {
              "name": "Bits Per Pixel",
              "type": "uint",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "\n            [96,8,130,0,0,65,0,0] if 24 bits per pixel\n            [129,8,130,32,0,65,12,0] if 32 bits per pixel\n            [34,0,0,0,0,0,0,0] if 8 bits per pixel\n            [X,0,0,0,0,0,0,0] if 0 (Compressed) bits per pixel where X = PixelFormat\n        ",
            "$": {
              "name": "Old Fast Compare",
              "type": "byte",
              "arr1": "8",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "Seems to always be zero.",
            "$": {
              "name": "Tiling",
              "type": "PixelTiling",
              "ver1": "10.1.0.0",
              "ver2": "10.3.0.2"
            }
          },
          {
            "_": "Bits per pixel, 0 (Compressed), 8, 24 or 32.",
            "$": {
              "name": "Bits Per Pixel",
              "type": "byte",
              "ver1": "10.3.0.3"
            }
          },
          {
            "$": {
              "name": "Renderer Hint",
              "type": "uint",
              "ver1": "10.3.0.3"
            }
          },
          {
            "$": {
              "name": "Extra Data",
              "type": "uint",
              "ver1": "10.3.0.3"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "byte",
              "ver1": "10.3.0.3"
            }
          },
          {
            "$": {
              "name": "Tiling",
              "type": "PixelTiling",
              "ver1": "10.3.0.3"
            }
          },
          {
            "$": {
              "name": "sRGB Space",
              "type": "bool",
              "ver1": "20.3.0.4"
            }
          },
          {
            "_": "Channel Data",
            "$": {
              "name": "Channels",
              "type": "PixelFormatComponent",
              "arr1": "4",
              "ver1": "10.3.0.3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPersistentSrcTextureRendererData",
          "inherit": "NiPixelFormat"
        },
        "add": [
          {
            "$": {
              "name": "Palette",
              "type": "Ref",
              "template": "NiPalette"
            }
          },
          {
            "$": {
              "name": "Num Mipmaps",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bytes Per Pixel",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Mipmaps",
              "type": "MipMap",
              "arr1": "Num Mipmaps"
            }
          },
          {
            "$": {
              "name": "Num Pixels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Pad Num Pixels",
              "type": "uint",
              "ver1": "20.2.0.6"
            }
          },
          {
            "$": {
              "name": "Num Faces",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Platform",
              "type": "PlatformID",
              "ver2": "30.1.0.0"
            }
          },
          {
            "$": {
              "name": "Renderer",
              "type": "RendererID",
              "ver1": "30.1.0.1"
            }
          },
          {
            "$": {
              "name": "Pixel Data",
              "type": "byte",
              "binary": "1",
              "arr1": "Num Pixels * Num Faces"
            }
          }
        ]
      },
      {
        "_": "\n        A texture.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPixelData",
          "abstract": "0",
          "inherit": "NiPixelFormat"
        },
        "add": [
          {
            "$": {
              "name": "Palette",
              "type": "Ref",
              "template": "NiPalette"
            }
          },
          {
            "$": {
              "name": "Num Mipmaps",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bytes Per Pixel",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Mipmaps",
              "type": "MipMap",
              "arr1": "Num Mipmaps"
            }
          },
          {
            "$": {
              "name": "Num Pixels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Faces",
              "type": "uint",
              "ver1": "10.3.0.6",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Pixel Data",
              "type": "byte",
              "binary": "1",
              "arr1": "Num Pixels",
              "ver2": "10.3.0.5"
            }
          },
          {
            "$": {
              "name": "Pixel Data",
              "type": "byte",
              "binary": "1",
              "arr1": "Num Pixels * Num Faces",
              "ver1": "10.3.0.6"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPlanarCollider",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "_": "Usually 0?",
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "ver1": "10.0.1.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short 2",
              "type": "ushort",
              "ver1": "4.2.2.0",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 3",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 4",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 5",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 6",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 7",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 8",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 9",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 10",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 11",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 12",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 13",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 14",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 15",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 16",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A point light.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPointLight",
          "abstract": "0",
          "inherit": "NiLight"
        },
        "add": [
          {
            "$": {
              "name": "Constant Attenuation",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Linear Attenuation",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "$": {
              "name": "Quadratic Attenuation",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Wrapper for position animation keys.\n        \n    ",
        "$": {
          "name": "NiPosData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "KeyGroup",
              "template": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Wrapper for rotation animation keys.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiRotData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Rotation Keys",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Rotation Type",
              "type": "KeyType",
              "cond": "Num Rotation Keys != 0"
            }
          },
          {
            "$": {
              "name": "Quaternion Keys",
              "type": "QuatKey",
              "arg": "Rotation Type",
              "template": "Quaternion",
              "arr1": "Num Rotation Keys",
              "cond": "Rotation Type != 4"
            }
          },
          {
            "$": {
              "name": "XYZ Rotations",
              "type": "KeyGroup",
              "template": "float",
              "arr1": "3",
              "cond": "Rotation Type == 4"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that controls and updates the age of particles in the system.\n        \n        \n    ",
        "$": {
          "name": "NiPSysAgeDeathModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Should the particles spawn on death?",
            "$": {
              "name": "Spawn on Death",
              "type": "bool"
            }
          },
          {
            "_": "The spawner to use on death.",
            "$": {
              "name": "Spawn Modifier",
              "type": "Ref",
              "template": "NiPSysSpawnModifier"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that applies an explosive force to particles.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysBombModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The object whose position and orientation are the basis of the force.",
            "$": {
              "name": "Bomb Object",
              "type": "Ptr",
              "template": "NiNode"
            }
          },
          {
            "_": "The local direction of the force.",
            "$": {
              "name": "Bomb Axis",
              "type": "Vector3"
            }
          },
          {
            "_": "How the bomb force will decrease with distance.",
            "$": {
              "name": "Decay",
              "type": "float"
            }
          },
          {
            "_": "The acceleration the bomb will apply to particles.",
            "$": {
              "name": "Delta V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Decay Type",
              "type": "DecayType"
            }
          },
          {
            "$": {
              "name": "Symmetry Type",
              "type": "SymmetryType"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that creates and updates bound volumes.\n        \n    ",
        "$": {
          "name": "NiPSysBoundUpdateModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Optimize by only computing the bound of (1 / Update Skip) of the total particles each frame.",
            "$": {
              "name": "Update Skip",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Particle emitter that uses points within a defined Box shape to emit from.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysBoxEmitter",
          "abstract": "0",
          "inherit": "NiPSysVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Width",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Height",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Depth",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that adds a defined shape to act as a collision object for particles to interact with.\n        \n    ",
        "$": {
          "name": "NiPSysColliderManager",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Collider",
              "type": "Ref",
              "template": "NiPSysCollider"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that adds keyframe data to modify color/alpha values of particles over time.\n        \n    ",
        "$": {
          "name": "NiPSysColorModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiColorData"
            }
          }
        ]
      },
      {
        "_": "\n        Particle emitter that uses points within a defined Cylinder shape to emit from.\n        \n        \n    ",
        "$": {
          "name": "NiPSysCylinderEmitter",
          "abstract": "0",
          "inherit": "NiPSysVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Height",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that applies a linear drag force to particles.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysDragModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The object whose position and orientation are the basis of the force.",
            "$": {
              "name": "Drag Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "_": "The local direction of the force.",
            "$": {
              "name": "Drag Axis",
              "type": "Vector3",
              "default": "1.0, 0.0, 0.0"
            }
          },
          {
            "_": "The amount of drag to apply to particles.",
            "$": {
              "name": "Percentage",
              "type": "float",
              "default": "0.05"
            }
          },
          {
            "_": "The distance up to which particles are fully affected.",
            "$": {
              "name": "Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "_": "The distance at which particles cease to be affected.",
            "$": {
              "name": "Range Falloff",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2). Particle system emitter controller data.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysEmitterCtlrData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Birth Rate Keys",
              "type": "KeyGroup",
              "template": "float"
            }
          },
          {
            "$": {
              "name": "Num Active Keys",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Active Keys",
              "type": "Key",
              "arg": "1",
              "template": "byte",
              "arr1": "Num Active Keys"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that applies a gravitational force to particles.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysGravityModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The object whose position and orientation are the basis of the force.",
            "$": {
              "name": "Gravity Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "_": "The local direction of the force.",
            "$": {
              "name": "Gravity Axis",
              "type": "Vector3",
              "default": "1.0, 0.0, 0.0"
            }
          },
          {
            "_": "How the force diminishes by distance.",
            "$": {
              "name": "Decay",
              "type": "float"
            }
          },
          {
            "_": "The acceleration of the force.",
            "$": {
              "name": "Strength",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The type of gravitational force.",
            "$": {
              "name": "Force Type",
              "type": "ForceType"
            }
          },
          {
            "_": "Adds a degree of randomness.",
            "$": {
              "name": "Turbulence",
              "type": "float"
            }
          },
          {
            "_": "Scale for turbulence.",
            "$": {
              "name": "Turbulence Scale",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "$": {
              "name": "World Aligned",
              "type": "bool",
              "vercond": "User Version 2 > 16"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that controls the time it takes to grow and shrink a particle.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysGrowFadeModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The time taken to grow from 0 to their specified size.",
            "$": {
              "name": "Grow Time",
              "type": "float"
            }
          },
          {
            "_": "Specifies the particle generation to which the grow effect should be applied. This is usually generation 0, so that newly created particles will grow.",
            "$": {
              "name": "Grow Generation",
              "type": "ushort"
            }
          },
          {
            "_": "The time taken to shrink from their specified size to 0.",
            "$": {
              "name": "Fade Time",
              "type": "float"
            }
          },
          {
            "_": "Specifies the particle generation to which the shrink effect should be applied. This is usually the highest supported generation for the particle system.",
            "$": {
              "name": "Fade Generation",
              "type": "ushort"
            }
          },
          {
            "_": "A multiplier on the base particle scale.",
            "$": {
              "name": "Base Scale",
              "type": "float",
              "vercond": "User Version 2 >= 34"
            }
          }
        ]
      },
      {
        "_": "\n        Particle emitter that uses points on a specified mesh to emit from.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysMeshEmitter",
          "abstract": "0",
          "inherit": "NiPSysEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Num Emitter Meshes",
              "type": "uint"
            }
          },
          {
            "_": "The meshes which are emitted from.",
            "$": {
              "name": "Emitter Meshes",
              "type": "Ptr",
              "template": "NiAVObject",
              "arr1": "Num Emitter Meshes"
            }
          },
          {
            "_": "The method by which the initial particle velocity will be computed.",
            "$": {
              "name": "Initial Velocity Type",
              "type": "VelocityType"
            }
          },
          {
            "_": "The manner in which particles are emitted from the Emitter Meshes.",
            "$": {
              "name": "Emission Type",
              "type": "EmitFrom"
            }
          },
          {
            "_": "The emission axis if VELOCITY_USE_DIRECTION.",
            "$": {
              "name": "Emission Axis",
              "type": "Vector3",
              "default": "1.0, 0.0, 0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that updates mesh particles using the age of each particle.\n        \n        \n    ",
        "$": {
          "name": "NiPSysMeshUpdateModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Num Meshes",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Meshes",
              "type": "Ref",
              "template": "NiAVObject",
              "arr1": "Num Meshes"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPSysInheritVelocityModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiNode"
            }
          },
          {
            "$": {
              "name": "Chance To Inherit",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Velocity Multiplier",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Velocity Variation",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPSysHavokUpdateModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Num Nodes",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Nodes",
              "type": "Ref",
              "template": "NiNode",
              "arr1": "Num Nodes"
            }
          },
          {
            "$": {
              "name": "Modifier",
              "type": "Ref",
              "template": "NiPSysModifier"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPSysRecycleBoundModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Bound Offset",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Bound Extent",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiNode"
            }
          }
        ]
      },
      {
        "_": "\n        Similar to a Flip Controller, this handles particle texture animation on a single texture atlas\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSPSysSubTexModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Starting frame/position on atlas",
            "$": {
              "name": "Start Frame",
              "type": "uint"
            }
          },
          {
            "_": "Random chance to start on a different frame?",
            "$": {
              "name": "Start Frame Fudge",
              "type": "float"
            }
          },
          {
            "_": "Ending frame/position on atlas",
            "$": {
              "name": "End Frame",
              "type": "float"
            }
          },
          {
            "_": "Frame to start looping",
            "$": {
              "name": "Loop Start Frame",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Loop Start Frame Fudge",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Frame Count",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Frame Count Fudge",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle Collider object which particles will interact with.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysPlanarCollider",
          "abstract": "0",
          "inherit": "NiPSysCollider"
        },
        "add": [
          {
            "_": "Width of the plane along the X Axis.",
            "$": {
              "name": "Width",
              "type": "float"
            }
          },
          {
            "_": "Height of the plane along the Y Axis.",
            "$": {
              "name": "Height",
              "type": "float"
            }
          },
          {
            "_": "Axis defining a plane, relative to Collider Object.",
            "$": {
              "name": "X Axis",
              "type": "Vector3"
            }
          },
          {
            "_": "Axis defining a plane, relative to Collider Object.",
            "$": {
              "name": "Y Axis",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Particle Collider object which particles will interact with.\n        \n    ",
        "$": {
          "name": "NiPSysSphericalCollider",
          "abstract": "0",
          "inherit": "NiPSysCollider"
        },
        "add": [
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that updates the particle positions based on velocity and last update time.\n    ",
        "$": {
          "name": "NiPSysPositionModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        }
      },
      {
        "_": "\n        Particle modifier that calls reset on a target upon looping.\n    ",
        "$": {
          "name": "NiPSysResetOnLoopCtlr",
          "abstract": "0",
          "inherit": "NiTimeController"
        }
      },
      {
        "_": "\n        Particle modifier that adds rotations to particles.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysRotationModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Initial Rotation Speed in radians per second.",
            "$": {
              "name": "Rotation Speed",
              "type": "float"
            }
          },
          {
            "_": "Distributes rotation speed over the range [Speed - Variation, Speed + Variation].",
            "$": {
              "name": "Rotation Speed Variation",
              "type": "float",
              "ver1": "20.0.0.2"
            }
          },
          {
            "_": "Initial Rotation Angle in radians.",
            "$": {
              "name": "Rotation Angle",
              "type": "float",
              "ver1": "20.0.0.2"
            }
          },
          {
            "_": "Distributes rotation angle over the range [Angle - Variation, Angle + Variation].",
            "$": {
              "name": "Rotation Angle Variation",
              "type": "float",
              "ver1": "20.0.0.2"
            }
          },
          {
            "_": "Randomly negate the initial rotation speed?",
            "$": {
              "name": "Random Rot Speed Sign",
              "type": "bool",
              "ver1": "20.0.0.2"
            }
          },
          {
            "_": "Assign a random axis to new particles?",
            "$": {
              "name": "Random Axis",
              "type": "bool",
              "default": "1"
            }
          },
          {
            "_": "Initial rotation axis.",
            "$": {
              "name": "Axis",
              "type": "Vector3",
              "default": "1.0, 0.0, 0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Particle modifier that spawns additional copies of a particle.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysSpawnModifier",
          "abstract": "0",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "Number of allowed generations for spawning. Particles whose generations are >= will not be spawned.",
            "$": {
              "name": "Num Spawn Generations",
              "type": "ushort",
              "default": "0"
            }
          },
          {
            "_": "The likelihood of a particular particle being spawned. Must be between 0.0 and 1.0.",
            "$": {
              "name": "Percentage Spawned",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The minimum particles to spawn for any given original particle.",
            "$": {
              "name": "Min Num to Spawn",
              "type": "ushort",
              "default": "1"
            }
          },
          {
            "_": "The maximum particles to spawn for any given original particle.",
            "$": {
              "name": "Max Num to Spawn",
              "type": "ushort",
              "default": "1"
            }
          },
          {
            "_": "WorldShift",
            "$": {
              "name": "Unknown Int",
              "type": "int",
              "ver1": "10.4.0.1",
              "ver2": "10.4.0.1"
            }
          },
          {
            "_": "How much the spawned particle speed can vary.",
            "$": {
              "name": "Spawn Speed Variation",
              "type": "float"
            }
          },
          {
            "_": "How much the spawned particle direction can vary.",
            "$": {
              "name": "Spawn Dir Variation",
              "type": "float"
            }
          },
          {
            "_": "Lifespan assigned to spawned particles.",
            "$": {
              "name": "Life Span",
              "type": "float"
            }
          },
          {
            "_": "The amount the lifespan can vary.",
            "$": {
              "name": "Life Span Variation",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle emitter that uses points within a sphere shape to emit from.\n        \n    ",
        "$": {
          "name": "NiPSysSphereEmitter",
          "abstract": "0",
          "inherit": "NiPSysVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system controller, tells the system to update its simulation.\n    ",
        "$": {
          "name": "NiPSysUpdateCtlr",
          "abstract": "0",
          "inherit": "NiTimeController"
        }
      },
      {
        "_": "\n        Base for all force field particle modifiers.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysFieldModifier",
          "abstract": "1",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "_": "The object whose position and orientation are the basis of the field.",
            "$": {
              "name": "Field Object",
              "type": "Ref",
              "template": "NiAVObject"
            }
          },
          {
            "_": "Magnitude of the force.",
            "$": {
              "name": "Magnitude",
              "type": "float"
            }
          },
          {
            "_": "How the magnitude diminishes with distance from the Field Object.",
            "$": {
              "name": "Attenuation",
              "type": "float"
            }
          },
          {
            "_": "Whether or not to use a distance from the Field Object after which there is no effect.",
            "$": {
              "name": "Use Max Distance",
              "type": "bool"
            }
          },
          {
            "_": "Maximum distance after which there is no effect.",
            "$": {
              "name": "Max Distance",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system modifier, implements a vortex field force for particles.\n        \n    ",
        "$": {
          "name": "NiPSysVortexFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "Direction of the vortex field in Field Object's space.",
            "$": {
              "name": "Direction",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system modifier, implements a gravity field force for particles.\n        \n    ",
        "$": {
          "name": "NiPSysGravityFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "Direction of the gravity field in Field Object's space.",
            "$": {
              "name": "Direction",
              "type": "Vector3",
              "default": "0.0, -1.0, 0.0"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system modifier, implements a drag field force for particles.\n        \n        \n    ",
        "$": {
          "name": "NiPSysDragFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "Whether or not the drag force applies only in the direction specified.",
            "$": {
              "name": "Use Direction",
              "type": "bool"
            }
          },
          {
            "_": "Direction in which the force applies if Use Direction is true.",
            "$": {
              "name": "Direction",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system modifier, implements a turbulence field force for particles.\n        \n    ",
        "$": {
          "name": "NiPSysTurbulenceFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "How many turbulence updates per second.",
            "$": {
              "name": "Frequency",
              "type": "float"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPSysLODModifier",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "LOD Begin Distance",
              "type": "float",
              "default": "0.1"
            }
          },
          {
            "$": {
              "name": "LOD End Distance",
              "type": "float",
              "default": "0.7"
            }
          },
          {
            "$": {
              "name": "End Emit Scale",
              "type": "float",
              "default": "0.2"
            }
          },
          {
            "$": {
              "name": "End Size",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPSysScaleModifier",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Num Scales",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Scales",
              "type": "float",
              "arr1": "Num Scales"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system controller for force field magnitude.\n    ",
        "$": {
          "name": "NiPSysFieldMagnitudeCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for force field attenuation.\n    ",
        "$": {
          "name": "NiPSysFieldAttenuationCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for force field maximum distance.\n    ",
        "$": {
          "name": "NiPSysFieldMaxDistanceCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for air field air friction.\n    ",
        "$": {
          "name": "NiPSysAirFieldAirFrictionCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for air field inherit velocity.\n    ",
        "$": {
          "name": "NiPSysAirFieldInheritVelocityCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for air field spread.\n    ",
        "$": {
          "name": "NiPSysAirFieldSpreadCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter initial rotation speed.\n    ",
        "$": {
          "name": "NiPSysInitialRotSpeedCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter initial rotation speed variation.\n    ",
        "$": {
          "name": "NiPSysInitialRotSpeedVarCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter initial rotation angle.\n    ",
        "$": {
          "name": "NiPSysInitialRotAngleCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter initial rotation angle variation.\n    ",
        "$": {
          "name": "NiPSysInitialRotAngleVarCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter planar angle.\n    ",
        "$": {
          "name": "NiPSysEmitterPlanarAngleCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system controller for emitter planar angle variation.\n    ",
        "$": {
          "name": "NiPSysEmitterPlanarAngleVarCtlr",
          "inherit": "NiPSysModifierFloatCtlr"
        }
      },
      {
        "_": "\n        Particle system modifier, updates the particle velocity to simulate the effects of air movements like wind, fans, or wake.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysAirFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "Direction of the particle velocity",
            "$": {
              "name": "Direction",
              "type": "Vector3",
              "default": "-1.0, 0.0, 0.0"
            }
          },
          {
            "_": "How quickly particles will accelerate to the magnitude of the air field.",
            "$": {
              "name": "Air Friction",
              "type": "float"
            }
          },
          {
            "_": "How much of the air field velocity will be added to the particle velocity.",
            "$": {
              "name": "Inherit Velocity",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Inherit Rotation",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Component Only",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Enable Spread",
              "type": "bool"
            }
          },
          {
            "_": "The angle of the air field cone if Enable Spread is true.",
            "$": {
              "name": "Spread",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Guild 2-Specific node\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSysTrailEmitter",
          "abstract": "0",
          "inherit": "NiPSysEmitter"
        },
        "add": [
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 1",
              "type": "int"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 3",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 2",
              "type": "int"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 4",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 3",
              "type": "int"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 5",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 4",
              "type": "int"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 6",
              "type": "float"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Float 7",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown controller\n    ",
        "$": {
          "name": "NiLightIntensityController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n        Particle system modifier, updates the particle velocity to simulate the effects of point gravity.\n        \n    ",
        "$": {
          "name": "NiPSysRadialFieldModifier",
          "inherit": "NiPSysFieldModifier"
        },
        "add": [
          {
            "_": "If zero, no attenuation.",
            "$": {
              "name": "Radial Type",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract class used for different types of LOD selections.\n    ",
        "$": {
          "name": "NiLODData",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        NiRangeLODData controls switching LOD levels based on Z depth from the camera to the NiLODNode.\n        \n        \n        \n    ",
        "$": {
          "name": "NiRangeLODData",
          "abstract": "0",
          "inherit": "NiLODData"
        },
        "add": [
          {
            "$": {
              "name": "LOD Center",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Num LOD Levels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD Levels",
              "type": "LODRange",
              "arr1": "Num LOD Levels"
            }
          }
        ]
      },
      {
        "_": "\n        NiScreenLODData controls switching LOD levels based on proportion of the screen that a bound would include.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiScreenLODData",
          "abstract": "0",
          "inherit": "NiLODData"
        },
        "add": [
          {
            "$": {
              "name": "Bound",
              "type": "NiBound"
            }
          },
          {
            "$": {
              "name": "World Bound",
              "type": "NiBound"
            }
          },
          {
            "$": {
              "name": "Num Proportions",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Proportion Levels",
              "type": "float",
              "arr1": "Num Proportions"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown.\n    ",
        "$": {
          "name": "NiRotatingParticles",
          "abstract": "0",
          "inherit": "NiParticles"
        }
      },
      {
        "_": "\n        DEPRECATED (pre-10.1), REMOVED (20.3).\n        Keyframe animation root node, in .kf files.\n    ",
        "$": {
          "name": "NiSequenceStreamHelper",
          "abstract": "0",
          "inherit": "NiObjectNET"
        }
      },
      {
        "_": "\n        Determines whether flat shading or smooth shading is used on a shape.\n        \n    ",
        "$": {
          "name": "NiShadeProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Bit 0: Enable smooth phong shading on this shape. Otherwise, hard-edged flat shading will be used on this shape.\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "default": "1",
              "vercond": "(User Version 2 <= 34)"
            }
          }
        ]
      },
      {
        "_": "\n        Skinning data.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSkinData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Offset of the skin from this bone in bind position.",
            "$": {
              "name": "Skin Transform",
              "type": "NiTransform"
            }
          },
          {
            "_": "Number of bones.",
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "_": "This optionally links a NiSkinPartition for hardware-acceleration information.",
            "$": {
              "name": "Skin Partition",
              "type": "Ref",
              "template": "NiSkinPartition",
              "ver1": "4.0.0.2",
              "ver2": "10.1.0.0"
            }
          },
          {
            "_": "Enables Vertex Weights for this NiSkinData.",
            "$": {
              "name": "Has Vertex Weights",
              "type": "byte",
              "ver1": "4.2.1.0",
              "default": "1"
            }
          },
          {
            "_": "Contains offset data for each node that this skin is influenced by.",
            "$": {
              "name": "Bone List",
              "type": "BoneData",
              "arr1": "Num Bones",
              "arg": "Has Vertex Weights"
            }
          }
        ]
      },
      {
        "_": "\n        Skinning instance.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSkinInstance",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Skinning data reference.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiSkinData"
            }
          },
          {
            "_": "Refers to a NiSkinPartition objects, which partitions the mesh such that every vertex is only influenced by a limited number of bones.",
            "$": {
              "name": "Skin Partition",
              "type": "Ref",
              "template": "NiSkinPartition",
              "ver1": "10.2.0.0"
            }
          },
          {
            "_": "Armature root node.",
            "$": {
              "name": "Skeleton Root",
              "type": "Ptr",
              "template": "NiNode"
            }
          },
          {
            "_": "The number of node bones referenced as influences.",
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "_": "List of all armature bones.",
            "$": {
              "name": "Bones",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Bones"
            }
          }
        ]
      },
      {
        "_": "\n        Old version of skinning instance.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTriShapeSkinController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "The number of node bones referenced as influences.",
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "_": "The number of vertex weights stored for each bone.",
            "$": {
              "name": "Vertex Counts",
              "type": "uint",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "List of all armature bones.",
            "$": {
              "name": "Bones",
              "type": "Ptr",
              "template": "NiBone",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "Contains skin weight data for each node that this skin is influenced by.",
            "$": {
              "name": "Bone Data",
              "type": "OldSkinData",
              "arr1": "Num Bones",
              "arr2": "Vertex Counts"
            }
          }
        ]
      },
      {
        "_": "\n        A copy of NISkinInstance for use with NiClod meshes.\n    ",
        "$": {
          "name": "NiClodSkinInstance",
          "abstract": "0",
          "inherit": "NiSkinInstance"
        }
      },
      {
        "_": "\n        Skinning data, optimized for hardware skinning. The mesh is partitioned in submeshes such that each vertex of a submesh is influenced only by a limited and fixed number of bones.\n        \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n    ",
        "$": {
          "name": "NiSkinPartition",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Skin Partition Blocks",
              "type": "uint"
            }
          },
          {
            "_": "Skin partition objects.",
            "$": {
              "name": "Skin Partition Blocks",
              "type": "SkinPartition",
              "arr1": "Num Skin Partition Blocks",
              "vercond": "!((Version == 20.2.0.7) && (User Version 2 == 100))"
            }
          },
          {
            "$": {
              "name": "Data Size",
              "type": "uint",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Vertex Size",
              "type": "uint",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Vertex Data",
              "type": "BSVertexDataSSE",
              "arg": "Vertex Desc\\Vertex Attributes",
              "arr1": "Data Size / Vertex Size",
              "cond": "Data Size > 0",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Partition",
              "type": "SkinPartition",
              "arr1": "Num Skin Partition Blocks",
              "ver": "20.2.0.7",
              "userver2": "100"
            }
          }
        ]
      },
      {
        "_": "\n        A texture.\n    ",
        "$": {
          "name": "NiTexture",
          "abstract": "1",
          "inherit": "NiObjectNET"
        }
      },
      {
        "_": "\n        Describes texture source and properties.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSourceTexture",
          "abstract": "0",
          "inherit": "NiTexture"
        },
        "add": [
          {
            "_": "Is the texture external?",
            "$": {
              "name": "Use External",
              "type": "byte",
              "default": "1"
            }
          },
          {
            "_": "The external texture file name.",
            "$": {
              "name": "File Name",
              "type": "FilePath",
              "cond": "Use External == 1"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Link",
              "type": "Ref",
              "template": "NiObject",
              "cond": "Use External == 1",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "Unknown. Seems to be set if Pixel Data is present?",
            "$": {
              "name": "Unknown Byte",
              "type": "byte",
              "default": "1",
              "cond": "Use External == 0",
              "ver2": "10.0.1.0"
            }
          },
          {
            "_": "The original source filename of the image embedded by the referred NiPixelData object.",
            "$": {
              "name": "File Name",
              "type": "FilePath",
              "cond": "Use External == 0",
              "ver1": "10.1.0.0"
            }
          },
          {
            "_": "NiPixelData or NiPersistentSrcTextureRendererData",
            "$": {
              "name": "Pixel Data",
              "type": "Ref",
              "template": "NiPixelFormat",
              "cond": "Use External == 0"
            }
          },
          {
            "_": "A set of preferences for the texture format. They are a request only and the renderer may ignore them.",
            "$": {
              "name": "Format Prefs",
              "type": "FormatPrefs"
            }
          },
          {
            "_": "If set, then the application cannot assume that any dynamic changes to the pixel data will show in the rendered image.",
            "$": {
              "name": "Is Static",
              "type": "byte",
              "default": "1"
            }
          },
          {
            "_": "A hint to the renderer that the texture can be loaded directly from a texture file into a renderer-specific resource, bypassing the NiPixelData object.",
            "$": {
              "name": "Direct Render",
              "type": "bool",
              "default": "1",
              "ver1": "10.1.0.103"
            }
          },
          {
            "_": "Pixel Data is NiPersistentSrcTextureRendererData instead of NiPixelData.",
            "$": {
              "name": "Persist Render Data",
              "type": "bool",
              "default": "0",
              "ver1": "20.2.0.4"
            }
          }
        ]
      },
      {
        "_": "\n        Gives specularity to a shape. Flags 0x0001.\n        \n    ",
        "$": {
          "name": "NiSpecularProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Bit 0 = Enable specular lighting on this shape.",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1) particle modifier.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSphericalCollider",
          "abstract": "0",
          "inherit": "NiParticleModifier"
        },
        "add": [
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short 1",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Short 2",
              "type": "ushort",
              "ver2": "4.2.0.2"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 3",
              "type": "float",
              "ver1": "4.2.1.0"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 4",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 5",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A spot.\n        \n        \n        \n    ",
        "$": {
          "name": "NiSpotLight",
          "abstract": "0",
          "inherit": "NiPointLight"
        },
        "add": [
          {
            "$": {
              "name": "Outer Spot Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Inner Spot Angle",
              "type": "float",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Describes the distribution of light. (see: glLight)",
            "$": {
              "name": "Exponent",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n        Allows control of stencil testing.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiStencilProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Property flags.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "Enables or disables the stencil test.",
            "$": {
              "name": "Stencil Enabled",
              "type": "byte",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Selects the compare mode function (see: glStencilFunc).",
            "$": {
              "name": "Stencil Function",
              "type": "StencilCompareMode",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Stencil Ref",
              "type": "uint",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "A bit mask. The default is 0xffffffff.",
            "$": {
              "name": "Stencil Mask",
              "type": "uint",
              "default": "4294967295",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Fail Action",
              "type": "StencilAction",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Z Fail Action",
              "type": "StencilAction",
              "ver2": "20.0.0.5"
            }
          },
          {
            "$": {
              "name": "Pass Action",
              "type": "StencilAction",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "Used to enabled double sided faces. Default is 3 (DRAW_BOTH).",
            "$": {
              "name": "Draw Mode",
              "default": "DRAW_BOTH",
              "type": "StencilDrawMode",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "\n            Property flags:\n            Bit 0: Stencil Enable\n            Bits 1-3: Fail Action\n            Bits 4-6: Z Fail Action\n            Bits 7-9: Pass Action\n            Bits 10-11: Draw Mode\n            Bits 12-14: Stencil Function\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "default": "19840",
              "ver1": "20.1.0.3"
            }
          },
          {
            "$": {
              "name": "Stencil Ref",
              "type": "uint",
              "ver1": "20.1.0.3"
            }
          },
          {
            "_": "A bit mask. The default is 0xffffffff.",
            "$": {
              "name": "Stencil Mask",
              "type": "uint",
              "default": "4294967295",
              "ver1": "20.1.0.3"
            }
          }
        ]
      },
      {
        "_": "\n        Apparently commands for an optimizer instructing it to keep things it would normally discard.\n        Also refers to NiNode objects (through their name) in animation .kf files.\n        \n        \n    ",
        "$": {
          "name": "NiStringExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The number of bytes left in the record.  Equals the length of the following string + 4.",
            "$": {
              "name": "Bytes Remaining",
              "type": "uint",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "The string.",
            "$": {
              "name": "String Data",
              "type": "string"
            }
          }
        ]
      },
      {
        "_": "\n        List of 0x00-seperated strings, which are names of controlled objects and controller types. Used in .kf files in conjunction with NiControllerSequence.\n        \n    ",
        "$": {
          "name": "NiStringPalette",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "A bunch of 0x00 seperated strings.",
            "$": {
              "name": "Palette",
              "type": "StringPalette"
            }
          }
        ]
      },
      {
        "_": "\n        List of strings; for example, a list of all bone names.\n        \n        \n    ",
        "$": {
          "name": "NiStringsExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of strings.",
            "$": {
              "name": "Num Strings",
              "type": "uint"
            }
          },
          {
            "_": "The strings.",
            "$": {
              "name": "Data",
              "type": "SizedString",
              "arr1": "Num Strings"
            }
          }
        ]
      },
      {
        "_": "\n        Extra data, used to name different animation sequences.\n        \n        \n        \n    ",
        "$": {
          "name": "NiTextKeyExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Unknown.  Always equals zero in all official files.",
            "$": {
              "name": "Unknown Int 1",
              "type": "uint",
              "ver2": "4.2.2.0"
            }
          },
          {
            "_": "The number of text keys that follow.",
            "$": {
              "name": "Num Text Keys",
              "type": "uint"
            }
          },
          {
            "_": "List of textual notes and at which time they take effect. Used for designating the start and stop of animations and the triggering of sounds.",
            "$": {
              "name": "Text Keys",
              "type": "Key",
              "arg": "1",
              "template": "string",
              "arr1": "Num Text Keys"
            }
          }
        ]
      },
      {
        "_": "\n        Represents an effect that uses projected textures such as projected lights (gobos), environment maps, and fog maps.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n         \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTextureEffect",
          "abstract": "0",
          "inherit": "NiDynamicEffect"
        },
        "add": [
          {
            "_": "Model projection matrix.  Always identity?",
            "$": {
              "name": "Model Projection Matrix",
              "type": "Matrix33"
            }
          },
          {
            "_": "Model projection transform.  Always (0,0,0)?",
            "$": {
              "name": "Model Projection Transform",
              "type": "Vector3"
            }
          },
          {
            "_": "Texture Filtering mode.",
            "$": {
              "name": "Texture Filtering",
              "type": "TexFilterMode",
              "default": "FILTER_TRILERP"
            }
          },
          {
            "$": {
              "name": "Max Anisotropy",
              "type": "ushort",
              "ver1": "20.5.0.4"
            }
          },
          {
            "_": "Texture Clamp mode.",
            "$": {
              "name": "Texture Clamping",
              "type": "TexClampMode",
              "default": "WRAP_S_WRAP_T"
            }
          },
          {
            "_": "The type of effect that the texture is used for.",
            "$": {
              "name": "Texture Type",
              "default": "TEX_ENVIRONMENT_MAP",
              "type": "TextureType"
            }
          },
          {
            "_": "The method that will be used to generate UV coordinates for the texture effect.",
            "$": {
              "name": "Coordinate Generation Type",
              "default": "CG_SPHERE_MAP",
              "type": "CoordGenType"
            }
          },
          {
            "_": "Image index.",
            "$": {
              "name": "Image",
              "type": "Ref",
              "template": "NiImage",
              "ver2": "3.1"
            }
          },
          {
            "_": "Source texture index.",
            "$": {
              "name": "Source Texture",
              "type": "Ref",
              "template": "NiSourceTexture",
              "ver1": "4.0.0.0"
            }
          },
          {
            "_": "Determines whether a clipping plane is used.",
            "$": {
              "name": "Enable Plane",
              "default": "0",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Plane",
              "type": "NiPlane"
            }
          },
          {
            "$": {
              "name": "PS2 L",
              "type": "short",
              "default": "0",
              "ver2": "10.2.0.0"
            }
          },
          {
            "$": {
              "name": "PS2 K",
              "type": "short",
              "default": "-75",
              "ver2": "10.2.0.0"
            }
          },
          {
            "_": "Unknown: 0.",
            "$": {
              "name": "Unknown Short",
              "type": "ushort",
              "ver2": "4.1.0.12"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTextureModeProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "$": {
              "name": "Unknown Ints",
              "type": "uint",
              "arr1": "3",
              "ver2": "2.3"
            }
          },
          {
            "_": "Unknown. Either 210 or 194.",
            "$": {
              "name": "Unknown Short",
              "type": "short",
              "ver1": "3.0"
            }
          },
          {
            "_": "0?",
            "$": {
              "name": "PS2 L",
              "type": "short",
              "default": "0",
              "ver1": "3.1",
              "ver2": "10.2.0.0"
            }
          },
          {
            "_": "-75?",
            "$": {
              "name": "PS2 K",
              "type": "short",
              "default": "-75",
              "ver1": "3.1",
              "ver2": "10.2.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiImage",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "0 if the texture is internal to the NIF file.",
            "$": {
              "name": "Use External",
              "type": "byte"
            }
          },
          {
            "_": "The filepath to the texture.",
            "$": {
              "name": "File Name",
              "type": "FilePath",
              "cond": "Use External != 0"
            }
          },
          {
            "_": "Link to the internally stored image data.",
            "$": {
              "name": "Image Data",
              "type": "Ref",
              "template": "NiRawImageData",
              "cond": "Use External == 0"
            }
          },
          {
            "_": "Unknown.  Often seems to be 7. Perhaps m_uiMipLevels?",
            "$": {
              "name": "Unknown Int",
              "type": "uint",
              "default": "7"
            }
          },
          {
            "_": "Unknown.  Perhaps fImageScale?",
            "$": {
              "name": "Unknown Float",
              "type": "float",
              "ver1": "3.1",
              "default": "128.5"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTextureProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Property flags.",
            "$": {
              "name": "Unknown Ints 1",
              "type": "uint",
              "arr1": "2",
              "ver2": "2.3"
            }
          },
          {
            "_": "Property flags.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver1": "3.0"
            }
          },
          {
            "_": "Link to the texture image.",
            "$": {
              "name": "Image",
              "type": "Ref",
              "template": "NiImage"
            }
          },
          {
            "_": "Unknown.  0?",
            "$": {
              "name": "Unknown Ints 2",
              "type": "uint",
              "arr1": "2",
              "ver1": "3.0",
              "ver2": "3.03"
            }
          }
        ]
      },
      {
        "_": "\n        Describes how a fragment shader should be configured for a given piece of geometry.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTexturingProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "Property flags.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "Property flags.",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "ver1": "20.1.0.2"
            }
          },
          {
            "_": "Determines how the texture will be applied.  Seems to have special functions in Oblivion.",
            "$": {
              "name": "Apply Mode",
              "type": "ApplyMode",
              "default": "APPLY_MODULATE",
              "ver1": "3.3.0.13",
              "ver2": "20.1.0.1"
            }
          },
          {
            "_": "Number of textures.",
            "$": {
              "name": "Texture Count",
              "type": "uint",
              "default": "7"
            }
          },
          {
            "_": "Do we have a base texture?",
            "$": {
              "name": "Has Base Texture",
              "type": "bool"
            }
          },
          {
            "_": "The base texture.",
            "$": {
              "name": "Base Texture",
              "type": "TexDesc",
              "cond": "Has Base Texture"
            }
          },
          {
            "_": "Do we have a dark texture?",
            "$": {
              "name": "Has Dark Texture",
              "type": "bool"
            }
          },
          {
            "_": "The dark texture.",
            "$": {
              "name": "Dark Texture",
              "type": "TexDesc",
              "cond": "Has Dark Texture"
            }
          },
          {
            "_": "Do we have a detail texture?",
            "$": {
              "name": "Has Detail Texture",
              "type": "bool"
            }
          },
          {
            "_": "The detail texture.",
            "$": {
              "name": "Detail Texture",
              "type": "TexDesc",
              "cond": "Has Detail Texture"
            }
          },
          {
            "_": "Do we have a gloss texture?",
            "$": {
              "name": "Has Gloss Texture",
              "type": "bool"
            }
          },
          {
            "_": "The gloss texture.",
            "$": {
              "name": "Gloss Texture",
              "type": "TexDesc",
              "cond": "Has Gloss Texture"
            }
          },
          {
            "_": "Do we have a glow texture?",
            "$": {
              "name": "Has Glow Texture",
              "type": "bool"
            }
          },
          {
            "_": "The glowing texture.",
            "$": {
              "name": "Glow Texture",
              "type": "TexDesc",
              "cond": "Has Glow Texture"
            }
          },
          {
            "_": "Do we have a bump map texture?",
            "$": {
              "name": "Has Bump Map Texture",
              "type": "bool",
              "ver1": "3.3.0.13",
              "cond": "Texture Count > 5"
            }
          },
          {
            "_": "The bump map texture.",
            "$": {
              "name": "Bump Map Texture",
              "type": "TexDesc",
              "cond": "Has Bump Map Texture"
            }
          },
          {
            "$": {
              "name": "Bump Map Luma Scale",
              "type": "float",
              "cond": "Has Bump Map Texture"
            }
          },
          {
            "$": {
              "name": "Bump Map Luma Offset",
              "type": "float",
              "cond": "Has Bump Map Texture"
            }
          },
          {
            "$": {
              "name": "Bump Map Matrix",
              "type": "Matrix22",
              "cond": "Has Bump Map Texture"
            }
          },
          {
            "_": "Do we have a normal texture?",
            "$": {
              "name": "Has Normal Texture",
              "type": "bool",
              "cond": "Texture Count > 6",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Normal texture.",
            "$": {
              "name": "Normal Texture",
              "type": "TexDesc",
              "cond": "Has Normal Texture"
            }
          },
          {
            "$": {
              "name": "Has Parallax Texture",
              "type": "bool",
              "cond": "Texture Count > 7",
              "ver1": "20.2.0.5"
            }
          },
          {
            "$": {
              "name": "Parallax Texture",
              "type": "TexDesc",
              "cond": "Has Parallax Texture"
            }
          },
          {
            "$": {
              "name": "Parallax Offset",
              "type": "float",
              "cond": "Has Parallax Texture"
            }
          },
          {
            "_": "Do we have a decal 0 texture?",
            "$": {
              "name": "Has Decal 0 Texture",
              "type": "bool",
              "cond": "Texture Count > 6",
              "ver2": "20.2.0.4"
            }
          },
          {
            "_": "Do we have a decal 0 texture?",
            "$": {
              "name": "Has Decal 0 Texture",
              "type": "bool",
              "cond": "Texture Count > 8",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "The decal texture.",
            "$": {
              "name": "Decal 0 Texture",
              "type": "TexDesc",
              "cond": "Has Decal 0 Texture"
            }
          },
          {
            "_": "Do we have a decal 1 texture?",
            "$": {
              "name": "Has Decal 1 Texture",
              "type": "bool",
              "cond": "Texture Count > 7",
              "ver2": "20.2.0.4"
            }
          },
          {
            "_": "Do we have a decal 1 texture?",
            "$": {
              "name": "Has Decal 1 Texture",
              "type": "bool",
              "cond": "Texture Count > 9",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Another decal texture.",
            "$": {
              "name": "Decal 1 Texture",
              "type": "TexDesc",
              "cond": "Has Decal 1 Texture"
            }
          },
          {
            "_": "Do we have a decal 2 texture?",
            "$": {
              "name": "Has Decal 2 Texture",
              "type": "bool",
              "cond": "Texture Count > 8",
              "ver2": "20.2.0.4"
            }
          },
          {
            "_": "Do we have a decal 2 texture?",
            "$": {
              "name": "Has Decal 2 Texture",
              "type": "bool",
              "cond": "Texture Count > 10",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Another decal texture.",
            "$": {
              "name": "Decal 2 Texture",
              "type": "TexDesc",
              "cond": "Has Decal 2 Texture"
            }
          },
          {
            "_": "Do we have a decal 3 texture?",
            "$": {
              "name": "Has Decal 3 Texture",
              "type": "bool",
              "cond": "Texture Count > 9",
              "ver2": "20.2.0.4"
            }
          },
          {
            "_": "Do we have a decal 3 texture?",
            "$": {
              "name": "Has Decal 3 Texture",
              "type": "bool",
              "cond": "Texture Count > 11",
              "ver1": "20.2.0.5"
            }
          },
          {
            "_": "Another decal texture. Who knows the limit.",
            "$": {
              "name": "Decal 3 Texture",
              "type": "TexDesc",
              "cond": "Has Decal 3 Texture"
            }
          },
          {
            "_": "Number of Shader textures that follow.",
            "$": {
              "name": "Num Shader Textures",
              "type": "uint",
              "ver1": "10.0.1.0"
            }
          },
          {
            "_": "Shader textures.",
            "$": {
              "name": "Shader Textures",
              "type": "ShaderTexDesc",
              "arr1": "Num Shader Textures",
              "ver1": "10.0.1.0"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiMultiTextureProperty",
          "abstract": "0",
          "inherit": "NiTexturingProperty"
        }
      },
      {
        "_": "\n        Wrapper for transformation animation keys.\n    ",
        "$": {
          "name": "NiTransformData",
          "abstract": "0",
          "inherit": "NiKeyframeData"
        }
      },
      {
        "_": "\n        A shape node that refers to singular triangle data.\n    ",
        "$": {
          "name": "NiTriShape",
          "abstract": "0",
          "inherit": "NiTriBasedGeom"
        }
      },
      {
        "_": "\n        Holds mesh data using a list of singular triangles.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTriShapeData",
          "abstract": "0",
          "inherit": "NiTriBasedGeomData"
        },
        "add": [
          {
            "_": "Num Triangles times 3.",
            "$": {
              "name": "Num Triangle Points",
              "type": "uint"
            }
          },
          {
            "_": "Do we have triangle data?",
            "$": {
              "name": "Has Triangles",
              "type": "bool",
              "ver1": "10.1.0.0",
              "calculated": "1"
            }
          },
          {
            "_": "Triangle data.",
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "Triangle face data.",
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "cond": "Has Triangles",
              "ver1": "10.0.1.3"
            }
          },
          {
            "_": "Number of shared normals groups.",
            "$": {
              "name": "Num Match Groups",
              "type": "ushort",
              "ver1": "3.1"
            }
          },
          {
            "_": "The shared normals.",
            "$": {
              "name": "Match Groups",
              "type": "MatchGroup",
              "arr1": "Num Match Groups",
              "ver1": "3.1"
            }
          }
        ]
      },
      {
        "_": "\n        A shape node that refers to data organized into strips of triangles\n    ",
        "$": {
          "name": "NiTriStrips",
          "abstract": "0",
          "inherit": "NiTriBasedGeom"
        }
      },
      {
        "_": "\n        Holds mesh data using strips of triangles.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiTriStripsData",
          "abstract": "0",
          "inherit": "NiTriBasedGeomData"
        },
        "add": [
          {
            "_": "Number of OpenGL triangle strips that are present.",
            "$": {
              "name": "Num Strips",
              "type": "ushort"
            }
          },
          {
            "_": "The number of points in each triangle strip.",
            "$": {
              "name": "Strip Lengths",
              "type": "ushort",
              "arr1": "Num Strips"
            }
          },
          {
            "_": "Do we have strip point data?",
            "$": {
              "name": "Has Points",
              "type": "bool",
              "ver1": "10.0.1.3"
            }
          },
          {
            "_": "The points in the Triangle strips.  Size is the sum of all entries in Strip Lengths.",
            "$": {
              "name": "Points",
              "type": "ushort",
              "arr1": "Num Strips",
              "arr2": "Strip Lengths",
              "ver2": "10.0.1.2"
            }
          },
          {
            "_": "The points in the Triangle strips. Size is the sum of all entries in Strip Lengths.",
            "$": {
              "name": "Points",
              "type": "ushort",
              "arr1": "Num Strips",
              "arr2": "Strip Lengths",
              "cond": "Has Points",
              "ver1": "10.0.1.3"
            }
          }
        ]
      },
      {
        "_": "\n        Unknown\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiEnvMappedTriShape",
          "abstract": "0",
          "inherit": "NiObjectNET"
        },
        "add": [
          {
            "_": "unknown (=4 - 5)",
            "$": {
              "name": "Unknown 1",
              "type": "ushort"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown Matrix",
              "type": "Matrix44"
            }
          },
          {
            "_": "The number of child objects.",
            "$": {
              "name": "Num Children",
              "type": "uint"
            }
          },
          {
            "_": "List of child node object indices.",
            "$": {
              "name": "Children",
              "type": "Ref",
              "template": "NiAVObject",
              "arr1": "Num Children"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Child 2",
              "type": "Ref",
              "template": "NiObject"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Child 3",
              "type": "Ref",
              "template": "NiObject"
            }
          }
        ]
      },
      {
        "_": "\n        Holds mesh data using a list of singular triangles.\n    ",
        "$": {
          "name": "NiEnvMappedTriShapeData",
          "abstract": "0",
          "inherit": "NiTriShapeData"
        }
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        Sub data of NiBezierMesh\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBezierTriangle4",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 1",
              "type": "uint",
              "arr1": "6"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 2",
              "type": "ushort"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Matrix",
              "type": "Matrix33"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Vector 1",
              "type": "Vector3"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Vector 2",
              "type": "Vector3"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 3",
              "type": "short",
              "arr1": "4"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 4",
              "type": "byte"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 5",
              "type": "uint"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 6",
              "type": "short",
              "arr1": "24"
            }
          }
        ]
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        Unknown\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiBezierMesh",
          "abstract": "0",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "references.",
            "$": {
              "name": "Num Bezier Triangles",
              "type": "uint"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Bezier Triangle",
              "type": "Ref",
              "template": "NiBezierTriangle4",
              "arr1": "Num Bezier Triangles"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 3",
              "type": "uint"
            }
          },
          {
            "_": "Data count.",
            "$": {
              "name": "Count 1",
              "type": "ushort"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 4",
              "type": "ushort"
            }
          },
          {
            "_": "data.",
            "$": {
              "name": "Points 1",
              "type": "Vector3",
              "arr1": "Count 1"
            }
          },
          {
            "_": "Unknown (illegal link?).",
            "$": {
              "name": "Unknown 5",
              "type": "uint"
            }
          },
          {
            "_": "data.",
            "$": {
              "name": "Points 2",
              "type": "float",
              "arr1": "Count 1",
              "arr2": "2"
            }
          },
          {
            "_": "unknown",
            "$": {
              "name": "Unknown 6",
              "type": "uint"
            }
          },
          {
            "_": "data count 2.",
            "$": {
              "name": "Count 2",
              "type": "ushort"
            }
          },
          {
            "_": "data count.",
            "$": {
              "name": "Data 2",
              "type": "ushort",
              "arr1": "Count 2",
              "arr2": "4"
            }
          }
        ]
      },
      {
        "_": "\n        A shape node that holds continuous level of detail information.\n        Seems to be specific to Freedom Force.\n    ",
        "$": {
          "name": "NiClod",
          "abstract": "0",
          "inherit": "NiTriBasedGeom"
        }
      },
      {
        "_": "\n        Holds mesh data for continuous level of detail shapes.\n        Pesumably a progressive mesh with triangles specified by edge splits.\n        Seems to be specific to Freedom Force.\n        The structure of this is uncertain and highly experimental at this point.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiClodData",
          "abstract": "0",
          "inherit": "NiTriBasedGeomData"
        },
        "add": [
          {
            "$": {
              "name": "Unknown Shorts",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Unknown Count 1",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Unknown Count 2",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Unknown Count 3",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Unknown Float",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unknown Short",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Unknown Clod Shorts 1",
              "type": "ushort",
              "arr1": "Unknown Count 1",
              "arr2": "6"
            }
          },
          {
            "$": {
              "name": "Unknown Clod Shorts 2",
              "type": "ushort",
              "arr1": "Unknown Count 2"
            }
          },
          {
            "$": {
              "name": "Unknown Clod Shorts 3",
              "type": "ushort",
              "arr1": "Unknown Count 3",
              "arr2": "6"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (pre-10.1), REMOVED (20.3).\n        Time controller for texture coordinates.\n        \n        \n    ",
        "$": {
          "name": "NiUVController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "Always 0?",
            "$": {
              "name": "Unknown Short",
              "type": "ushort"
            }
          },
          {
            "_": "Texture coordinate controller data index.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiUVData"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (pre-10.1), REMOVED (20.3)\n        Texture coordinate data.\n        \n    ",
        "$": {
          "name": "NiUVData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "\n            Four UV data groups. Appear to be U translation, V translation, U scaling/tiling, V scaling/tiling.\n        ",
            "$": {
              "name": "UV Groups",
              "type": "KeyGroup",
              "template": "float",
              "arr1": "4"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5).\n        Extra data in the form of a vector (as x, y, z, w components).\n        \n    ",
        "$": {
          "name": "NiVectorExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "The vector data.",
            "$": {
              "name": "Vector Data",
              "type": "Vector4"
            }
          }
        ]
      },
      {
        "_": "\n        Property of vertex colors. This object is referred to by the root object of the NIF file whenever some NiTriShapeData object has vertex colors with non-default settings; if not present, vertex colors have vertex_mode=2 and lighting_mode=1.\n        \n        \n        \n    ",
        "$": {
          "name": "NiVertexColorProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Bits 0-2: Unknown\n            Bit 3: Lighting Mode\n            Bits 4-5: Vertex Mode\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          },
          {
            "_": "In Flags from 20.1.0.3 on.",
            "$": {
              "name": "Vertex Mode",
              "type": "VertMode",
              "ver2": "20.0.0.5"
            }
          },
          {
            "_": "In Flags from 20.1.0.3 on.",
            "$": {
              "name": "Lighting Mode",
              "type": "LightMode",
              "ver2": "20.0.0.5"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.x), REMOVED (?)\n        Not used in skinning.\n        Unsure of use - perhaps for morphing animation or gravity.\n        \n        \n        \n    ",
        "$": {
          "name": "NiVertWeightsExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of bytes in this data object.",
            "$": {
              "name": "Num Bytes",
              "type": "uint"
            }
          },
          {
            "_": "Number of vertices.",
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "The vertex weights.",
            "$": {
              "name": "Weight",
              "type": "float",
              "arr1": "Num Vertices"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (10.2), REMOVED (?), Replaced by NiBoolData.\n        Visibility data for a controller.\n        \n        \n    ",
        "$": {
          "name": "NiVisData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Keys",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Keys",
              "type": "Key",
              "arg": "1",
              "template": "byte",
              "arr1": "Num Keys"
            }
          }
        ]
      },
      {
        "_": "\n        Allows applications to switch between drawing solid geometry or wireframe outlines.\n        \n    ",
        "$": {
          "name": "NiWireframeProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Property flags.\n            0 - Wireframe Mode Disabled\n            1 - Wireframe Mode Enabled\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags"
            }
          }
        ]
      },
      {
        "_": "\n        Allows applications to set the test and write modes of the renderer's Z-buffer and to set the comparison function used for the Z-buffer test.\n        \n        \n    ",
        "$": {
          "name": "NiZBufferProperty",
          "abstract": "0",
          "inherit": "NiProperty"
        },
        "add": [
          {
            "_": "\n            Bit 0 enables the z test\n            Bit 1 controls wether the Z buffer is read only (0) or read/write (1)\n        ",
            "$": {
              "name": "Flags",
              "type": "Flags",
              "default": "3"
            }
          },
          {
            "_": "\n            Z-Test function (see: glDepthFunc). In Flags from 20.1.0.3 on.\n        ",
            "$": {
              "name": "Function",
              "type": "ZCompareMode",
              "default": "ZCOMP_LESS_EQUAL",
              "ver1": "4.1.0.12",
              "ver2": "20.0.0.5"
            }
          }
        ]
      },
      {
        "_": "\n        Morrowind-specific node for collision mesh.\n    ",
        "$": {
          "name": "RootCollisionNode",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        LEGACY (pre-10.1)\n        Raw image data.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiRawImageData",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Image width",
            "$": {
              "name": "Width",
              "type": "uint"
            }
          },
          {
            "_": "Image height",
            "$": {
              "name": "Height",
              "type": "uint"
            }
          },
          {
            "_": "The format of the raw image data.",
            "$": {
              "name": "Image Type",
              "type": "ImageType"
            }
          },
          {
            "_": "Image pixel data.",
            "$": {
              "name": "RGB Image Data",
              "type": "ByteColor3",
              "arr1": "Width",
              "arr2": "Height",
              "cond": "Image Type == 1"
            }
          },
          {
            "_": "Image pixel data.",
            "$": {
              "name": "RGBA Image Data",
              "type": "ByteColor4",
              "arr1": "Width",
              "arr2": "Height",
              "cond": "Image Type == 2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiAccumulator",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Used to turn sorting off for individual subtrees in a scene. Useful if objects must be drawn in a fixed order.\n        \n        \n    ",
        "$": {
          "name": "NiSortAdjustNode",
          "abstract": "0",
          "inherit": "NiNode"
        },
        "add": [
          {
            "_": "Sorting",
            "$": {
              "name": "Sorting Mode",
              "type": "SortingMode",
              "default": "SORTING_INHERIT"
            }
          },
          {
            "$": {
              "name": "Accumulator",
              "type": "Ref",
              "template": "NiAccumulator",
              "ver2": "20.0.0.3"
            }
          }
        ]
      },
      {
        "_": "\n        Represents cube maps that are created from either a set of six image files, six blocks of pixel data, or a single pixel data with six faces.\n    ",
        "$": {
          "name": "NiSourceCubeMap",
          "abstract": "0",
          "inherit": "NiSourceTexture"
        }
      },
      {
        "_": "\n        A PhysX prop which holds information about PhysX actors in a Gamebryo scene\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXProp",
          "abstract": "0",
          "inherit": "NiObjectNET"
        },
        "add": [
          {
            "$": {
              "name": "PhysX to World Scale",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Num Sources",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Sources",
              "type": "Ref",
              "template": "NiObject",
              "arr1": "Num Sources"
            }
          },
          {
            "$": {
              "name": "Num Dests",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Dests",
              "type": "Ref",
              "template": "NiPhysXDest",
              "arr1": "Num Dests"
            }
          },
          {
            "$": {
              "name": "Num Modified Meshes",
              "type": "uint",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Modified Meshes",
              "type": "Ref",
              "template": "NiMesh",
              "arr1": "Num Modified Meshes",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Temp Name",
              "type": "string",
              "ver1": "30.1.0.2",
              "ver2": "30.2.0.2"
            }
          },
          {
            "$": {
              "name": "Keep Meshes",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Prop Description",
              "type": "Ref",
              "template": "NiPhysXPropDesc"
            }
          }
        ]
      },
      {
        "_": "\n        For serialization of PhysX objects and to attach them to the scene.\n        \n        \n        \n        \n        \n         \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXPropDesc",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Actors",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Actors",
              "type": "Ref",
              "template": "NiPhysXActorDesc",
              "arr1": "Num Actors"
            }
          },
          {
            "$": {
              "name": "Num Joints",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Joints",
              "type": "Ref",
              "template": "NiPhysXJointDesc",
              "arr1": "Num Joints"
            }
          },
          {
            "$": {
              "name": "Num Clothes",
              "type": "uint",
              "ver1": "20.3.0.5"
            }
          },
          {
            "$": {
              "name": "Clothes",
              "type": "Ref",
              "template": "NiObject",
              "arr1": "Num Clothes",
              "ver1": "20.3.0.5"
            }
          },
          {
            "$": {
              "name": "Num Materials",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Materials",
              "type": "PhysXMaterialRef",
              "arr1": "Num Materials"
            }
          },
          {
            "$": {
              "name": "Num States",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num State Names",
              "type": "uint",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "State Names",
              "type": "PhysXStateName",
              "arr1": "Num State Names",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "byte",
              "ver1": "20.4.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        For serializing NxActor objects.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXActorDesc",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Actor Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Num Poses",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Poses",
              "type": "Matrix34",
              "arr1": "Num Poses"
            }
          },
          {
            "$": {
              "name": "Body Desc",
              "type": "Ref",
              "template": "NiPhysXBodyDesc"
            }
          },
          {
            "$": {
              "name": "Density",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Actor Flags",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Actor Group",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Dominance Group",
              "type": "ushort",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Contact Report Flags",
              "type": "uint",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Force Field Material",
              "type": "ushort",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Dummy",
              "type": "uint",
              "ver1": "20.3.0.1",
              "ver2": "20.3.0.5"
            }
          },
          {
            "$": {
              "name": "Num Shape Descs",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Shape Descriptions",
              "type": "Ref",
              "template": "NiPhysXShapeDesc",
              "arr1": "Num Shape Descs"
            }
          },
          {
            "$": {
              "name": "Actor Parent",
              "type": "Ref",
              "template": "NiPhysXActorDesc"
            }
          },
          {
            "$": {
              "name": "Source",
              "type": "Ref",
              "template": "NiPhysXRigidBodySrc"
            }
          },
          {
            "$": {
              "name": "Dest",
              "type": "Ref",
              "template": "NiPhysXRigidBodyDest"
            }
          }
        ]
      },
      {
        "_": "\n        For serializing NxBodyDesc objects.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXBodyDesc",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Local Pose",
              "type": "Matrix34"
            }
          },
          {
            "$": {
              "name": "Space Inertia",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Mass",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Num Vels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Vels",
              "type": "PhysXBodyStoredVels",
              "arr1": "Num Vels"
            }
          },
          {
            "$": {
              "name": "Wake Up Counter",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Linear Damping",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Angular Damping",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Max Angular Velocity",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "CCD Motion Threshold",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Sleep Linear Velocity",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Sleep Angular Velocity",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Solver Iteration Count",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Sleep Energy Threshold",
              "type": "float",
              "ver1": "20.3.0.0"
            }
          },
          {
            "$": {
              "name": "Sleep Damping",
              "type": "float",
              "ver1": "20.3.0.0"
            }
          },
          {
            "$": {
              "name": "Contact Report Threshold",
              "type": "float",
              "ver1": "20.4.0.0"
            }
          }
        ]
      },
      {
        "_": "\n        A PhysX Joint abstract base class.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXJointDesc",
          "inherit": "NiObject",
          "abstract": "1"
        },
        "add": [
          {
            "$": {
              "name": "Joint Type",
              "type": "NxJointType"
            }
          },
          {
            "$": {
              "name": "Joint Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Actors",
              "type": "NiPhysXJointActor",
              "arr1": "2"
            }
          },
          {
            "$": {
              "name": "Max Force",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Max Torque",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Solver Extrapolation Factor",
              "type": "float",
              "ver1": "20.5.0.3"
            }
          },
          {
            "$": {
              "name": "Use Acceleration Spring",
              "type": "uint",
              "ver1": "20.5.0.3"
            }
          },
          {
            "$": {
              "name": "Joint Flags",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Limit Point",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Num Limits",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Limits",
              "type": "NiPhysXJointLimit",
              "arr1": "Num Limits"
            }
          }
        ]
      },
      {
        "_": "\n        A 6DOF (6 degrees of freedom) joint.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXD6JointDesc",
          "inherit": "NiPhysXJointDesc"
        },
        "add": [
          {
            "$": {
              "name": "X Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Y Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Z Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Swing 1 Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Swing 2 Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Twist Motion",
              "type": "NxD6JointMotion"
            }
          },
          {
            "$": {
              "name": "Linear Limit",
              "type": "NxJointLimitSoftDesc"
            }
          },
          {
            "$": {
              "name": "Swing 1 Limit",
              "type": "NxJointLimitSoftDesc"
            }
          },
          {
            "$": {
              "name": "Swing 2 Limit",
              "type": "NxJointLimitSoftDesc"
            }
          },
          {
            "$": {
              "name": "Twist Low Limit",
              "type": "NxJointLimitSoftDesc"
            }
          },
          {
            "$": {
              "name": "Twist High Limit",
              "type": "NxJointLimitSoftDesc"
            }
          },
          {
            "$": {
              "name": "X Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Y Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Z Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Swing Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Twist Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Slerp Drive",
              "type": "NxJointDriveDesc"
            }
          },
          {
            "$": {
              "name": "Drive Position",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Drive Orientation",
              "type": "Quaternion"
            }
          },
          {
            "$": {
              "name": "Drive Linear Velocity",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Drive Angular Velocity",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Projection Mode",
              "type": "NxJointProjectionMode"
            }
          },
          {
            "$": {
              "name": "Projection Distance",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Projection Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Gear Ratio",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        For serializing NxShapeDesc objects\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXShapeDesc",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Shape Type",
              "type": "NxShapeType"
            }
          },
          {
            "$": {
              "name": "Local Pose",
              "type": "Matrix34"
            }
          },
          {
            "$": {
              "name": "Shape Flags",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Collision Group",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Material Index",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Density",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Mass",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Skin Width",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Shape Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Non-Interacting Compartment Types",
              "type": "uint",
              "ver1": "20.4.0.0"
            }
          },
          {
            "$": {
              "name": "Collision Bits",
              "type": "uint",
              "arr1": "4"
            }
          },
          {
            "$": {
              "name": "Plane",
              "type": "NxPlane",
              "cond": "Shape Type == 0"
            }
          },
          {
            "$": {
              "name": "Sphere Radius",
              "type": "float",
              "cond": "Shape Type == 1"
            }
          },
          {
            "$": {
              "name": "Box Half Extents",
              "type": "Vector3",
              "cond": "Shape Type == 2"
            }
          },
          {
            "$": {
              "name": "Capsule",
              "type": "NxCapsule",
              "cond": "Shape Type == 3"
            }
          },
          {
            "$": {
              "name": "Mesh",
              "type": "Ref",
              "template": "NiPhysXMeshDesc",
              "cond": "(Shape Type == 5) || (Shape Type == 6)"
            }
          }
        ]
      },
      {
        "_": "\n        Holds mesh data for streaming.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXMeshDesc",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Is Convex",
              "type": "bool",
              "ver2": "20.3.0.4"
            }
          },
          {
            "$": {
              "name": "Mesh Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Mesh Data",
              "type": "ByteArray"
            }
          },
          {
            "$": {
              "name": "Mesh Size",
              "type": "ushort",
              "ver1": "20.3.0.5",
              "ver2": "30.2.0.2"
            }
          },
          {
            "$": {
              "name": "Mesh Data",
              "type": "ushort",
              "arr1": "Mesh Size",
              "ver1": "20.3.0.5",
              "ver2": "30.2.0.2"
            }
          },
          {
            "$": {
              "name": "Mesh Flags",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Mesh Paging Mode",
              "type": "uint",
              "ver1": "20.3.0.1"
            }
          },
          {
            "$": {
              "name": "Is Hardware",
              "type": "bool",
              "ver1": "20.3.0.2",
              "ver2": "20.3.0.4"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "byte",
              "ver1": "20.3.0.5"
            }
          }
        ]
      },
      {
        "_": "\n        For serializing NxMaterialDesc objects.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPhysXMaterialDesc",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Index",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num States",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Material Descs",
              "type": "NxMaterialDesc",
              "arr1": "Num States"
            }
          }
        ]
      },
      {
        "_": "\n        A destination is a link between a PhysX actor and a Gamebryo object being driven by the physics.\n        \n        \n    ",
        "$": {
          "name": "NiPhysXDest",
          "inherit": "NiObject",
          "abstract": "1"
        },
        "add": [
          {
            "$": {
              "name": "Active",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Interpolate",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        Base for destinations that set a rigid body state.\n    ",
        "$": {
          "name": "NiPhysXRigidBodyDest",
          "inherit": "NiPhysXDest",
          "abstract": "1"
        }
      },
      {
        "_": "\n        Connects PhysX rigid body actors to a scene node.\n        \n    ",
        "$": {
          "name": "NiPhysXTransformDest",
          "inherit": "NiPhysXRigidBodyDest"
        },
        "add": [
          {
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        A source is a link between a Gamebryo object and a PhysX actor.\n        \n        \n    ",
        "$": {
          "name": "NiPhysXSrc",
          "inherit": "NiObject",
          "abstract": "1"
        },
        "add": [
          {
            "$": {
              "name": "Active",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Interpolate",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        Sets state of a rigid body PhysX actor.\n        \n    ",
        "$": {
          "name": "NiPhysXRigidBodySrc",
          "inherit": "NiPhysXSrc",
          "abstract": "1"
        },
        "add": [
          {
            "$": {
              "name": "Source",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Sets state of kinematic PhysX actor.\n    ",
        "$": {
          "name": "NiPhysXKinematicSrc",
          "inherit": "NiPhysXRigidBodySrc"
        }
      },
      {
        "_": "\n        Sends Gamebryo scene state to a PhysX dynamic actor.\n    ",
        "$": {
          "name": "NiPhysXDynamicSrc",
          "inherit": "NiPhysXRigidBodySrc"
        }
      },
      {
        "_": "\n        Wireframe geometry.\n    ",
        "$": {
          "name": "NiLines",
          "inherit": "NiTriBasedGeom"
        }
      },
      {
        "_": "\n        Wireframe geometry data.\n        \n    ",
        "$": {
          "name": "NiLinesData",
          "inherit": "NiGeometryData"
        },
        "add": [
          {
            "_": "Is vertex connected to other (next?) vertex?",
            "$": {
              "name": "Lines",
              "type": "bool",
              "arr1": "Num Vertices"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5), functionality included in NiMeshScreenElements.\n        Two dimensional screen elements.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiScreenElementsData",
          "inherit": "NiTriShapeData"
        },
        "add": [
          {
            "$": {
              "name": "Max Polygons",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Polygons",
              "type": "Polygon",
              "arr1": "Max Polygons"
            }
          },
          {
            "$": {
              "name": "Polygon Indices",
              "type": "ushort",
              "arr1": "Max Polygons"
            }
          },
          {
            "$": {
              "name": "Polygon Grow By",
              "type": "ushort",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Num Polygons",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Max Vertices",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Vertices Grow By",
              "type": "ushort",
              "default": "1"
            }
          },
          {
            "$": {
              "name": "Max Indices",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Indices Grow By",
              "type": "ushort",
              "default": "1"
            }
          }
        ]
      },
      {
        "_": "\n        DEPRECATED (20.5), replaced by NiMeshScreenElements.\n        Two dimensional screen elements.\n    ",
        "$": {
          "name": "NiScreenElements",
          "inherit": "NiTriShape"
        }
      },
      {
        "_": "\n        NiRoomGroup represents a set of connected rooms i.e. a game level.\n        \n        \n        \n    ",
        "$": {
          "name": "NiRoomGroup",
          "inherit": "NiNode"
        },
        "add": [
          {
            "_": "Object that represents the room group as seen from the outside.",
            "$": {
              "name": "Shell",
              "type": "Ptr",
              "template": "NiNode"
            }
          },
          {
            "$": {
              "name": "Num Rooms",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Rooms",
              "type": "Ptr",
              "template": "NiRoom",
              "arr1": "Num Rooms"
            }
          }
        ]
      },
      {
        "_": "\n        NiRoom objects represent cells in a cell-portal culling system.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiRoom",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Num Walls",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Wall Planes",
              "type": "NiPlane",
              "arr1": "Num Walls"
            }
          },
          {
            "$": {
              "name": "Num In Portals",
              "type": "uint"
            }
          },
          {
            "_": "The portals which see into the room.",
            "$": {
              "name": "In Portals",
              "type": "Ptr",
              "template": "NiPortal",
              "arr1": "Num In Portals"
            }
          },
          {
            "$": {
              "name": "Num Out Portals",
              "type": "uint"
            }
          },
          {
            "_": "The portals which see out of the room.",
            "$": {
              "name": "Out Portals",
              "type": "Ptr",
              "template": "NiPortal",
              "arr1": "Num Out Portals"
            }
          },
          {
            "$": {
              "name": "Num Fixtures",
              "type": "uint"
            }
          },
          {
            "_": "All geometry associated with the room.",
            "$": {
              "name": "Fixtures",
              "type": "Ptr",
              "template": "NiAVObject",
              "arr1": "Num Fixtures"
            }
          }
        ]
      },
      {
        "_": "\n        NiPortal objects are grouping nodes that support aggressive visibility culling.\n        They represent flat polygonal regions through which a part of a scene graph can be viewed.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPortal",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "$": {
              "name": "Portal Flags",
              "type": "ushort"
            }
          },
          {
            "_": "Unused in 20.x, possibly also 10.x.",
            "$": {
              "name": "Plane Count",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Vertices",
              "type": "Vector3",
              "arr1": "Num Vertices"
            }
          },
          {
            "_": "Root of the scenegraph which is to be seen through this portal.",
            "$": {
              "name": "Adjoiner",
              "type": "Ptr",
              "template": "NiNode"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific fade node.\n    ",
        "$": {
          "name": "BSFadeNode",
          "abstract": "0",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderProperty",
          "abstract": "0",
          "inherit": "NiShadeProperty"
        },
        "add": [
          {
            "$": {
              "name": "Shader Type",
              "type": "BSShaderType",
              "default": "SHADER_DEFAULT",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "$": {
              "name": "Shader Flags",
              "type": "BSShaderFlags",
              "default": "0x82000000",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "$": {
              "name": "Shader Flags 2",
              "type": "BSShaderFlags2",
              "default": "1",
              "vercond": "(User Version 2 <= 34)"
            }
          },
          {
            "_": "Scales the intensity of the environment/cube map.",
            "$": {
              "name": "Environment Map Scale",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 <= 34)"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n    ",
        "$": {
          "name": "BSShaderLightingProperty",
          "abstract": "1",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "_": "How to handle texture borders.",
            "$": {
              "name": "Texture Clamp Mode",
              "type": "TexClampMode",
              "default": "3",
              "vercond": "(User Version 2 <= 34)"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderNoLightingProperty",
          "abstract": "0",
          "inherit": "BSShaderLightingProperty"
        },
        "add": [
          {
            "_": "The texture glow map.",
            "$": {
              "name": "File Name",
              "type": "SizedString"
            }
          },
          {
            "_": "At this cosine of angle falloff will be equal to Falloff Start Opacity",
            "$": {
              "name": "Falloff Start Angle",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 26)"
            }
          },
          {
            "_": "At this cosine of angle falloff will be equal to Falloff Stop Opacity",
            "$": {
              "name": "Falloff Stop Angle",
              "type": "float",
              "default": "0.0",
              "vercond": "(User Version 2 > 26)"
            }
          },
          {
            "_": "Alpha falloff multiplier at start angle",
            "$": {
              "name": "Falloff Start Opacity",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 26)"
            }
          },
          {
            "_": "Alpha falloff multiplier at end angle",
            "$": {
              "name": "Falloff Stop Opacity",
              "type": "float",
              "default": "0.0",
              "vercond": "(User Version 2 > 26)"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSShaderPPLightingProperty",
          "abstract": "0",
          "inherit": "BSShaderLightingProperty"
        },
        "add": [
          {
            "_": "Texture Set",
            "$": {
              "name": "Texture Set",
              "type": "Ref",
              "template": "BSShaderTextureSet"
            }
          },
          {
            "_": "The amount of distortion. **Not based on physically accurate refractive index** (0=none) (0-1)",
            "$": {
              "name": "Refraction Strength",
              "type": "float",
              "default": "0.0",
              "vercond": "(User Version 2 > 14)"
            }
          },
          {
            "_": "Rate of texture movement for refraction shader.",
            "$": {
              "name": "Refraction Fire Period",
              "type": "int",
              "default": "0",
              "vercond": "(User Version 2 > 14)"
            }
          },
          {
            "_": "The number of passes the parallax shader can apply.",
            "$": {
              "name": "Parallax Max Passes",
              "type": "float",
              "default": "4.0",
              "vercond": "(User Version 2 > 24)"
            }
          },
          {
            "_": "The strength of the parallax.",
            "$": {
              "name": "Parallax Scale",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 > 24)"
            }
          },
          {
            "_": "Glow color and alpha",
            "$": {
              "name": "Emissive Color",
              "type": "Color4",
              "vercond": "(User Version 2 > 34)"
            }
          }
        ]
      },
      {
        "_": "\n        This controller is used to animate float variables in BSEffectShaderProperty.\n        \n    ",
        "$": {
          "name": "BSEffectShaderPropertyFloatController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        },
        "add": [
          {
            "_": "Which float variable in BSEffectShaderProperty to animate:",
            "$": {
              "name": "Type of Controlled Variable",
              "type": "EffectShaderControlledVariable"
            }
          }
        ]
      },
      {
        "_": "\n\t\tThis controller is used to animate colors in BSEffectShaderProperty.\n\t\t\n\t",
        "$": {
          "name": "BSEffectShaderPropertyColorController",
          "inherit": "NiPoint3InterpController"
        },
        "add": [
          {
            "_": "Which color in BSEffectShaderProperty to animate:",
            "$": {
              "name": "Type of Controlled Color",
              "type": "EffectShaderControlledColor"
            }
          }
        ]
      },
      {
        "_": "\n\t\tThis controller is used to animate float variables in BSLightingShaderProperty.\n\t\t\n\t",
        "$": {
          "name": "BSLightingShaderPropertyFloatController",
          "abstract": "0",
          "inherit": "NiFloatInterpController"
        },
        "add": [
          {
            "_": "Which float variable in BSLightingShaderProperty to animate:",
            "$": {
              "name": "Type of Controlled Variable",
              "type": "LightingShaderControlledVariable"
            }
          }
        ]
      },
      {
        "_": "\n\t\tThis controller is used to animate colors in BSLightingShaderProperty.\n\t\t\n\t",
        "$": {
          "name": "BSLightingShaderPropertyColorController",
          "abstract": "0",
          "inherit": "NiPoint3InterpController"
        },
        "add": [
          {
            "_": "Which color in BSLightingShaderProperty to animate:",
            "$": {
              "name": "Type of Controlled Color",
              "type": "LightingShaderControlledColor"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSNiAlphaPropertyTestRefController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n    Skyrim, Paired with dummy TriShapes, this controller generates lightning shapes for special effects.\n    First interpolator controls Generation.\n        \n\t\t\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\t",
        "$": {
          "name": "BSProceduralLightningController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "References generation interpolator.",
            "$": {
              "name": "Interpolator 1: Generation",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References interpolator for Mutation of strips",
            "$": {
              "name": "Interpolator 2: Mutation",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References subdivision interpolator.",
            "$": {
              "name": "Interpolator 3: Subdivision",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References branches interpolator.",
            "$": {
              "name": "Interpolator 4: Num Branches",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References branches variation interpolator.",
            "$": {
              "name": "Interpolator 5: Num Branches Var",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References length interpolator.",
            "$": {
              "name": "Interpolator 6: Length",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References length variation interpolator.",
            "$": {
              "name": "Interpolator 7: Length Var",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References width interpolator.",
            "$": {
              "name": "Interpolator 8: Width",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "_": "References interpolator for amplitude control. 0=straight, 50=wide",
            "$": {
              "name": "Interpolator 9: Arc Offset",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          },
          {
            "$": {
              "name": "Subdivisions",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Branches",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Branches Variation",
              "type": "ushort"
            }
          },
          {
            "_": "How far lightning will stretch to.",
            "$": {
              "name": "Length",
              "type": "float"
            }
          },
          {
            "_": "How far lightning variation will stretch to.",
            "$": {
              "name": "Length Variation",
              "type": "float"
            }
          },
          {
            "_": "How wide the bolt will be.",
            "$": {
              "name": "Width",
              "type": "float"
            }
          },
          {
            "_": "Influences forking behavior with a multiplier.",
            "$": {
              "name": "Child Width Mult",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Arc Offset",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Fade Main Bolt",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Fade Child Bolts",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Animate Arc Offset",
              "type": "bool"
            }
          },
          {
            "_": "Reference to a shader property.",
            "$": {
              "name": "Shader Property",
              "type": "Ref",
              "template": "BSShaderProperty"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific Texture Set.\n        \n        \n    ",
        "$": {
          "name": "BSShaderTextureSet",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Textures",
              "type": "int",
              "default": "6"
            }
          },
          {
            "_": "Textures.\n            0: Diffuse\n            1: Normal/Gloss\n            2: Glow(SLSF2_Glow_Map)/Skin/Hair/Rim light(SLSF2_Rim_Lighting)\n            3: Height/Parallax\n            4: Environment\n            5: Environment Mask\n            6: Subsurface for Multilayer Parallax\n            7: Back Lighting Map (SLSF2_Back_Lighting)\n        ",
            "$": {
              "name": "Textures",
              "type": "SizedString",
              "arr1": "Num Textures"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property. Found in Fallout3\n    ",
        "$": {
          "name": "WaterShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        }
      },
      {
        "_": "\n        Bethesda-specific property. Found in Fallout3\n        \n        \n    ",
        "$": {
          "name": "SkyShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderLightingProperty"
        },
        "add": [
          {
            "_": "The texture.",
            "$": {
              "name": "File Name",
              "type": "SizedString"
            }
          },
          {
            "_": "Sky Object Type",
            "$": {
              "name": "Sky Object Type",
              "type": "SkyObjectType"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n    ",
        "$": {
          "name": "TileShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderLightingProperty"
        },
        "add": [
          {
            "_": "Texture file name",
            "$": {
              "name": "File Name",
              "type": "SizedString"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n    ",
        "$": {
          "name": "DistantLODShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        }
      },
      {
        "_": "\n        Bethesda-specific property.\n    ",
        "$": {
          "name": "BSDistantTreeShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        }
      },
      {
        "_": "\n        Bethesda-specific property.\n        \n    ",
        "$": {
          "name": "TallGrassShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "_": "Texture file name",
            "$": {
              "name": "File Name",
              "type": "SizedString"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific property.\n    ",
        "$": {
          "name": "VolumetricFogShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        }
      },
      {
        "_": "\n        Bethesda-specific property.\n    ",
        "$": {
          "name": "HairShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        }
      },
      {
        "_": "\n        Bethesda-specific property.\n    ",
        "$": {
          "name": "Lighting30ShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderPPLightingProperty"
        }
      },
      {
        "_": "\n        Bethesda shader property for Skyrim and later.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSLightingShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "_": "Skyrim Shader Flags for setting render/shader options.",
            "$": {
              "name": "Shader Flags 1",
              "suffix": "SK",
              "type": "SkyrimShaderPropertyFlags1",
              "vercond": "(User Version 2 != 130)",
              "default": "2185233153"
            }
          },
          {
            "_": "Skyrim Shader Flags for setting render/shader options.",
            "$": {
              "name": "Shader Flags 2",
              "suffix": "SK",
              "type": "SkyrimShaderPropertyFlags2",
              "vercond": "(User Version 2 != 130)",
              "default": "32801"
            }
          },
          {
            "_": "Fallout 4 Shader Flags. Mostly overridden if \"Name\" is a path to a BGSM/BGEM file.",
            "$": {
              "name": "Shader Flags 1",
              "suffix": "FO4",
              "type": "Fallout4ShaderPropertyFlags1",
              "vercond": "(User Version 2 == 130)",
              "default": "2151678465"
            }
          },
          {
            "_": "Fallout 4 Shader Flags. Mostly overridden if \"Name\" is a path to a BGSM/BGEM file.",
            "$": {
              "name": "Shader Flags 2",
              "suffix": "FO4",
              "type": "Fallout4ShaderPropertyFlags2",
              "vercond": "(User Version 2 == 130)",
              "default": "1"
            }
          },
          {
            "_": "Offset UVs",
            "$": {
              "name": "UV Offset",
              "type": "TexCoord"
            }
          },
          {
            "_": "Offset UV Scale to repeat tiling textures, see above.",
            "$": {
              "name": "UV Scale",
              "type": "TexCoord",
              "default": "1.0, 1.0"
            }
          },
          {
            "_": "Texture Set, can have override in an esm/esp",
            "$": {
              "name": "Texture Set",
              "type": "Ref",
              "template": "BSShaderTextureSet"
            }
          },
          {
            "_": "Glow color and alpha",
            "$": {
              "name": "Emissive Color",
              "type": "Color3",
              "default": "0.0, 0.0, 0.0"
            }
          },
          {
            "_": "Multiplied emissive colors",
            "$": {
              "name": "Emissive Multiple",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Wet Material",
              "type": "string",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "How to handle texture borders.",
            "$": {
              "name": "Texture Clamp Mode",
              "type": "TexClampMode",
              "default": "3"
            }
          },
          {
            "_": "The material opacity (1=non-transparent).",
            "$": {
              "name": "Alpha",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The amount of distortion. **Not based on physically accurate refractive index** (0=none) (0-1)",
            "$": {
              "name": "Refraction Strength",
              "type": "float"
            }
          },
          {
            "_": "The material specular power, or glossiness (0-999).",
            "$": {
              "name": "Glossiness",
              "type": "float",
              "default": "80",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "_": "The base roughness (0.0-1.0), multiplied by the smoothness map.",
            "$": {
              "name": "Smoothness",
              "type": "float",
              "default": "1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "Adds a colored highlight.",
            "$": {
              "name": "Specular Color",
              "type": "Color3"
            }
          },
          {
            "_": "Brightness of specular highlight. (0=not visible) (0-999)",
            "$": {
              "name": "Specular Strength",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Controls strength for envmap/backlight/rim/softlight lighting effect?",
            "$": {
              "name": "Lighting Effect 1",
              "type": "float",
              "default": "0.3",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "_": "Controls strength for envmap/backlight/rim/softlight lighting effect?",
            "$": {
              "name": "Lighting Effect 2",
              "type": "float",
              "default": "2.0",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "$": {
              "name": "Subsurface Rolloff",
              "type": "float",
              "default": "0.3",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Rimlight Power",
              "type": "float",
              "default": "3.402823466e+38",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Backlight Power",
              "type": "float",
              "cond": "Rimlight Power == 0x7F7FFFFF",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Grayscale to Palette Scale",
              "type": "float",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Fresnel Power",
              "type": "float",
              "default": "5.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Spec Scale",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Spec Power",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Min Var",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Env Map Scale",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Fresnel Power",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Wetness Metalness",
              "type": "float",
              "default": "-1.0",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "Scales the intensity of the environment/cube map. (0-1)",
            "$": {
              "name": "Environment Map Scale",
              "type": "float",
              "default": "1.0",
              "cond": "Skyrim Shader Type == 1"
            }
          },
          {
            "$": {
              "name": "Unknown Env Map Short",
              "type": "ushort",
              "cond": "Skyrim Shader Type == 1",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "Tints the base texture. Overridden by game settings.",
            "$": {
              "name": "Skin Tint Color",
              "type": "Color3",
              "cond": "Skyrim Shader Type == 5"
            }
          },
          {
            "$": {
              "name": "Unknown Skin Tint Int",
              "type": "uint",
              "cond": "Skyrim Shader Type == 5",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "Tints the base texture. Overridden by game settings.",
            "$": {
              "name": "Hair Tint Color",
              "type": "Color3",
              "cond": "Skyrim Shader Type == 6"
            }
          },
          {
            "_": "Max Passes",
            "$": {
              "name": "Max Passes",
              "type": "float",
              "cond": "Skyrim Shader Type == 7"
            }
          },
          {
            "_": "Scale",
            "$": {
              "name": "Scale",
              "type": "float",
              "cond": "Skyrim Shader Type == 7"
            }
          },
          {
            "_": "How far from the surface the inner layer appears to be.",
            "$": {
              "name": "Parallax Inner Layer Thickness",
              "type": "float",
              "cond": "Skyrim Shader Type == 11"
            }
          },
          {
            "_": "Depth of inner parallax layer effect.",
            "$": {
              "name": "Parallax Refraction Scale",
              "type": "float",
              "cond": "Skyrim Shader Type == 11"
            }
          },
          {
            "_": "Scales the inner parallax layer texture.",
            "$": {
              "name": "Parallax Inner Layer Texture Scale",
              "type": "TexCoord",
              "cond": "Skyrim Shader Type == 11"
            }
          },
          {
            "_": "How strong the environment/cube map is. (0-??)",
            "$": {
              "name": "Parallax Envmap Strength",
              "type": "float",
              "cond": "Skyrim Shader Type == 11"
            }
          },
          {
            "_": "CK lists \"snow material\" when used.",
            "$": {
              "name": "Sparkle Parameters",
              "type": "Vector4",
              "cond": "Skyrim Shader Type == 14"
            }
          },
          {
            "_": "Eye cubemap scale",
            "$": {
              "name": "Eye Cubemap Scale",
              "type": "float",
              "cond": "Skyrim Shader Type == 16"
            }
          },
          {
            "_": "Offset to set center for left eye cubemap",
            "$": {
              "name": "Left Eye Reflection Center",
              "type": "Vector3",
              "cond": "Skyrim Shader Type == 16"
            }
          },
          {
            "_": "Offset to set center for right eye cubemap",
            "$": {
              "name": "Right Eye Reflection Center",
              "type": "Vector3",
              "cond": "Skyrim Shader Type == 16"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda effect shader property for Skyrim and later.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSEffectShaderProperty",
          "abstract": "0",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "$": {
              "name": "Shader Flags 1",
              "suffix": "SK",
              "type": "SkyrimShaderPropertyFlags1",
              "default": "2147483648",
              "vercond": "(User Version 2 != 130)"
            }
          },
          {
            "$": {
              "name": "Shader Flags 2",
              "suffix": "SK",
              "type": "SkyrimShaderPropertyFlags2",
              "default": "32",
              "vercond": "(User Version 2 != 130)"
            }
          },
          {
            "$": {
              "name": "Shader Flags 1",
              "suffix": "FO4",
              "type": "Fallout4ShaderPropertyFlags1",
              "default": "2147483648",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Shader Flags 2",
              "suffix": "FO4",
              "type": "Fallout4ShaderPropertyFlags2",
              "default": "32",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "_": "Offset UVs",
            "$": {
              "name": "UV Offset",
              "type": "TexCoord"
            }
          },
          {
            "_": "Offset UV Scale to repeat tiling textures",
            "$": {
              "name": "UV Scale",
              "type": "TexCoord",
              "default": "1.0, 1.0"
            }
          },
          {
            "_": "points to an external texture.",
            "$": {
              "name": "Source Texture",
              "type": "SizedString"
            }
          },
          {
            "_": "How to handle texture borders.",
            "$": {
              "name": "Texture Clamp Mode",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Lighting Influence",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Env Map Min LOD",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Unknown Byte",
              "type": "byte"
            }
          },
          {
            "_": "At this cosine of angle falloff will be equal to Falloff Start Opacity",
            "$": {
              "name": "Falloff Start Angle",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "At this cosine of angle falloff will be equal to Falloff Stop Opacity",
            "$": {
              "name": "Falloff Stop Angle",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "Alpha falloff multiplier at start angle",
            "$": {
              "name": "Falloff Start Opacity",
              "type": "float"
            }
          },
          {
            "_": "Alpha falloff multiplier at end angle",
            "$": {
              "name": "Falloff Stop Opacity",
              "type": "float"
            }
          },
          {
            "_": "Emissive color",
            "$": {
              "name": "Emissive Color",
              "type": "Color4"
            }
          },
          {
            "_": "Multiplier for Emissive Color (RGB part)",
            "$": {
              "name": "Emissive Multiple",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Soft Falloff Depth",
              "type": "float"
            }
          },
          {
            "_": "Points to an external texture, used as palette for SLSF1_Greyscale_To_PaletteColor/SLSF1_Greyscale_To_PaletteAlpha.",
            "$": {
              "name": "Greyscale Texture",
              "type": "SizedString"
            }
          },
          {
            "$": {
              "name": "Env Map Texture",
              "type": "SizedString",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Normal Texture",
              "type": "SizedString",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Env Mask Texture",
              "type": "SizedString",
              "vercond": "(User Version 2 == 130)"
            }
          },
          {
            "$": {
              "name": "Environment Map Scale",
              "type": "float",
              "vercond": "(User Version 2 == 130)"
            }
          }
        ]
      },
      {
        "_": "\n        Skyrim water shader property, different from \"WaterShaderProperty\" seen in Fallout.\n        \n        \n        \n        \n        \n        \n          \n    ",
        "$": {
          "name": "BSWaterShaderProperty",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "$": {
              "name": "Shader Flags 1",
              "type": "SkyrimShaderPropertyFlags1"
            }
          },
          {
            "$": {
              "name": "Shader Flags 2",
              "type": "SkyrimShaderPropertyFlags2"
            }
          },
          {
            "_": "Offset UVs. Seems to be unused, but it fits with the other Skyrim shader properties.",
            "$": {
              "name": "UV Offset",
              "type": "TexCoord"
            }
          },
          {
            "_": "Offset UV Scale to repeat tiling textures, see above.",
            "$": {
              "name": "UV Scale",
              "type": "TexCoord",
              "default": "1.0, 1.0"
            }
          },
          {
            "_": "Defines attributes for the water shader (will use SkyrimWaterShaderFlags)",
            "$": {
              "name": "Water Shader Flags",
              "type": "SkyrimWaterShaderFlags"
            }
          },
          {
            "_": "A bitflag, only the first/second bit controls water flow positive or negative along UVs.",
            "$": {
              "name": "Water Direction",
              "type": "byte",
              "default": "3"
            }
          },
          {
            "_": "Unknown, flag?",
            "$": {
              "name": "Unknown Short 3",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Skyrim Sky shader block.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSSkyShaderProperty",
          "inherit": "BSShaderProperty"
        },
        "add": [
          {
            "$": {
              "name": "Shader Flags 1",
              "type": "SkyrimShaderPropertyFlags1"
            }
          },
          {
            "$": {
              "name": "Shader Flags 2",
              "type": "SkyrimShaderPropertyFlags2"
            }
          },
          {
            "_": "Offset UVs. Seems to be unused, but it fits with the other Skyrim shader properties.",
            "$": {
              "name": "UV Offset",
              "type": "TexCoord"
            }
          },
          {
            "_": "Offset UV Scale to repeat tiling textures, see above.",
            "$": {
              "name": "UV Scale",
              "type": "TexCoord",
              "default": "1.0, 1.0"
            }
          },
          {
            "_": "points to an external texture.",
            "$": {
              "name": "Source Texture",
              "type": "SizedString"
            }
          },
          {
            "$": {
              "name": "Sky Object Type",
              "type": "SkyObjectType"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific skin instance.\n        \n        \n    ",
        "$": {
          "name": "BSDismemberSkinInstance",
          "abstract": "0",
          "inherit": "NiSkinInstance"
        },
        "add": [
          {
            "$": {
              "name": "Num Partitions",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Partitions",
              "type": "BodyPartList",
              "arr1": "Num Partitions"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific extra data. Lists locations and normals on a mesh that are appropriate for decal placement.\n        \n        \n    ",
        "$": {
          "name": "BSDecalPlacementVectorExtraData",
          "inherit": "NiFloatExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Vector Blocks",
              "type": "short"
            }
          },
          {
            "$": {
              "name": "Vector Blocks",
              "type": "DecalVectorArray",
              "arr1": "Num Vector Blocks"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific particle modifier.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSPSysSimpleColorModifier",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Fade In Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Fade out Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Color 1 End Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Color 1 Start Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Color 2 End Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Color 2 Start Percent",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Colors",
              "type": "Color4",
              "arr1": "3"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific node. Found on fxFire effects\n        \n        \n    ",
        "$": {
          "name": "BSValueNode",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Value Node Flags",
              "type": "BSValueNodeFlags"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific (mesh?) Particle System.\n    ",
        "$": {
          "name": "BSStripParticleSystem",
          "inherit": "NiParticleSystem"
        }
      },
      {
        "_": "\n        Bethesda-Specific (mesh?) Particle System Data.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSStripPSysData",
          "inherit": "NiPSysData"
        },
        "add": [
          {
            "$": {
              "name": "Max Point Count",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Start Cap Size",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "End Cap Size",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Do Z Prepass",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific (mesh?) Particle System Modifier.\n        \n    ",
        "$": {
          "name": "BSPSysStripUpdateModifier",
          "inherit": "NiPSysModifier"
        },
        "add": [
          {
            "$": {
              "name": "Update Delta Time",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific time controller.\n    ",
        "$": {
          "name": "BSMaterialEmittanceMultController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n        Bethesda-Specific particle system.\n        \n        \n        \n\n    ",
        "$": {
          "name": "BSMasterParticleSystem",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Max Emitter Objects",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Particle Systems",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Particle Systems",
              "type": "Ref",
              "template": "NiAVObject",
              "arr1": "Num Particle Systems"
            }
          }
        ]
      },
      {
        "_": "\n        Particle system (multi?) emitter controller.\n        \n        \n    ",
        "$": {
          "name": "BSPSysMultiTargetEmitterCtlr",
          "inherit": "NiPSysEmitterCtlr"
        },
        "add": [
          {
            "$": {
              "name": "Max Emitters",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Master Particle System",
              "type": "Ptr",
              "template": "BSMasterParticleSystem"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific time controller.\n    ",
        "$": {
          "name": "BSRefractionStrengthController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n        Bethesda-Specific node.\n        \n        \n    ",
        "$": {
          "name": "BSOrderedNode",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Alpha Sort Bound",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Static Bound",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific node.\n        \n        \n        \n    ",
        "$": {
          "name": "BSRangeNode",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Min",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Max",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Current",
              "type": "byte"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific node.\n    ",
        "$": {
          "name": "BSBlastNode",
          "inherit": "BSRangeNode"
        }
      },
      {
        "_": "\n        Bethesda-Specific node.\n    ",
        "$": {
          "name": "BSDamageStage",
          "inherit": "BSBlastNode"
        }
      },
      {
        "_": "\n        Bethesda-specific time controller.\n        \n    ",
        "$": {
          "name": "BSRefractionFirePeriodController",
          "abstract": "0",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "$": {
              "name": "Interpolator",
              "type": "Ref",
              "template": "NiInterpolator",
              "ver1": "20.2.0.7"
            }
          }
        ]
      },
      {
        "_": "\n        A havok shape.\n        A list of convex shapes.\n\n        Do not put a bhkPackedNiTriStripsShape in the Sub Shapes. Use a\n        separate collision nodes without a list shape for those.\n\n        Also, shapes collected in a bhkListShape may not have the correct\n        walking noise, so only use it for non-walkable objects.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkConvexListShape",
          "abstract": "0",
          "inherit": "bhkShape"
        },
        "add": [
          {
            "$": {
              "name": "Num Sub Shapes",
              "type": "uint"
            }
          },
          {
            "_": "List of shapes.",
            "$": {
              "name": "Sub Shapes",
              "type": "Ref",
              "template": "bhkConvexShape",
              "arr1": "Num Sub Shapes"
            }
          },
          {
            "_": "The material of the shape.",
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unknown Int 1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Child Shape Property",
              "type": "hkWorldObjCinfoProperty"
            }
          },
          {
            "$": {
              "name": "Unknown Byte 1",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific interpolator.\n        \n        \n        \n    ",
        "$": {
          "name": "BSTreadTransfInterpolator",
          "abstract": "0",
          "inherit": "NiInterpolator"
        },
        "add": [
          {
            "$": {
              "name": "Num Tread Transforms",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Tread Transforms",
              "type": "BSTreadTransform",
              "arr1": "Num Tread Transforms"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific object.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSAnimNote",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Type of this note.",
            "$": {
              "name": "Type",
              "type": "AnimNoteType"
            }
          },
          {
            "_": "Location in time.",
            "$": {
              "name": "Time",
              "type": "float"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Arm",
              "type": "uint",
              "cond": "Type == 1"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Gain",
              "type": "float",
              "cond": "Type == 2"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "State",
              "type": "uint",
              "cond": "Type == 2"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific object.\n        \n        \n    ",
        "$": {
          "name": "BSAnimNotes",
          "abstract": "0",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Number of BSAnimNote objects.",
            "$": {
              "name": "Num Anim Notes",
              "type": "ushort"
            }
          },
          {
            "_": "BSAnimNote objects.",
            "$": {
              "name": "Anim Notes",
              "type": "Ref",
              "template": "BSAnimNote",
              "arr1": "Num Anim Notes"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific Havok serializable.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkLiquidAction",
          "inherit": "bhkSerializable"
        },
        "add": [
          {
            "$": {
              "name": "User Data",
              "type": "uint"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 2",
              "type": "int"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Unknown Int 3",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Initial Stick Force",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Stick Strength",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Neighbor Distance",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Neighbor Strength",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific node.\n        \n\t\t\n    ",
        "$": {
          "name": "BSMultiBoundNode",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Multi Bound",
              "type": "Ref",
              "template": "BSMultiBound"
            }
          },
          {
            "$": {
              "name": "Culling Mode",
              "type": "BSCPCullingType",
              "vercond": "(User Version 2 >= 83)"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific object.\n        \n    ",
        "$": {
          "name": "BSMultiBound",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "BSMultiBoundData"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base type for bounding data.\n    ",
        "$": {
          "name": "BSMultiBoundData",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Oriented bounding box.\n        \n        \n        \n    ",
        "$": {
          "name": "BSMultiBoundOBB",
          "inherit": "BSMultiBoundData"
        },
        "add": [
          {
            "_": "Center of the box.",
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "_": "Size of the box along each axis.",
            "$": {
              "name": "Size",
              "type": "Vector3"
            }
          },
          {
            "_": "Rotation of the bounding box.",
            "$": {
              "name": "Rotation",
              "type": "Matrix33"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific object.\n        \n        \n    ",
        "$": {
          "name": "BSMultiBoundSphere",
          "inherit": "BSMultiBoundData"
        },
        "add": [
          {
            "$": {
              "name": "Center",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific AV object.\n        \n        \n    ",
        "$": {
          "name": "BSSegmentedTriShape",
          "inherit": "NiTriShape"
        },
        "add": [
          {
            "_": "Number of segments in the square grid",
            "$": {
              "name": "Num Segments",
              "type": "int"
            }
          },
          {
            "_": "Configuration of each segment",
            "$": {
              "name": "Segment",
              "type": "BSGeometrySegmentData",
              "arr1": "Num Segments"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific object.\n        \n        \n    ",
        "$": {
          "name": "BSMultiBoundAABB",
          "inherit": "BSMultiBoundData"
        },
        "add": [
          {
            "_": "Position of the AABB's center",
            "$": {
              "name": "Position",
              "type": "Vector3"
            }
          },
          {
            "_": "Extent of the AABB in all directions",
            "$": {
              "name": "Extent",
              "type": "Vector3"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiAdditionalGeometryData",
          "inherit": "AbstractAdditionalGeometryData"
        },
        "add": [
          {
            "_": "Number of vertices",
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "Information about additional data blocks",
            "$": {
              "name": "Num Block Infos",
              "type": "uint"
            }
          },
          {
            "_": "Number of additional data blocks",
            "$": {
              "name": "Block Infos",
              "type": "AdditionalDataInfo",
              "arr1": "Num Block Infos"
            }
          },
          {
            "_": "Number of additional data blocks",
            "$": {
              "name": "Num Blocks",
              "type": "int"
            }
          },
          {
            "_": "Number of additional data blocks",
            "$": {
              "name": "Blocks",
              "type": "AdditionalDataBlock",
              "arr1": "Num Blocks"
            }
          }
        ]
      },
      {
        "$": {
          "name": "BSPackedAdditionalGeometryData",
          "inherit": "AbstractAdditionalGeometryData"
        },
        "add": [
          {
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "_": "Information about additional data blocks",
            "$": {
              "name": "Num Block Infos",
              "type": "uint"
            }
          },
          {
            "_": "Number of additional data blocks",
            "$": {
              "name": "Block Infos",
              "type": "AdditionalDataInfo",
              "arr1": "Num Block Infos"
            }
          },
          {
            "_": "Number of additional data blocks. Usually there is exactly one block.",
            "$": {
              "name": "Num Blocks",
              "type": "int"
            }
          },
          {
            "_": "Number of additional data blocks",
            "$": {
              "name": "Blocks",
              "type": "BSPackedAdditionalDataBlock",
              "arr1": "Num Blocks"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific extra data.\n        \n        \n    ",
        "$": {
          "name": "BSWArray",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Items",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Items",
              "type": "int",
              "arr1": "Num Items"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific Havok serializable.\n        \n        \n        \n    ",
        "$": {
          "name": "bhkAabbPhantom",
          "inherit": "bhkShapePhantom"
        },
        "add": [
          {
            "$": {
              "name": "Unused",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "$": {
              "name": "AABB Min",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "AABB Max",
              "type": "Vector4"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-specific time controller.\n    ",
        "$": {
          "name": "BSFrustumFOVController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "_": "\n        Bethesda-Specific node.\n    ",
        "$": {
          "name": "BSDebrisNode",
          "inherit": "BSRangeNode"
        }
      },
      {
        "_": "\n        A breakable constraint.\n        \n        \n        \n    ",
        "$": {
          "name": "bhkBreakableConstraint",
          "abstract": "0",
          "inherit": "bhkConstraint"
        },
        "add": [
          {
            "_": "Constraint within constraint.",
            "$": {
              "name": "Constraint Data",
              "type": "ConstraintData"
            }
          },
          {
            "_": "Amount of force to break the rigid bodies apart?",
            "$": {
              "name": "Threshold",
              "type": "float"
            }
          },
          {
            "_": "No: Constraint stays active. Yes: Constraint gets removed when breaking threshold is exceeded.",
            "$": {
              "name": "Remove When Broken",
              "type": "bool",
              "default": "0"
            }
          }
        ]
      },
      {
        "_": "\n        Bethesda-Specific Havok serializable.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkOrientHingedBodyAction",
          "abstract": "0",
          "inherit": "bhkSerializable"
        },
        "add": [
          {
            "$": {
              "name": "Body",
              "type": "Ptr",
              "template": "bhkRigidBody"
            }
          },
          {
            "$": {
              "name": "Unknown Int 1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unknown Int 2",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unused 1",
              "type": "byte",
              "arr1": "8"
            }
          },
          {
            "$": {
              "name": "Hinge Axis LS",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Forward LS",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Strength",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Damping",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unused 2",
              "type": "byte",
              "arr1": "8"
            }
          }
        ]
      },
      {
        "_": "\n        Found in Fallout 3 .psa files, extra ragdoll info for NPCs/creatures. (usually idleanims\\deathposes.psa)\n        Defines different kill poses. The game selects the pose randomly and applies it to a skeleton immediately upon ragdolling.\n        Poses can be previewed in GECK Object Window-Actor Data-Ragdoll and selecting Pose Matching tab.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkPoseArray",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Bones",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Bones",
              "type": "string",
              "arr1": "Num Bones"
            }
          },
          {
            "$": {
              "name": "Num Poses",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Poses",
              "type": "BonePose",
              "arr1": "Num Poses"
            }
          }
        ]
      },
      {
        "_": "\n        Found in Fallout 3, more ragdoll info?  (meshes\\ragdollconstraint\\*.rdt)\n        \n        \n    ",
        "$": {
          "name": "bhkRagdollTemplate",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Bones",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Bones",
              "type": "Ref",
              "template": "NiObject",
              "arr1": "Num Bones"
            }
          }
        ]
      },
      {
        "_": "\n        Data for bhkRagdollTemplate\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkRagdollTemplateData",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Mass",
              "type": "float",
              "default": "9.0"
            }
          },
          {
            "$": {
              "name": "Restitution",
              "type": "float",
              "default": "0.8"
            }
          },
          {
            "$": {
              "name": "Friction",
              "type": "float",
              "default": "0.3"
            }
          },
          {
            "$": {
              "name": "Radius",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "$": {
              "name": "Material",
              "type": "HavokMaterial"
            }
          },
          {
            "$": {
              "name": "Num Constraints",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Constraint",
              "type": "ConstraintData",
              "arr1": "Num Constraints"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiDataStream",
          "inherit": "NiObject",
          "abstract": "0"
        },
        "add": [
          {
            "$": {
              "name": "Usage",
              "type": "DataStreamUsage",
              "abstract": "1"
            }
          },
          {
            "$": {
              "name": "Access",
              "type": "DataStreamAccess",
              "abstract": "1"
            }
          },
          {
            "_": "The size in bytes of this data stream.",
            "$": {
              "name": "Num Bytes",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Cloning Behavior",
              "type": "CloningBehavior",
              "default": "CLONING_SHARE"
            }
          },
          {
            "_": "Number of regions (such as submeshes).",
            "$": {
              "name": "Num Regions",
              "type": "uint"
            }
          },
          {
            "_": "The regions in the mesh. Regions can be used to mark off submeshes which are independent draw calls.",
            "$": {
              "name": "Regions",
              "type": "Region",
              "arr1": "Num Regions"
            }
          },
          {
            "_": "Number of components of the data (matches corresponding field in MeshData).",
            "$": {
              "name": "Num Components",
              "type": "uint"
            }
          },
          {
            "_": "The format of each component in this data stream.",
            "$": {
              "name": "Component Formats",
              "type": "ComponentFormat",
              "arr1": "Num Components"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "byte",
              "binary": "1",
              "arr1": "Num Bytes"
            }
          },
          {
            "$": {
              "name": "Streamable",
              "type": "bool",
              "default": "1"
            }
          }
        ]
      },
      {
        "_": "\n        An object that can be rendered.\n        \n    ",
        "$": {
          "name": "NiRenderObject",
          "abstract": "1",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "Per-material data.",
            "$": {
              "name": "Material Data",
              "type": "MaterialData"
            }
          }
        ]
      },
      {
        "_": "\n        Base class for mesh modifiers.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMeshModifier",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Submit Points",
              "type": "uint"
            }
          },
          {
            "_": "The sync points supported by this mesh modifier for SubmitTasks.",
            "$": {
              "name": "Submit Points",
              "type": "SyncPoint",
              "arr1": "Num Submit Points"
            }
          },
          {
            "$": {
              "name": "Num Complete Points",
              "type": "uint"
            }
          },
          {
            "_": "The sync points supported by this mesh modifier for CompleteTasks.",
            "$": {
              "name": "Complete Points",
              "type": "SyncPoint",
              "arr1": "Num Complete Points"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiMesh",
          "inherit": "NiRenderObject"
        },
        "add": [
          {
            "_": "The primitive type of the mesh, such as triangles or lines.",
            "$": {
              "name": "Primitive Type",
              "type": "MeshPrimitiveType"
            }
          },
          {
            "$": {
              "name": "Unknown 51",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 52",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 53",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 54",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 55",
              "type": "float",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 56",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "_": "The number of submeshes contained in this mesh.",
            "$": {
              "name": "Num Submeshes",
              "type": "ushort"
            }
          },
          {
            "_": "Sets whether hardware instancing is being used.",
            "$": {
              "name": "Instancing Enabled",
              "type": "bool"
            }
          },
          {
            "_": "The combined bounding volume of all submeshes.",
            "$": {
              "name": "Bound",
              "type": "NiBound"
            }
          },
          {
            "$": {
              "name": "Num Datastreams",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Datastreams",
              "type": "DataStreamRef",
              "arr1": "Num Datastreams"
            }
          },
          {
            "$": {
              "name": "Num Modifiers",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Modifiers",
              "type": "Ref",
              "template": "NiMeshModifier",
              "arr1": "Num Modifiers"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 100",
              "type": "byte",
              "userver": "15"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown 101",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "_": "Size of additional data.",
            "$": {
              "name": "Unknown 102",
              "type": "uint",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 103",
              "type": "float",
              "arr1": "Unknown 102",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 200",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 201",
              "type": "ExtraMeshDataEpicMickey",
              "arr1": "Unknown 200",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 250",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 251",
              "type": "int",
              "arr1": "Unknown 250",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 300",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 301",
              "type": "short",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 302",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 303",
              "type": "byte",
              "arr1": "Unknown 302",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 350",
              "type": "int",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 351",
              "type": "ExtraMeshDataEpicMickey2",
              "arr1": "Unknown 350",
              "userver": "15"
            }
          },
          {
            "$": {
              "name": "Unknown 400",
              "type": "int",
              "userver": "15"
            }
          }
        ]
      },
      {
        "_": "\n        Manipulates a mesh with the semantic MORPHWEIGHTS using an NiMorphMeshModifier.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMorphWeightsController",
          "inherit": "NiInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Count",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Interpolators",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Interpolators",
              "type": "Ref",
              "template": "NiInterpolator",
              "arr1": "Num Interpolators"
            }
          },
          {
            "$": {
              "name": "Num Targets",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Target Names",
              "type": "string",
              "arr1": "Num Targets"
            }
          }
        ]
      },
      {
        "_": "\n        Performs linear-weighted blending between a set of target data streams.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiMorphMeshModifier",
          "inherit": "NiMeshModifier"
        },
        "add": [
          {
            "_": "\n            FLAG_RELATIVETARGETS = 0x01\n            FLAG_UPDATENORMALS   = 0x02\n            FLAG_NEEDSUPDATE     = 0x04\n            FLAG_ALWAYSUPDATE    = 0x08\n            FLAG_NEEDSCOMPLETION = 0x10\n            FLAG_SKINNED         = 0x20\n            FLAG_SWSKINNED       = 0x40\n        ",
            "$": {
              "name": "Flags",
              "type": "byte"
            }
          },
          {
            "_": "The number of morph targets.",
            "$": {
              "name": "Num Targets",
              "type": "ushort"
            }
          },
          {
            "_": "The number of morphing data stream elements.",
            "$": {
              "name": "Num Elements",
              "type": "uint"
            }
          },
          {
            "_": "Semantics and normalization of the morphing data stream elements.",
            "$": {
              "name": "Elements",
              "type": "ElementReference",
              "arr1": "Num Elements"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiSkinningMeshModifier",
          "inherit": "NiMeshModifier"
        },
        "add": [
          {
            "_": "\n            USE_SOFTWARE_SKINNING = 0x0001\n            RECOMPUTE_BOUNDS = 0x0002\n        ",
            "$": {
              "name": "Flags",
              "type": "ushort"
            }
          },
          {
            "_": "The root bone of the skeleton.",
            "$": {
              "name": "Skeleton Root",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "_": "The transform that takes the root bone parent coordinate system into the skin coordinate system.",
            "$": {
              "name": "Skeleton Transform",
              "type": "NiTransform"
            }
          },
          {
            "_": "The number of bones referenced by this mesh modifier.",
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "_": "Pointers to the bone nodes that affect this skin.",
            "$": {
              "name": "Bones",
              "type": "Ptr",
              "template": "NiAVObject",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "The transforms that go from bind-pose space to bone space.",
            "$": {
              "name": "Bone Transforms",
              "type": "NiTransform",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "The bounds of the bones.  Only stored if the RECOMPUTE_BOUNDS bit is set.",
            "$": {
              "name": "Bone Bounds",
              "type": "NiBound",
              "cond": "(Flags & 2)!=0",
              "arr1": "Num Bones"
            }
          }
        ]
      },
      {
        "_": "\n        An instance of a hardware-instanced mesh in a scene graph.\n        \n        \n    ",
        "$": {
          "name": "NiMeshHWInstance",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "_": "The instanced mesh this object represents.",
            "$": {
              "name": "Master Mesh",
              "type": "Ref",
              "template": "NiMesh"
            }
          },
          {
            "$": {
              "name": "Mesh Modifier",
              "type": "Ref",
              "template": "NiInstancingMeshModifier"
            }
          }
        ]
      },
      {
        "_": "\n        Mesh modifier that provides per-frame instancing capabilities in Gamebryo.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiInstancingMeshModifier",
          "inherit": "NiMeshModifier"
        },
        "add": [
          {
            "$": {
              "name": "Has Instance Nodes",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Per Instance Culling",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Has Static Bounds",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Affected Mesh",
              "type": "Ref",
              "template": "NiMesh"
            }
          },
          {
            "$": {
              "name": "Bound",
              "type": "NiBound",
              "cond": "Has Static Bounds"
            }
          },
          {
            "$": {
              "name": "Num Instance Nodes",
              "type": "uint",
              "cond": "Has Instance Nodes"
            }
          },
          {
            "$": {
              "name": "Instance Nodes",
              "type": "Ref",
              "template": "NiMeshHWInstance",
              "arr1": "Num Instance Nodes",
              "cond": "Has Instance Nodes"
            }
          }
        ]
      },
      {
        "_": "\n        Defines the levels of detail for a given character and dictates the character's current LOD.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSkinningLODController",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "$": {
              "name": "Current LOD",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bones",
              "type": "Ref",
              "template": "NiNode",
              "arr1": "Num Bones"
            }
          },
          {
            "$": {
              "name": "Num Skins",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Skins",
              "type": "Ref",
              "template": "NiMesh",
              "arr1": "Num Skins"
            }
          },
          {
            "$": {
              "name": "Num LOD Levels",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LODs",
              "type": "LODInfo",
              "arr1": "Num LOD Levels"
            }
          }
        ]
      },
      {
        "_": "\n        Represents a particle system.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSParticleSystem",
          "inherit": "NiMesh"
        },
        "add": [
          {
            "$": {
              "name": "Simulator",
              "type": "Ref",
              "template": "NiPSSimulator"
            }
          },
          {
            "$": {
              "name": "Generator",
              "type": "Ref",
              "template": "NiPSBoundUpdater"
            }
          },
          {
            "$": {
              "name": "Num Emitters",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Emitters",
              "type": "Ref",
              "template": "NiPSEmitter",
              "arr1": "Num Emitters"
            }
          },
          {
            "$": {
              "name": "Num Spawners",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Spawners",
              "type": "Ref",
              "template": "NiPSSpawner",
              "arr1": "Num Spawners"
            }
          },
          {
            "$": {
              "name": "Death Spawner",
              "type": "Ref",
              "template": "NiPSSpawner"
            }
          },
          {
            "$": {
              "name": "Max Num Particles",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Has Colors",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Has Rotations",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Has Rotation Axes",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Has Animated Textures",
              "type": "bool",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "World Space",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Normal Method",
              "type": "AlignMethod",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Normal Direction",
              "type": "Vector3",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Up Method",
              "type": "AlignMethod",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Up Direction",
              "type": "Vector3",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Living Spawner",
              "type": "Ref",
              "template": "NiPSSpawner",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Num Spawn Rate Keys",
              "type": "byte",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Spawn Rate Keys",
              "type": "PSSpawnRateKey",
              "arr1": "Num Spawn Rate Keys",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Pre-RPI",
              "type": "bool",
              "ver1": "20.6.1.0"
            }
          }
        ]
      },
      {
        "_": "\n        Represents a particle system that uses mesh particles instead of sprite-based particles.\n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSMeshParticleSystem",
          "inherit": "NiPSParticleSystem"
        },
        "add": [
          {
            "$": {
              "name": "Num Generations",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Master Particles",
              "type": "Ref",
              "template": "NiAVObject",
              "arr1": "Num Generations"
            }
          },
          {
            "$": {
              "name": "Pool Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Auto-Fill Pools",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        A mesh modifier that uses particle system data to generate camera-facing quads.\n    ",
        "$": {
          "name": "NiPSFacingQuadGenerator",
          "inherit": "NiMeshModifier"
        }
      },
      {
        "_": "\n        A mesh modifier that uses particle system data to generate aligned quads for each particle.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSAlignedQuadGenerator",
          "inherit": "NiMeshModifier"
        },
        "add": [
          {
            "$": {
              "name": "Scale Amount U",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scale Limit U",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scale Rest U",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scale Amount V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scale Limit V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Scale Rest V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Center U ",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Center V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "UV Scrolling",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Num Frames Across",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Frames Down",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Ping Pong",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Initial Frame",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Initial Frame Variation",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Num Frames",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Frames Variation",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Initial Time",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Final Time",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        The mesh modifier that performs all particle system simulation.\n        \n        \n    ",
        "$": {
          "name": "NiPSSimulator",
          "inherit": "NiMeshModifier"
        },
        "add": [
          {
            "$": {
              "name": "Num Simulation Steps",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Simulation Steps",
              "type": "Ref",
              "template": "NiPSSimulatorStep",
              "arr1": "Num Simulation Steps"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for a single step in the particle system simulation process.  It has no seralized data.\n    ",
        "$": {
          "name": "NiPSSimulatorStep",
          "inherit": "NiObject",
          "abstract": "1"
        }
      },
      {
        "_": "\n        Encapsulates a floodgate kernel that updates particle size, colors, and rotations.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSSimulatorGeneralStep",
          "inherit": "NiPSSimulatorStep"
        },
        "add": [
          {
            "$": {
              "name": "Num Size Keys",
              "type": "byte",
              "ver1": "20.6.1.0"
            }
          },
          {
            "_": "The particle size keys.",
            "$": {
              "name": "Size Keys",
              "type": "Key",
              "template": "float",
              "arg": "1",
              "arr1": "Num Size Keys",
              "ver1": "20.6.1.0"
            }
          },
          {
            "_": "The loop behavior for the size keys.",
            "$": {
              "name": "Size Loop Behavior",
              "type": "PSLoopBehavior",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Num Color Keys",
              "type": "byte"
            }
          },
          {
            "_": "The particle color keys.",
            "$": {
              "name": "Color Keys",
              "type": "Key",
              "template": "ByteColor4",
              "arg": "1",
              "arr1": "Num Color Keys"
            }
          },
          {
            "_": "The loop behavior for the color keys.",
            "$": {
              "name": "Color Loop Behavior",
              "type": "PSLoopBehavior",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Num Rotation Keys",
              "type": "byte",
              "ver1": "20.6.1.0"
            }
          },
          {
            "_": "The particle rotation keys.",
            "$": {
              "name": "Rotation Keys",
              "type": "QuatKey",
              "template": "Quaternion",
              "arg": "1",
              "arr1": "Num Rotation Keys",
              "ver1": "20.6.1.0"
            }
          },
          {
            "_": "The loop behavior for the rotation keys.",
            "$": {
              "name": "Rotation Loop Behavior",
              "type": "PSLoopBehavior",
              "ver1": "20.6.1.0"
            }
          },
          {
            "_": " The the amount of time over which a particle's size is ramped from 0.0 to 1.0 in seconds",
            "$": {
              "name": "Grow Time",
              "type": "float"
            }
          },
          {
            "_": "The the amount of time over which a particle's size is ramped from 1.0 to 0.0 in seconds",
            "$": {
              "name": "Shrink Time",
              "type": "float"
            }
          },
          {
            "_": "Specifies the particle generation to which the grow effect should be applied. This is usually generation 0, so that newly created particles will grow.",
            "$": {
              "name": "Grow Generation",
              "type": "ushort"
            }
          },
          {
            "_": "Specifies the particle generation to which the shrink effect should be applied. This is usually the highest supported generation for the particle system, so that particles will shrink immediately before getting killed.",
            "$": {
              "name": "Shrink Generation",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Encapsulates a floodgate kernel that simulates particle forces.\n        \n        \n    ",
        "$": {
          "name": "NiPSSimulatorForcesStep",
          "inherit": "NiPSSimulatorStep"
        },
        "add": [
          {
            "$": {
              "name": "Num Forces",
              "type": "uint"
            }
          },
          {
            "_": "The forces affecting the particle system.",
            "$": {
              "name": "Forces",
              "type": "Ref",
              "template": "NiPSForce",
              "arr1": "Num Forces"
            }
          }
        ]
      },
      {
        "_": "\n        Encapsulates a floodgate kernel that simulates particle colliders.\n        \n        \n    ",
        "$": {
          "name": "NiPSSimulatorCollidersStep",
          "inherit": "NiPSSimulatorStep"
        },
        "add": [
          {
            "$": {
              "name": "Num Colliders",
              "type": "uint"
            }
          },
          {
            "_": "The colliders affecting the particle system.",
            "$": {
              "name": "Colliders",
              "type": "Ref",
              "template": "NiPSCollider",
              "arr1": "Num Colliders"
            }
          }
        ]
      },
      {
        "_": "\n        Encapsulates a floodgate kernel that updates mesh particle alignment and transforms.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPSSimulatorMeshAlignStep",
          "inherit": "NiPSSimulatorStep"
        },
        "add": [
          {
            "$": {
              "name": "Num Rotation Keys",
              "type": "byte"
            }
          },
          {
            "_": "The particle rotation keys.",
            "$": {
              "name": "Rotation Keys",
              "type": "QuatKey",
              "template": "Quaternion",
              "arg": "1",
              "arr1": "Num Rotation Keys"
            }
          },
          {
            "_": "The loop behavior for the rotation keys.",
            "$": {
              "name": "Rotation Loop Behavior",
              "type": "PSLoopBehavior"
            }
          }
        ]
      },
      {
        "_": "\n        Encapsulates a floodgate kernel that updates particle positions and ages. As indicated by its name, this step should be attached last in the NiPSSimulator mesh modifier.\n    ",
        "$": {
          "name": "NiPSSimulatorFinalStep",
          "inherit": "NiPSSimulatorStep"
        }
      },
      {
        "_": "\n        Updates the bounding volume for an NiPSParticleSystem object.\n        \n    ",
        "$": {
          "name": "NiPSBoundUpdater",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "Number of particle bounds to skip updating every frame. Higher = more updates each frame.",
            "$": {
              "name": "Update Skip",
              "type": "ushort"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle forces.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPSForce",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Type",
              "type": "PSForceType"
            }
          },
          {
            "$": {
              "name": "Active",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        Applies a linear drag force to particles.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSDragForce",
          "inherit": "NiPSForce"
        },
        "add": [
          {
            "$": {
              "name": "Drag Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Percentage",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Range",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Range Falloff",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Drag Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Applies a gravitational force to particles.\n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSGravityForce",
          "inherit": "NiPSForce"
        },
        "add": [
          {
            "$": {
              "name": "Gravity Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Decay",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Strength",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Force Type",
              "type": "ForceType"
            }
          },
          {
            "$": {
              "name": "Turbulence",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Turbulence Scale",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Gravity Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Applies an explosive force to particles.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSBombForce",
          "inherit": "NiPSForce"
        },
        "add": [
          {
            "$": {
              "name": "Bomb Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Decay",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Delta V",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Decay Type",
              "type": "DecayType"
            }
          },
          {
            "$": {
              "name": "Symmetry Type",
              "type": "SymmetryType"
            }
          },
          {
            "$": {
              "name": "Bomb Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle emitters.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSEmitter",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Speed",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Speed Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Speed Flip Ratio",
              "type": "float",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Declination",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Declination Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Planar Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Planar Angle Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Color",
              "type": "ByteColor4",
              "ver2": "20.6.0.0"
            }
          },
          {
            "$": {
              "name": "Size",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Size Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Lifespan",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Lifespan Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Rotation Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Rotation Angle Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Rotation Speed",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Rotation Speed Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Rotation Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Random Rot Speed Sign",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Random Rot Axis",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Unknown",
              "type": "bool",
              "ver1": "30.0.0.0",
              "ver2": "30.0.0.1"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for particle emitters that emit particles from a volume.\n        \n    ",
        "$": {
          "name": "NiPSVolumeEmitter",
          "abstract": "1",
          "inherit": "NiPSEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        A particle emitter that emits particles from a rectangular volume.\n        \n        \n        \n    ",
        "$": {
          "name": "NiPSBoxEmitter",
          "inherit": "NiPSVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Width",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Emitter Height",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Emitter Depth",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A particle emitter that emits particles from a spherical volume.\n        \n    ",
        "$": {
          "name": "NiPSSphereEmitter",
          "inherit": "NiPSVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Radius",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        A particle emitter that emits particles from a cylindrical volume.\n        \n        \n    ",
        "$": {
          "name": "NiPSCylinderEmitter",
          "inherit": "NiPSVolumeEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Radius",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Emitter Height",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n        Emits particles from one or more NiMesh objects. A random mesh emitter is selected for each particle emission.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSMeshEmitter",
          "inherit": "NiPSEmitter"
        },
        "add": [
          {
            "$": {
              "name": "Num Mesh Emitters",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Mesh Emitters",
              "type": "Ptr",
              "template": "NiMesh",
              "arr1": "Num Mesh Emitters"
            }
          },
          {
            "$": {
              "name": "Emit Axis",
              "type": "Vector3",
              "ver2": "20.6.0.0"
            }
          },
          {
            "$": {
              "name": "Emitter Object",
              "type": "Ptr",
              "template": "NiAVObject",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Mesh Emission Type",
              "type": "EmitFrom"
            }
          },
          {
            "$": {
              "name": "Initial Velocity Type",
              "type": "VelocityType"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle emitter time controllers.\n        \n    ",
        "$": {
          "name": "NiPSEmitterCtlr",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Name",
              "type": "string"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for controllers that animate a floating point value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterFloatCtlr",
          "abstract": "1",
          "inherit": "NiPSEmitterCtlr"
        }
      },
      {
        "_": "\n        Animates particle emission and birth rate.\n        \n    ",
        "$": {
          "name": "NiPSEmitParticlesCtlr",
          "inherit": "NiPSEmitterCtlr"
        },
        "add": [
          {
            "$": {
              "name": "Emitter Active Interpolator",
              "type": "Ref",
              "template": "NiInterpolator"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for all particle force time controllers.\n        \n    ",
        "$": {
          "name": "NiPSForceCtlr",
          "abstract": "1",
          "inherit": "NiSingleInterpController"
        },
        "add": [
          {
            "$": {
              "name": "Force Name",
              "type": "string"
            }
          }
        ]
      },
      {
        "_": "\n        Abstract base class for controllers that animate a Boolean value on an NiPSForce object.\n    ",
        "$": {
          "name": "NiPSForceBoolCtlr",
          "abstract": "1",
          "inherit": "NiPSForceCtlr"
        }
      },
      {
        "_": "\n        Abstract base class for controllers that animate a floating point value on an NiPSForce object.\n    ",
        "$": {
          "name": "NiPSForceFloatCtlr",
          "abstract": "1",
          "inherit": "NiPSForceCtlr"
        }
      },
      {
        "_": "\n        Animates whether or not an NiPSForce object is active.\n    ",
        "$": {
          "name": "NiPSForceActiveCtlr",
          "inherit": "NiPSForceBoolCtlr"
        }
      },
      {
        "_": "\n        Animates the strength value of an NiPSGravityForce object.\n    ",
        "$": {
          "name": "NiPSGravityStrengthCtlr",
          "inherit": "NiPSForceFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the speed value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterSpeedCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the size value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterRadiusCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the declination value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterDeclinationCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the declination variation value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterDeclinationVarCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the planar angle value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterPlanarAngleCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the planar angle variation value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterPlanarAngleVarCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the rotation angle value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterRotAngleCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the rotation angle variation value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterRotAngleVarCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the rotation speed value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterRotSpeedCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the rotation speed variation value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterRotSpeedVarCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Animates the lifespan value on an NiPSEmitter object.\n    ",
        "$": {
          "name": "NiPSEmitterLifeSpanCtlr",
          "inherit": "NiPSEmitterFloatCtlr"
        }
      },
      {
        "_": "\n        Calls ResetParticleSystem on an NiPSParticleSystem target upon looping.\n    ",
        "$": {
          "name": "NiPSResetOnLoopCtlr",
          "inherit": "NiTimeController"
        }
      },
      {
        "_": "\n        Abstract base class for all particle colliders.\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSCollider",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Spawner",
              "type": "Ref",
              "template": "NiPSSpawner"
            }
          },
          {
            "$": {
              "name": "Type",
              "type": "ColliderType"
            }
          },
          {
            "$": {
              "name": "Active",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Bounce",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Spawn on Collide",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Die on Collide",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n        A planar collider for particles.\n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSPlanarCollider",
          "inherit": "NiPSCollider"
        },
        "add": [
          {
            "$": {
              "name": "Width",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Height",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "X Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Y Axis",
              "type": "Vector3"
            }
          },
          {
            "$": {
              "name": "Collider Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        A spherical collider for particles.\n        \n        \n    ",
        "$": {
          "name": "NiPSSphericalCollider",
          "inherit": "NiPSCollider"
        },
        "add": [
          {
            "$": {
              "name": "Radius",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Collider Object",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          }
        ]
      },
      {
        "_": "\n        Creates a new particle whose initial parameters are based on an existing particle.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiPSSpawner",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Master Particle System",
              "type": "Ptr",
              "template": "NiPSParticleSystem",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Percentage Spawned",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Spawn Speed Factor",
              "type": "float",
              "ver1": "20.6.1.0"
            }
          },
          {
            "$": {
              "name": "Spawn Speed Factor Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Spawn Dir Chaos",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Life Span",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Life Span Var",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Num Spawn Generations",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Min to Spawn",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Max to Spawn",
              "type": "uint"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiEvaluator",
          "abstract": "1",
          "inherit": "NiObject"
        },
        "add": [
          {
            "_": "The name of the animated NiAVObject.",
            "$": {
              "name": "Node Name",
              "type": "string"
            }
          },
          {
            "_": "The RTTI type of the NiProperty the controller is attached to, if applicable.",
            "$": {
              "name": "Property Type",
              "type": "string"
            }
          },
          {
            "_": "The RTTI type of the NiTimeController.",
            "$": {
              "name": "Controller Type",
              "type": "string"
            }
          },
          {
            "_": "An ID that can uniquely identify the controller among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Controller ID",
              "type": "string"
            }
          },
          {
            "_": "An ID that can uniquely identify the interpolator among others of the same type on the same NiObjectNET.",
            "$": {
              "name": "Interpolator ID",
              "type": "string"
            }
          },
          {
            "_": "\n            Channel Indices are BASE/POS = 0, ROT = 1, SCALE = 2, FLAG = 3\n            Channel Types are:\n             INVALID = 0, COLOR, BOOL, FLOAT, POINT3, ROT = 5\n            Any channel may be | 0x40 which means POSED\n            The FLAG (3) channel flags affects the whole evaluator:\n             REFERENCED = 0x1, TRANSFORM = 0x2, ALWAYSUPDATE = 0x4, SHUTDOWN = 0x8\n        ",
            "$": {
              "name": "Channel Types",
              "type": "byte",
              "arr1": "4"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiKeyBasedEvaluator",
          "abstract": "1",
          "inherit": "NiEvaluator"
        }
      },
      {
        "$": {
          "name": "NiBoolEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiBoolData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBoolTimelineEvaluator",
          "inherit": "NiBoolEvaluator"
        }
      },
      {
        "$": {
          "name": "NiColorEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiColorData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiFloatEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPoint3Evaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiPosData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiQuaternionEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiRotData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiTransformEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "NiQuatTransform"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiTransformData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstBoolEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstColorEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "Color4",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38, -3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstFloatEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstPoint3Evaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "Vector3",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38,"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstQuaternionEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "Quaternion",
              "default": "-3.402823466e+38, -3.402823466e+38, -3.402823466e+38, -3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiConstTransformEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Value",
              "type": "NiQuatTransform"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Start Time",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "End Time",
              "type": "float",
              "default": "-3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "NiBSplineData"
            }
          },
          {
            "$": {
              "name": "Basis Data",
              "type": "Ref",
              "template": "NiBSplineBasisData"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineColorEvaluator",
          "inherit": "NiBSplineEvaluator"
        },
        "add": [
          {
            "_": "Handle into the data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineCompColorEvaluator",
          "inherit": "NiBSplineColorEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineFloatEvaluator",
          "inherit": "NiBSplineEvaluator"
        },
        "add": [
          {
            "_": "Handle into the data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineCompFloatEvaluator",
          "inherit": "NiBSplineFloatEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplinePoint3Evaluator",
          "inherit": "NiBSplineEvaluator"
        },
        "add": [
          {
            "_": "Handle into the data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineCompPoint3Evaluator",
          "inherit": "NiBSplinePoint3Evaluator"
        },
        "add": [
          {
            "$": {
              "name": "Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineTransformEvaluator",
          "inherit": "NiBSplineEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Transform",
              "type": "NiQuatTransform"
            }
          },
          {
            "_": "Handle into the translation data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Translation Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          },
          {
            "_": "Handle into the rotation data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Rotation Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          },
          {
            "_": "Handle into the scale data. (USHRT_MAX for invalid handle.)",
            "$": {
              "name": "Scale Handle",
              "type": "uint",
              "default": "0xFFFF"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiBSplineCompTransformEvaluator",
          "inherit": "NiBSplineTransformEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Translation Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Translation Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Rotation Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Rotation Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Scale Offset",
              "type": "float",
              "default": "3.402823466e+38"
            }
          },
          {
            "$": {
              "name": "Scale Half Range",
              "type": "float",
              "default": "3.402823466e+38"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiLookAtEvaluator",
          "inherit": "NiEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "LookAtFlags"
            }
          },
          {
            "$": {
              "name": "Look At Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Driven Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Interpolator: Translation",
              "type": "Ref",
              "template": "NiPoint3Interpolator"
            }
          },
          {
            "$": {
              "name": "Interpolator: Roll",
              "type": "Ref",
              "template": "NiFloatInterpolator"
            }
          },
          {
            "$": {
              "name": "Interpolator: Scale",
              "type": "Ref",
              "template": "NiFloatInterpolator"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiPathEvaluator",
          "inherit": "NiKeyBasedEvaluator"
        },
        "add": [
          {
            "$": {
              "name": "Flags",
              "type": "PathFlags",
              "default": "3"
            }
          },
          {
            "_": "-1 = Negative, 1 = Positive",
            "$": {
              "name": "Bank Dir",
              "type": "int",
              "default": "1"
            }
          },
          {
            "_": "Max angle in radians.",
            "$": {
              "name": "Max Bank Angle",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Smoothing",
              "type": "float"
            }
          },
          {
            "_": "0, 1, or 2 representing X, Y, or Z.",
            "$": {
              "name": "Follow Axis",
              "type": "short"
            }
          },
          {
            "$": {
              "name": "Path Data",
              "type": "Ref",
              "template": "NiPosData"
            }
          },
          {
            "$": {
              "name": "Percent Data",
              "type": "Ref",
              "template": "NiFloatData"
            }
          }
        ]
      },
      {
        "_": "\n        Root node in Gamebryo .kf files (20.5.0.1 and up).\n        For 20.5.0.0, \"NiSequenceData\" is an alias for \"NiControllerSequence\" and this is not handled in nifxml.\n        This was not found in any 20.5.0.0 KFs available and they instead use NiControllerSequence directly.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiSequenceData",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Num Controlled Blocks",
              "type": "uint",
              "ver2": "20.5.0.1"
            }
          },
          {
            "$": {
              "name": "Array Grow By",
              "type": "uint",
              "ver2": "20.5.0.1"
            }
          },
          {
            "$": {
              "name": "Controlled Blocks",
              "type": "ControlledBlock",
              "arr1": "Num Controlled Blocks",
              "ver2": "20.5.0.1"
            }
          },
          {
            "$": {
              "name": "Num Evaluators",
              "type": "uint",
              "ver1": "20.5.0.2"
            }
          },
          {
            "$": {
              "name": "Evaluators",
              "type": "Ref",
              "template": "NiEvaluator",
              "arr1": "Num Evaluators",
              "ver1": "20.5.0.2"
            }
          },
          {
            "$": {
              "name": "Text Keys",
              "type": "Ref",
              "template": "NiTextKeyExtraData"
            }
          },
          {
            "$": {
              "name": "Duration",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Cycle Type",
              "type": "CycleType"
            }
          },
          {
            "$": {
              "name": "Frequency",
              "type": "float",
              "default": "1.0"
            }
          },
          {
            "_": "The name of the NiAVObject serving as the accumulation root. This is where all accumulated translations, scales, and rotations are applied.",
            "$": {
              "name": "Accum Root Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Accum Flags",
              "type": "AccumFlags",
              "default": "ACCUM_X_FRONT"
            }
          }
        ]
      },
      {
        "_": "\n        An NiShadowGenerator object is attached to an NiDynamicEffect object to inform the shadowing system that the effect produces shadows.\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "NiShadowGenerator",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Name",
              "type": "string"
            }
          },
          {
            "$": {
              "name": "Flags",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Num Shadow Casters",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Shadow Casters",
              "type": "Ref",
              "template": "NiNode",
              "arr1": "Num Shadow Casters"
            }
          },
          {
            "$": {
              "name": "Num Shadow Receivers",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Shadow Receivers",
              "type": "Ref",
              "template": "NiNode",
              "arr1": "Num Shadow Receivers"
            }
          },
          {
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiDynamicEffect"
            }
          },
          {
            "$": {
              "name": "Depth Bias",
              "type": "float",
              "default": "0.98"
            }
          },
          {
            "$": {
              "name": "Size Hint",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Near Clipping Distance",
              "type": "float",
              "ver1": "20.3.0.7"
            }
          },
          {
            "$": {
              "name": "Far Clipping Distance",
              "type": "float",
              "ver1": "20.3.0.7"
            }
          },
          {
            "$": {
              "name": "Directional Light Frustum Width",
              "type": "float",
              "ver1": "20.3.0.7"
            }
          }
        ]
      },
      {
        "$": {
          "name": "NiFurSpringController",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "$": {
              "name": "Unknown Float",
              "type": "float"
            }
          },
          {
            "$": {
              "name": "Unknown Float 2",
              "type": "float"
            }
          },
          {
            "_": "The number of node bones referenced as influences.",
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "_": "List of all armature bones.",
            "$": {
              "name": "Bones",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Bones"
            }
          },
          {
            "_": "The number of node bones referenced as influences.",
            "$": {
              "name": "Num Bones 2",
              "type": "uint"
            }
          },
          {
            "_": "List of all armature bones.",
            "$": {
              "name": "Bones 2",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Bones 2"
            }
          }
        ]
      },
      {
        "$": {
          "name": "CStreamableAssetData",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Root",
              "type": "Ref",
              "template": "NiNode"
            }
          },
          {
            "$": {
              "name": "Unknown Bytes",
              "type": "byte",
              "arr1": "5"
            }
          }
        ]
      },
      {
        "_": "\n        Compressed collision mesh.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "bhkCompressedMeshShape",
          "inherit": "bhkShape"
        },
        "add": [
          {
            "_": "Points to root node?",
            "$": {
              "name": "Target",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "User Data",
              "type": "uint"
            }
          },
          {
            "_": "A shell that is added around the shape.",
            "$": {
              "name": "Radius",
              "type": "float",
              "default": "0.005"
            }
          },
          {
            "_": "Unknown.",
            "$": {
              "name": "Unknown Float 1",
              "type": "float"
            }
          },
          {
            "_": "Scale",
            "$": {
              "name": "Scale",
              "type": "Vector4",
              "default": "1.0, 1.0, 1.0, 0.0"
            }
          },
          {
            "_": "A shell that is added around the shape.",
            "$": {
              "name": "Radius Copy",
              "type": "float",
              "default": "0.005"
            }
          },
          {
            "_": "Scale",
            "$": {
              "name": "Scale Copy",
              "type": "Vector4",
              "default": "1.0, 1.0, 1.0, 0.0"
            }
          },
          {
            "_": "The collision mesh data.",
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "bhkCompressedMeshShapeData"
            }
          }
        ]
      },
      {
        "_": "\n         A compressed mesh shape for collision in Skyrim.\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n        \n\t\t\n\t\t\n        \n        \n        \n        \n        \n\t",
        "$": {
          "name": "bhkCompressedMeshShapeData",
          "inherit": "bhkRefObject"
        },
        "add": [
          {
            "_": "Number of bits in the shape-key reserved for a triangle index",
            "$": {
              "name": "Bits Per Index",
              "type": "uint"
            }
          },
          {
            "_": "Number of bits in the shape-key reserved for a triangle index and its winding",
            "$": {
              "name": "Bits Per W Index",
              "type": "uint"
            }
          },
          {
            "_": "Mask used to get the triangle index and winding from a shape-key (common: 262143 = 0x3ffff)",
            "$": {
              "name": "Mask W Index",
              "type": "uint"
            }
          },
          {
            "_": "Mask used to get the triangle index from a shape-key (common: 131071 = 0x1ffff)",
            "$": {
              "name": "Mask Index",
              "type": "uint"
            }
          },
          {
            "_": "The radius of the storage mesh shape? Quantization error?",
            "$": {
              "name": "Error",
              "type": "float"
            }
          },
          {
            "_": "The minimum boundary of the AABB (the coordinates of the corner with the lowest numerical values)",
            "$": {
              "name": "Bounds Min",
              "type": "Vector4"
            }
          },
          {
            "_": "The maximum boundary of the AABB (the coordinates of the corner with the highest numerical values)",
            "$": {
              "name": "Bounds Max",
              "type": "Vector4"
            }
          },
          {
            "$": {
              "name": "Welding Type",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Material Type",
              "type": "byte"
            }
          },
          {
            "$": {
              "name": "Num Materials 32",
              "type": "uint"
            }
          },
          {
            "_": "Does not appear to be used.",
            "$": {
              "name": "Materials 32",
              "type": "uint",
              "arr1": "Num Materials 32"
            }
          },
          {
            "$": {
              "name": "Num Materials 16",
              "type": "uint"
            }
          },
          {
            "_": "Does not appear to be used.",
            "$": {
              "name": "Materials 16",
              "type": "uint",
              "arr1": "Num Materials 16"
            }
          },
          {
            "$": {
              "name": "Num Materials 8",
              "type": "uint"
            }
          },
          {
            "_": "Does not appear to be used.",
            "$": {
              "name": "Materials 8",
              "type": "uint",
              "arr1": "Num Materials 8"
            }
          },
          {
            "_": "Number of chunk materials",
            "$": {
              "name": "Num Materials",
              "type": "uint"
            }
          },
          {
            "_": "Table (array) with sets of materials. Chunks refers to this table by index.",
            "$": {
              "name": "Chunk Materials",
              "type": "bhkCMSDMaterial",
              "arr1": "Num Materials"
            }
          },
          {
            "$": {
              "name": "Num Named Materials",
              "type": "uint"
            }
          },
          {
            "_": "Number of chunk transformations",
            "$": {
              "name": "Num Transforms",
              "type": "uint"
            }
          },
          {
            "_": "Table (array) with sets of transformations. Chunks refers to this table by index.",
            "$": {
              "name": "Chunk Transforms",
              "type": "bhkCMSDTransform",
              "arr1": "Num Transforms"
            }
          },
          {
            "$": {
              "name": "Num Big Verts",
              "type": "uint"
            }
          },
          {
            "_": "Compressed Vertices?",
            "$": {
              "name": "Big Verts",
              "type": "Vector4",
              "arr1": "Num Big Verts"
            }
          },
          {
            "$": {
              "name": "Num Big Tris",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Big Tris",
              "type": "bhkCMSDBigTris",
              "arr1": "Num Big Tris"
            }
          },
          {
            "$": {
              "name": "Num Chunks",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Chunks",
              "type": "bhkCMSDChunk",
              "arr1": "Num Chunks"
            }
          },
          {
            "_": "Does not appear to be used. Needs array.",
            "$": {
              "name": "Num Convex Piece A",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n    Orientation marker for Skyrim's inventory view.\n        How to show the nif in the player's inventory.\n        Typically attached to the root node of the nif tree.\n        If not present, then Skyrim will still show the nif in inventory,\n        using the default values.\n        Name should be 'INV' (without the quotes).\n        For rotations, a short of \"4712\" appears as \"4.712\" but \"959\" appears as \"0.959\"  meshes\\weapons\\daedric\\daedricbowskinned.nif\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSInvMarker",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Rotation X",
              "type": "ushort",
              "default": "4712"
            }
          },
          {
            "$": {
              "name": "Rotation Y",
              "type": "ushort",
              "default": "6283"
            }
          },
          {
            "$": {
              "name": "Rotation Z",
              "type": "ushort",
              "default": "0"
            }
          },
          {
            "_": "Zoom factor.",
            "$": {
              "name": "Zoom",
              "type": "float",
              "default": "1.0"
            }
          }
        ]
      },
      {
        "_": "\n    Unknown\n\t\t\n        \n\t",
        "$": {
          "name": "BSBoneLODExtraData",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Number of bone entries",
            "$": {
              "name": "BoneLOD Count",
              "type": "uint"
            }
          },
          {
            "_": "Bone Entry",
            "$": {
              "name": "BoneLOD Info",
              "type": "BoneLOD",
              "arr1": "BoneLOD Count"
            }
          }
        ]
      },
      {
        "_": "\n    Links a nif with a Havok Behavior .hkx animation file\n\t\t\n\t\t\n\t",
        "$": {
          "name": "BSBehaviorGraphExtraData",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "_": "Name of the hkx file.",
            "$": {
              "name": "Behaviour Graph File",
              "type": "string"
            }
          },
          {
            "_": "Unknown, has to do with blending appended bones onto an actor.",
            "$": {
              "name": "Controls Base Skeleton",
              "type": "bool"
            }
          }
        ]
      },
      {
        "_": "\n    A controller that trails a bone behind an actor.\n\t\t\n\t\t\n\t\t\n\t",
        "$": {
          "name": "BSLagBoneController",
          "inherit": "NiTimeController"
        },
        "add": [
          {
            "_": "How long it takes to rotate about an actor back to rest position.",
            "$": {
              "name": "Linear Velocity",
              "type": "float"
            }
          },
          {
            "_": "How the bone lags rotation",
            "$": {
              "name": "Linear Rotation",
              "type": "float"
            }
          },
          {
            "_": "How far bone will tail an actor.",
            "$": {
              "name": "Maximum Distance",
              "type": "float"
            }
          }
        ]
      },
      {
        "_": "\n\t\tA variation on NiTriShape, for visibility control over vertex groups.\n\t\t\n\t\t\n\t\t\n\t",
        "$": {
          "name": "BSLODTriShape",
          "inherit": "NiTriBasedGeom"
        },
        "add": [
          {
            "$": {
              "name": "LOD0 Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD1 Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD2 Size",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Furniture Marker for actors\n    ",
        "$": {
          "name": "BSFurnitureMarkerNode",
          "inherit": "BSFurnitureMarker"
        }
      },
      {
        "_": "\n        Unknown, related to trees.\n    ",
        "$": {
          "name": "BSLeafAnimNode",
          "inherit": "NiNode"
        }
      },
      {
        "_": "\n        Node for handling Trees, Switches branch configurations for variation?\n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSTreeNode",
          "inherit": "NiNode"
        },
        "add": [
          {
            "$": {
              "name": "Num Bones 1",
              "type": "uint"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Bones 1",
              "type": "Ref",
              "arr1": "Num Bones 1",
              "template": "NiNode"
            }
          },
          {
            "$": {
              "name": "Num Bones 2",
              "type": "uint"
            }
          },
          {
            "_": "Unknown",
            "$": {
              "name": "Bones",
              "type": "Ref",
              "arr1": "Num Bones 2",
              "template": "NiNode"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Tri Shape\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSTriShape",
          "abstract": "0",
          "inherit": "NiAVObject"
        },
        "add": [
          {
            "$": {
              "name": "Bounding Sphere",
              "type": "NiBound"
            }
          },
          {
            "$": {
              "name": "Skin",
              "type": "Ref",
              "template": "NiObject"
            }
          },
          {
            "$": {
              "name": "Shader Property",
              "type": "Ref",
              "template": "BSShaderProperty"
            }
          },
          {
            "$": {
              "name": "Alpha Property",
              "type": "Ref",
              "template": "NiAlphaProperty"
            }
          },
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc"
            }
          },
          {
            "$": {
              "name": "Num Triangles",
              "type": "uint",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Num Triangles",
              "type": "ushort",
              "vercond": "User Version 2 < 130"
            }
          },
          {
            "$": {
              "name": "Num Vertices",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Data Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Vertex Data",
              "type": "BSVertexData",
              "arr1": "Num Vertices",
              "arg": "Vertex Desc\\Vertex Attributes",
              "cond": "Data Size > 0",
              "userver2": "130"
            }
          },
          {
            "$": {
              "name": "Vertex Data",
              "type": "BSVertexDataSSE",
              "arr1": "Num Vertices",
              "arg": "Vertex Desc\\Vertex Attributes",
              "cond": "Data Size > 0",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Triangles",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "cond": "Data Size > 0"
            }
          },
          {
            "$": {
              "name": "Particle Data Size",
              "type": "uint",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Vertices",
              "type": "Vector3",
              "arr1": "Num Vertices",
              "cond": "Particle Data Size > 0",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Triangles Copy",
              "type": "Triangle",
              "arr1": "Num Triangles",
              "cond": "Particle Data Size > 0",
              "userver2": "100"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 LOD Tri Shape\n        \n        \n        \n    ",
        "$": {
          "name": "BSMeshLODTriShape",
          "inherit": "BSTriShape"
        },
        "add": [
          {
            "$": {
              "name": "LOD0 Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD1 Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "LOD2 Size",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Sub-Index Tri Shape\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n    ",
        "$": {
          "name": "BSSubIndexTriShape",
          "inherit": "BSTriShape"
        },
        "add": [
          {
            "$": {
              "name": "Num Primitives",
              "type": "uint",
              "userver2": "130",
              "cond": "Data Size > 0"
            }
          },
          {
            "$": {
              "name": "Num Segments",
              "type": "uint",
              "userver2": "130",
              "cond": "Data Size > 0"
            }
          },
          {
            "$": {
              "name": "Total Segments",
              "type": "uint",
              "userver2": "130",
              "cond": "Data Size > 0"
            }
          },
          {
            "$": {
              "name": "Segment",
              "type": "BSGeometrySegmentData",
              "userver2": "130",
              "arr1": "Num Segments",
              "cond": "Data Size > 0"
            }
          },
          {
            "$": {
              "name": "Segment Data",
              "type": "BSGeometrySegmentSharedData",
              "userver2": "130",
              "cond": "(Num Segments < Total Segments) && (Data Size > 0)"
            }
          },
          {
            "$": {
              "name": "Num Segments",
              "type": "uint",
              "userver2": "100"
            }
          },
          {
            "$": {
              "name": "Segment",
              "type": "BSGeometrySegmentData",
              "userver2": "100",
              "arr1": "Num Segments"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Physics System\n    ",
        "$": {
          "name": "bhkSystem",
          "abstract": "1",
          "inherit": "NiObject"
        }
      },
      {
        "_": "\n        Fallout 4 Collision Object\n        \n        \n        \n    ",
        "$": {
          "name": "bhkNPCollisionObject",
          "inherit": "NiCollisionObject"
        },
        "add": [
          {
            "_": "\n            Due to inaccurate reporting in the CK the Reset and Sync On Update positions are a guess.\n            Bits: 0=Reset, 2=Notify, 3=SetLocal, 7=SyncOnUpdate, 10=AnimTargeted\n        ",
            "$": {
              "name": "Flags",
              "type": "ushort"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "bhkSystem"
            }
          },
          {
            "$": {
              "name": "Body ID",
              "type": "uint"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Collision System\n        \n    ",
        "$": {
          "name": "bhkPhysicsSystem",
          "inherit": "bhkSystem"
        },
        "add": [
          {
            "$": {
              "name": "Binary Data",
              "type": "ByteArray"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Ragdoll System\n        \n    ",
        "$": {
          "name": "bhkRagdollSystem",
          "inherit": "bhkSystem"
        },
        "add": [
          {
            "$": {
              "name": "Binary Data",
              "type": "ByteArray"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Extra Data\n    ",
        "$": {
          "name": "BSExtraData",
          "inherit": "NiExtraData"
        }
      },
      {
        "_": "\n        Fallout 4 Cloth data\n        \n    ",
        "$": {
          "name": "BSClothExtraData",
          "inherit": "BSExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Binary Data",
              "type": "ByteArray"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Skin Instance\n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSSkin::Instance",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Skeleton Root",
              "type": "Ptr",
              "template": "NiAVObject"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "Ref",
              "template": "BSSkin::BoneData"
            }
          },
          {
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bones",
              "type": "Ptr",
              "template": "NiNode",
              "arr1": "Num Bones"
            }
          },
          {
            "$": {
              "name": "Num Unknown",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unknown",
              "type": "Vector3",
              "arr1": "Num Unknown"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Bone Data\n        \n        \n    ",
        "$": {
          "name": "BSSkin::BoneData",
          "inherit": "NiObject"
        },
        "add": [
          {
            "$": {
              "name": "Num Bones",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Bone List",
              "type": "BSSkinBoneTrans",
              "arr1": "Num Bones"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Positional Data\n        \n        \n    ",
        "$": {
          "name": "BSPositionData",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Data",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "hfloat",
              "arr1": "Num Data"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Item Slot Parent\n        \n        \n    ",
        "$": {
          "name": "BSConnectPoint::Parents",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Connect Points",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Connect Points",
              "type": "BSConnectPoint",
              "arr1": "Num Connect Points"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Item Slot Child\n        \n        \n        \n    ",
        "$": {
          "name": "BSConnectPoint::Children",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Skinned",
              "type": "bool"
            }
          },
          {
            "$": {
              "name": "Num Points",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Name",
              "type": "SizedString",
              "arr1": "Num Points"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Eye Center Data\n        \n        \n    ",
        "$": {
          "name": "BSEyeCenterExtraData",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Num Data",
              "type": "int"
            }
          },
          {
            "$": {
              "name": "Data",
              "type": "float",
              "arr1": "Num Data"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Packed Combined Geometry Data.\n        Geometry is baked into the file and given a list of transforms to position each copy.\n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "$": {
          "name": "BSPackedCombinedGeomDataExtra",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Vertex Desc",
              "type": "BSVertexDesc"
            }
          },
          {
            "$": {
              "name": "Num Vertices",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Triangles",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unknown Flags 1",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Unknown Flags 2",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Num Data",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Object",
              "type": "BSPackedGeomObject",
              "arr1": "Num Data",
              "cond": "BSPackedCombinedSharedGeomDataExtra"
            }
          },
          {
            "$": {
              "name": "Object Data",
              "type": "BSPackedGeomData",
              "arr1": "Num Data"
            }
          }
        ]
      },
      {
        "_": "\n        Fallout 4 Packed Combined Shared Geometry Data.\n        Geometry is NOT baked into the file. It is instead a reference to the shape via a Shape ID (currently undecoded)\n        which loads the geometry via the STAT form for the NIF.\n    ",
        "$": {
          "name": "BSPackedCombinedSharedGeomDataExtra",
          "inherit": "BSPackedCombinedGeomDataExtra"
        }
      },
      {
        "$": {
          "name": "NiLightRadiusController",
          "inherit": "NiFloatInterpController"
        }
      },
      {
        "$": {
          "name": "BSDynamicTriShape",
          "inherit": "BSTriShape"
        },
        "add": [
          {
            "$": {
              "name": "Vertex Data Size",
              "type": "uint"
            }
          },
          {
            "$": {
              "name": "Vertices",
              "type": "Vector4",
              "arr1": "Num Vertices",
              "cond": "Vertex Data Size > 0"
            }
          }
        ]
      },
      {
        "_": "\n        Large ref flag.\n\t\t\n\t",
        "$": {
          "name": "BSDistantObjectLargeRefExtraData",
          "abstract": "0",
          "inherit": "NiExtraData"
        },
        "add": [
          {
            "$": {
              "name": "Large Ref",
              "type": "bool"
            }
          }
        ]
      }
    ]
  }
}
